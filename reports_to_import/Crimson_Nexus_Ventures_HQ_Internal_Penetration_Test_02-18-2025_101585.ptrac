{"report_info":{"id":643025423,"cuid":"cma3zpgx800q40hp773j18r1o","client_id":59013,"name":"HQ Internal Penetration Test","status":"Published","created_at":1746020806892,"fields_template":"default","tags":[],"reviewers":[],"classificationTierId":null,"template":"0e658a78-826b-4ea8-86a1-026659202593","description":"","logistics":"","reportType":"default","includeEvidence":false,"start_date":"2025-02-11T05:00:00.000Z","end_date":"2025-02-18T05:00:00.000Z","exec_summary":{"custom_fields":[{"id":"clooo1du5000f0hqc1uq3bm9m","label":"Introduction","tags":[],"text":"<p>Lorem Ipsum is simply dummy text of the printing and typesetting industry. Lorem Ipsum has been the industry's standard dummy text ever since the 1500s, when an unknown printer took a galley of type and scrambled it to make a type specimen book. It has survived not only five centuries, but also the leap into electronic typesetting, remaining essentially unchanged. It was popularised in the 1960s with the release of Letraset sheets containing Lorem Ipsum passages, and more recently with desktop publishing software like Aldus PageMaker including versions of Lorem Ipsum.</p>","repository":null,"isFromNarrativesDB":false,"titleCommentThreadId":null,"cuid":"cma3zpgyx00q50hp7hbjd926v"},{"id":"clooo1du6000g0hqc405k9mbb","label":"Methodology","tags":[],"text":"<p>Lorem Ipsum is simply dummy text of the printing and typesetting industry. Lorem Ipsum has been the industry's standard dummy text ever since the 1500s, when an unknown printer took a galley of type and scrambled it to make a type specimen book. It has survived not only five centuries, but also the leap into electronic typesetting, remaining essentially unchanged. It was popularised in the 1960s with the release of Letraset sheets containing Lorem Ipsum passages, and more recently with desktop publishing software like Aldus PageMaker including versions of Lorem Ipsum.</p><p>Lorem Ipsum is simply dummy text of the printing and typesetting industry. Lorem Ipsum has been the industry's standard dummy text ever since the 1500s, when an unknown printer took a galley of type and scrambled it to make a type specimen book. It has survived not only five centuries, but also the leap into electronic typesetting, remaining essentially unchanged. It was popularised in the 1960s with the release of Letraset sheets containing Lorem Ipsum passages, and more recently with desktop publishing software like Aldus PageMaker including versions of Lorem Ipsum.</p>","repository":null,"isFromNarrativesDB":false,"titleCommentThreadId":null,"cuid":"cma3zpgyx00q60hp76fda59x2"},{"id":"clooo1du6000h0hqceyd1hs0f","label":"Scope","tags":[],"text":"<p>Lorem Ipsum is simply dummy text of the printing and typesetting industry. Lorem Ipsum has been the industry's standard dummy text ever since the 1500s, when an unknown printer took a galley of type and scrambled it to make a type specimen book. It has survived not only five centuries, but also the leap into electronic typesetting, remaining essentially unchanged. It was popularised in the 1960s with the release of Letraset sheets containing Lorem Ipsum passages, and more recently with desktop publishing software like Aldus PageMaker including versions of Lorem Ipsum.</p><p>Lorem Ipsum is simply dummy text of the printing and typesetting industry. Lorem Ipsum has been the industry's standard dummy text ever since the 1500s, when an unknown printer took a galley of type and scrambled it to make a type specimen book. It has survived not only five centuries, but also the leap into electronic typesetting, remaining essentially unchanged. It was popularised in the 1960s with the release of Letraset sheets containing Lorem Ipsum passages, and more recently with desktop publishing software like Aldus PageMaker including versions of Lorem Ipsum.</p><p>Lorem Ipsum is simply dummy text of the printing and typesetting industry. Lorem Ipsum has been the industry's standard dummy text ever since the 1500s, when an unknown printer took a galley of type and scrambled it to make a type specimen book. It has survived not only five centuries, but also the leap into electronic typesetting, remaining essentially unchanged. It was popularised in the 1960s with the release of Letraset sheets containing Lorem Ipsum passages, and more recently with desktop publishing software like Aldus PageMaker including versions of Lorem Ipsum.</p>","repository":null,"isFromNarrativesDB":false,"titleCommentThreadId":null,"cuid":"cma3zpgyx00q70hp7da83d02r"},{"id":"clooo1du6000i0hqcd0sf7l4g","label":"Summary of Findings","tags":[],"text":"<p>Lorem Ipsum is simply dummy text of the printing and typesetting industry. Lorem Ipsum has been the industry's standard dummy text ever since the 1500s, when an unknown printer took a galley of type and scrambled it to make a type specimen book. It has survived not only five centuries, but also the leap into electronic typesetting, remaining essentially unchanged. It was popularised in the 1960s with the release of Letraset sheets containing Lorem Ipsum passages, and more recently with desktop publishing software like Aldus PageMaker including versions of Lorem Ipsum.</p><ul><li>Lorem Ipsum is simply dummy text of the printing and typesetting industry. </li><li>Lorem Ipsum has been the industry's standard dummy text ever since the 1500s.</li></ul>","repository":null,"isFromNarrativesDB":false,"titleCommentThreadId":null,"cuid":"cma3zpgyx00q80hp75oeid1ec"},{"id":"clooo1du6000j0hqc589se5ev","label":"Appendix 1","tags":[],"text":"<p>Lorem Ipsum is simply dummy text of the printing and typesetting industry. Lorem Ipsum has been the industry's standard dummy text ever since the 1500s, when an unknown printer took a galley of type and scrambled it to make a type specimen book. It has survived not only five centuries, but also the leap into electronic typesetting, remaining essentially unchanged. It was popularised in the 1960s with the release of Letraset sheets containing Lorem Ipsum passages, and more recently with desktop publishing software like Aldus PageMaker including versions of Lorem Ipsum.</p><ul><li>Lorem Ipsum is simply dummy text of the printing and typesetting industry. </li></ul><p>Lorem Ipsum is simply dummy text of the printing and typesetting industry. Lorem Ipsum has been the industry's standard dummy text ever since the 1500s, when an unknown printer took a galley of type and scrambled it to make a type specimen book. It has survived not only five centuries, but also the leap into electronic typesetting, remaining essentially unchanged. It was popularised in the 1960s with the release of Letraset sheets containing Lorem Ipsum passages, and more recently with desktop publishing software like Aldus PageMaker including versions of Lorem Ipsum.</p>","repository":null,"isFromNarrativesDB":false,"titleCommentThreadId":null,"cuid":"cma3zpgyx00q90hp769mx2equ"}]},"custom_field":[{"label":"Author Title","value":"Jason Todd"},{"label":"Author Email","value":"j.todd@wayneenterprise.com"},{"label":"Company Name","value":"Wayne Enterprise - Tiger Team"},{"label":"Company Address","value":"1 Wayne Blvd"}],"operators":[],"isTrackChanges":false,"report_id":643025423,"source_tenant":{"name":"","tenant_id":0},"baseURL":"victoriam.demo.plextrac.ninja"},"flaws_array":[{"id":9566614,"doc_id":[59013,643025423],"data":[9566614,"High","JavaScript injection (stored DOM-based)","Closed",1746021199678,null,1740114000000,1728914099562,null,null,"published"],"affected_assets":{},"assignedTo":null,"client_id":59013,"client_name":"Crimson Nexus Ventures","code_samples":[],"createdAt":1740114000000,"description":"<p>Stored DOM-based vulnerabilities arise when user input is stored and later embedded into a response within a part of the DOM that is then processed in an unsafe way by a client-side script. An attacker can leverage the data storage to control a part of the response (for example, a JavaScript string) that can be used to trigger the DOM-based vulnerability.<br />DOM-based JavaScript injection arises when a script executes controllable data as JavaScript. An attacker may be able to use the vulnerability to construct a URL that, if visited by another application user, will cause JavaScript code supplied by the attacker to execute within the user's browser in the context of that user's session with the application.<br />The attacker-supplied code can perform a wide variety of actions, such as stealing the victim's session token or login credentials, performing arbitrary actions on the victim's behalf, and logging their keystrokes.<br />Users can be induced to visit the attacker's crafted URL in various ways, similar to the usual attack delivery vectors for reflected cross-site scripting vulnerabilities.<br />Burp Suite automatically identifies this issue using static code analysis, which may lead to false positives that are not actually exploitable. The relevant code and execution paths should be reviewed to determine whether this vulnerability is indeed present, or whether mitigations are in place that would prevent exploitation.</p>","doc_type":"flaw","doc_version":"1.60.8","exhibits":[],"flaw_id":9566614,"last_update":1746021199678,"reopenedAt":null,"report_id":643025423,"report_name":"HQ Internal Penetration Test","sev":1,"severity":"High","severity_key":1,"source":"PTrac","status":"Closed","title":"JavaScript injection (stored DOM-based)","visibility":"published","closedAt":1728914099562,"fields":{},"jiraIssue":null,"recommendations":"<p>The most effective way to avoid DOM-based JavaScript injection vulnerabilities is not to execute as JavaScript any data that originated from an untrusted source. If the desired functionality of the application means that this behavior is unavoidable, then defenses must be implemented within the client-side code to prevent malicious data from executing as script. In many cases, the relevant data can be validated on a whitelist basis, to allow only content that is known to be safe. In other cases, it will be necessary to sanitize or encode the data. This can be a complex task, and may need to involve a combination of JavaScript escaping and HTML encoding, in the appropriate sequence.</p>","references":"<ul><li>CWE-94: Improper Control of Generation of Code ('Code Injection')(https://cwe.mitre.org/data/definitions/94.html)</li><li>CWE-95: Improper Neutralization of Directives in Dynamically Evaluated Code ('Eval Injection')(https://cwe.mitre.org/data/definitions/95.html)</li><li>CWE-116: Improper Encoding or Escaping of Output(https://cwe.mitre.org/data/definitions/116.html)</li></ul>","selectedScore":null,"serviceNowTicket":null,"scores":{},"subStatus":"remediated","tags":[],"tenant_id":0,"hackerOneData":null,"snykData":null,"edgescanData":null,"integrationData":null,"calculated_severity":false,"reportedAt":1740114000000,"finding_id":null,"cuid":"cma3zph5z00qa0hp71eyvesqe"},{"id":109034055,"doc_id":[59013,643025423],"data":[109034055,"High","Local file path manipulation (DOM-based)","Closed",1746454643599,null,1740114000000,1728914099562,null,null,"published"],"affected_assets":{},"assignedTo":null,"client_id":59013,"client_name":"Crimson Nexus Ventures","code_samples":[],"createdAt":1740114000000,"description":"<p>DOM-based vulnerabilities arise when a client-side script reads data from a controllable part of the DOM (for example, the URL) and processes this data in an unsafe way.<br />Local file path manipulation  arises when a script uses controllable data as the filename parameter to a file handling API. An attacker may be able to use the vulnerability to construct a URL that, if visited by another application user, will cause the user's browser to open an arbitrary local file.<br />The potential impact of the vulnerability depends on the application's usage of the opened file. If the application reads data from the file, then the attacker may be able to retrieve this data. If the application writes data to the file, then the attacker may be able to write specific data to a sensitive file, such as an operating system configuration file. In both these cases, the actual exploitability of the potential vulnerability may depend on other suitable functionality being present in the application.<br />Burp Suite automatically identifies this issue using static code analysis, which may lead to false positives that are not actually exploitable. The relevant code and execution paths should be reviewed to determine whether this vulnerability is indeed present, or whether mitigations are in place that would prevent exploitation.</p>","doc_type":"flaw","doc_version":"1.60.8","exhibits":[],"flaw_id":109034055,"last_update":1746454643599,"reopenedAt":null,"report_id":643025423,"report_name":"HQ Internal Penetration Test","sev":1,"severity":"High","severity_key":1,"source":"PTrac","status":"Closed","title":"Local file path manipulation (DOM-based)","visibility":"published","closedAt":1728914099562,"fields":{},"jiraIssue":null,"recommendations":"<p>The most effective way to avoid DOM-based local file path manipulation vulnerabilities is not to dynamically pass a filename to a file handling API using data that originated from any untrusted source. If the desired functionality of the application means that this behavior is unavoidable, then defenses must be implemented within the client-side code to prevent malicious data from accessing arbitrary files. In general, this is best achieved by using a whitelist of permitted filenames, and strictly validating the filename against this list before invoking the file handling API.</p>","references":"<ul><li>CWE-22: Improper Limitation of a Pathname to a Restricted Directory ('Path Traversal')(https://cwe.mitre.org/data/definitions/22.html)</li><li>CWE-73: External Control of File Name or Path(https://cwe.mitre.org/data/definitions/73.html)</li></ul>","selectedScore":null,"serviceNowTicket":null,"scores":{},"subStatus":"Remediated","tags":[],"tenant_id":0,"hackerOneData":null,"snykData":null,"edgescanData":null,"integrationData":null,"calculated_severity":false,"reportedAt":1740114000000,"finding_id":null,"cuid":"cma3zph6l00qb0hp79prp7ou1"},{"id":248307161,"doc_id":[59013,643025423],"data":[248307161,"High","Python code injection","Closed",1746454643599,null,1740114000000,1728914099562,null,null,"published"],"affected_assets":{},"assignedTo":null,"client_id":59013,"client_name":"Crimson Nexus Ventures","code_samples":[],"createdAt":1740114000000,"description":"<p>Server-side code injection vulnerabilities arise when an application incorporates user-controllable data into a string that is dynamically evaluated by a code interpreter. If the user data is not strictly validated, an attacker can use crafted input to modify the code to be executed, and inject arbitrary code that will be executed by the server.<br />Server-side code injection vulnerabilities are usually very serious and lead to complete compromise of the application's data and functionality, and often of the server that is hosting the application. It may also be possible to use the server as a platform for further attacks against other systems.</p>","doc_type":"flaw","doc_version":"1.60.8","exhibits":[],"flaw_id":248307161,"last_update":1746454643599,"reopenedAt":null,"report_id":643025423,"report_name":"HQ Internal Penetration Test","sev":1,"severity":"High","severity_key":1,"source":"PTrac","status":"Closed","title":"Python code injection","visibility":"published","closedAt":1728914099562,"fields":{},"jiraIssue":null,"recommendations":"<p>Whenever possible, applications should avoid incorporating user-controllable data into dynamically evaluated code. In almost every situation, there are safer alternative methods of implementing application functions, which cannot be manipulated to inject arbitrary code into the server's processing.<br />If it is considered unavoidable to incorporate user-supplied data into dynamically evaluated code, then the data should be strictly validated. Ideally, a whitelist of specific accepted values should be used. Otherwise, only short alphanumeric strings should be accepted. Input containing any other data, including any conceivable code metacharacters, should be rejected.</p>","references":"<ul><li>CWE-94: Improper Control of Generation of Code ('Code Injection')(https://cwe.mitre.org/data/definitions/94.html)</li><li>CWE-95: Improper Neutralization of Directives in Dynamically Evaluated Code ('Eval Injection')(https://cwe.mitre.org/data/definitions/95.html)</li><li>CWE-116: Improper Encoding or Escaping of Output(https://cwe.mitre.org/data/definitions/116.html)</li></ul>","selectedScore":null,"serviceNowTicket":null,"scores":{},"subStatus":"Remediated","tags":[],"tenant_id":0,"hackerOneData":null,"snykData":null,"edgescanData":null,"integrationData":null,"calculated_severity":false,"reportedAt":1740114000000,"finding_id":null,"cuid":"cma3zph8a00qc0hp71kfe8xi0"},{"id":429946071,"doc_id":[59013,643025423],"data":[429946071,"High","Cross-site scripting (stored DOM-based)","Closed",1746454643599,null,1740114000000,1728914099562,null,null,"published"],"affected_assets":{},"assignedTo":null,"client_id":59013,"client_name":"Crimson Nexus Ventures","code_samples":[],"createdAt":1740114000000,"description":"<p>Stored DOM-based vulnerabilities arise when user input is stored and later embedded into a response within a part of the DOM that is then processed in an unsafe way by a client-side script. An attacker can leverage the data storage to control a part of the response (for example, a JavaScript string) that can be used to trigger the DOM-based vulnerability.<br />DOM-based cross-site scripting arises when a script  writes controllable data into the HTML document in an unsafe way. An attacker may be able to use the vulnerability to construct a URL that, if visited by another application user, will cause JavaScript code supplied by the attacker to execute within the user's browser in the context of that user's session with the application.<br />The attacker-supplied code can perform a wide variety of actions, such as stealing the victim's session token or login credentials, performing arbitrary actions on the victim's behalf, and logging their keystrokes.<br />Users can be induced to visit the attacker's crafted URL in various ways, similar to the usual attack delivery vectors for reflected cross-site scripting vulnerabilities.<br />Burp Suite automatically identifies this issue using static code analysis, which may lead to false positives that are not actually exploitable. The relevant code and execution paths should be reviewed to determine whether this vulnerability is indeed present, or whether mitigations are in place that would prevent exploitation.</p>","doc_type":"flaw","doc_version":"1.60.8","exhibits":[],"flaw_id":429946071,"last_update":1746454643599,"reopenedAt":null,"report_id":643025423,"report_name":"HQ Internal Penetration Test","sev":1,"severity":"High","severity_key":1,"source":"PTrac","status":"Closed","title":"Cross-site scripting (stored DOM-based)","visibility":"published","closedAt":1728914099562,"fields":{},"jiraIssue":null,"recommendations":"<p>The most effective way to avoid DOM-based cross-site scripting vulnerabilities is not to dynamically write data from any untrusted source into the HTML document. If the desired functionality of the application means that this behavior is unavoidable, then defenses must be implemented within the client-side code to prevent malicious data from introducing script code into the document. In many cases, the relevant data can be validated on a whitelist basis, to allow only content that is known to be safe. In other cases, it will be necessary to sanitize or encode the data. This can be a complex task, and depending on the context that the data is to be inserted may need to involve a combination of JavaScript escaping, HTML encoding, and URL encoding, in the appropriate sequence.</p>","references":"<ul><li>CWE-79: Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')(https://cwe.mitre.org/data/definitions/79.html)</li><li>CWE-80: Improper Neutralization of Script-Related HTML Tags in a Web Page (Basic XSS)(https://cwe.mitre.org/data/definitions/80.html)</li><li>CWE-116: Improper Encoding or Escaping of Output(https://cwe.mitre.org/data/definitions/116.html)</li><li>CWE-159: Failure to Sanitize Special Element(https://cwe.mitre.org/data/definitions/159.html)</li></ul>","selectedScore":null,"serviceNowTicket":null,"scores":{},"subStatus":"Remediated","tags":[],"tenant_id":0,"hackerOneData":null,"snykData":null,"edgescanData":null,"integrationData":null,"calculated_severity":false,"reportedAt":1740114000000,"finding_id":null,"cuid":"cma3zph8s00qd0hp7dc0fgzam"},{"id":740651505,"doc_id":[59013,643025423],"data":[740651505,"High","XML external entity injection","Closed",1746454643599,null,1740114000000,1728914099562,null,null,"published"],"affected_assets":{},"assignedTo":null,"client_id":59013,"client_name":"Crimson Nexus Ventures","code_samples":[],"createdAt":1740114000000,"description":"<p>XML external entity (XXE) injection vulnerabilities arise when applications process user-supplied XML documents without disabling references to external resources. XML parsers typically support external references by default, even though they are rarely required by applications during normal usage.<br />External entities can reference files on the parser's filesystem; exploiting this feature may allow retrieval of arbitrary files, or denial of service by causing the server to read from a file such as /dev/random.<br />External entities can often also reference network resources via the HTTP protocol handler. The ability to send requests to other systems can allow the vulnerable server to be used as an attack proxy. By submitting suitable payloads, an attacker can cause the application server to attack other systems that it can interact with. This may include public third-party systems, internal systems within the same organization, or services available on the local loopback adapter of the application server itself. Depending on the network architecture, this may expose highly vulnerable internal services that are not otherwise accessible to external attackers.</p>","doc_type":"flaw","doc_version":"1.60.8","exhibits":[],"flaw_id":740651505,"last_update":1746454643599,"reopenedAt":null,"report_id":643025423,"report_name":"HQ Internal Penetration Test","sev":1,"severity":"High","severity_key":1,"source":"PTrac","status":"Closed","title":"XML external entity injection","visibility":"published","closedAt":1728914099562,"fields":{},"jiraIssue":null,"recommendations":"<p>Parsers that are used to process XML from untrusted sources should be configured to disable processing of all external resources. This is usually possible, and will prevent a number of related attacks. You should consult the documentation for your XML parsing library to determine how to achieve this.<br />XML external entity injection makes use of the DOCTYPE tag to define the injected entity. It may also be possible to disable the DOCTYPE tag or use input validation to block input containing it.</p>","references":"<p>XML Schema, DTD and Entity Attacks<br />CWE-611: Improper Restriction of XML External Entity Reference ('XXE')</p>","selectedScore":null,"serviceNowTicket":null,"scores":{},"subStatus":"Remediated","tags":[],"tenant_id":0,"hackerOneData":null,"snykData":null,"edgescanData":null,"integrationData":null,"calculated_severity":false,"reportedAt":1740114000000,"finding_id":null,"cuid":"cma3zph9a00qe0hp75se2fqbn"},{"id":786695511,"doc_id":[59013,643025423],"data":[786695511,"High","Serialized object in HTTP message","Closed",1746454643599,null,1740114000000,1728914099562,null,null,"published"],"affected_assets":{},"assignedTo":null,"client_id":59013,"client_name":"Crimson Nexus Ventures","code_samples":[],"createdAt":1740114000000,"description":"<p>Applications may submit a serialized object in a request parameter. This behavior can expose the application in various ways, including:<br />Any sensitive data contained within the object can be viewed by the user.<br />An attacker may be able to interfere with server-side logic by tampering with the contents of the object and re-serializing it.<br />An attacker may be able to cause unauthorized code execution on the server, by controlling the server-side function that is invoked when the object is processed.</p><p>Actual exploitation of any code execution vulnerabilities arising from the application's use of serialized objects will typically require the attacker to have access to the source code of the server-side application. This may mitigate the practical impact of this issue in many situations. However, it is still highly recommended to fix the underlying vulnerability. Vulnerabilities in native deserialization functions often allow practical exploitation without source code access.</p>","doc_type":"flaw","doc_version":"1.60.8","exhibits":[],"flaw_id":786695511,"last_update":1746454643599,"reopenedAt":null,"report_id":643025423,"report_name":"HQ Internal Penetration Test","sev":1,"severity":"High","severity_key":1,"source":"PTrac","status":"Closed","title":"Serialized object in HTTP message","visibility":"published","closedAt":1728914099562,"fields":{},"jiraIssue":null,"recommendations":"<p>The best way to avoid vulnerabilities that arise from the use of serialized objects is not to pass these in request parameters, or expose them in any other way to the client. Generally, it is possible to transmit application data in plain non-serialized form, and handle it with the same precautions that apply to all client-submitted data. If it is considered unavoidable to place serialized objects into request parameters, then it may be possible to prevent attacks by also placing a server-generated cryptographic signature of the object into the same request, and validating the signature before performing deserialization or other processing on the object.</p>","references":"<p>CWE-502: Deserialization of Untrusted Data</p>","selectedScore":null,"serviceNowTicket":null,"scores":{},"subStatus":"Remediated","tags":[],"tenant_id":0,"hackerOneData":null,"snykData":null,"edgescanData":null,"integrationData":null,"calculated_severity":false,"reportedAt":1740114000000,"finding_id":null,"cuid":"cma3zph9q00qf0hp7bxbvagr4"},{"id":904691148,"doc_id":[59013,643025423],"data":[904691148,"High","XPath injection","Closed",1746454643599,null,1740114000000,1728914099562,null,null,"published"],"affected_assets":{},"assignedTo":null,"client_id":59013,"client_name":"Crimson Nexus Ventures","code_samples":[],"createdAt":1740114000000,"description":"<p>XPath injection vulnerabilities arise when user-controllable data is incorporated into XPath queries in an unsafe manner. An attacker can supply crafted input to break out of the data context in which their input appears and interfere with the structure of the surrounding query.<br />Depending on the purpose for which the vulnerable query is being used, an attacker may be able to exploit an XPath injection flaw to read sensitive application data or interfere with application logic.</p>","doc_type":"flaw","doc_version":"1.60.8","exhibits":[],"flaw_id":904691148,"last_update":1746454643599,"reopenedAt":null,"report_id":643025423,"report_name":"HQ Internal Penetration Test","sev":1,"severity":"High","severity_key":1,"source":"PTrac","status":"Closed","title":"XPath injection","visibility":"published","closedAt":1728914099562,"fields":{},"jiraIssue":null,"recommendations":"<p>User input should be strictly validated before being incorporated into XPath queries. In most cases, it will be appropriate to accept input containing only short alphanumeric strings. At the very least, input containing any XPath metacharacters such as \" ' / @ = * <a href=\"and\" target=\"_blank\"> </a> should be rejected.</p>","references":"<ul><li>CWE-94: Improper Control of Generation of Code ('Code Injection')(https://cwe.mitre.org/data/definitions/94.html)</li><li>CWE-116: Improper Encoding or Escaping of Output(https://cwe.mitre.org/data/definitions/116.html)</li><li>CWE-159: Failure to Sanitize Special Element(https://cwe.mitre.org/data/definitions/159.html)</li><li>CWE-643: Improper Neutralization of Data within XPath Expressions ('XPath Injection')(https://cwe.mitre.org/data/definitions/643.html)</li></ul>","selectedScore":null,"serviceNowTicket":null,"scores":{},"subStatus":"Remediated","tags":[],"tenant_id":0,"hackerOneData":null,"snykData":null,"edgescanData":null,"integrationData":null,"calculated_severity":false,"reportedAt":1740114000000,"finding_id":null,"cuid":"cma3zpha000qg0hp73asvbv39"},{"id":932499156,"doc_id":[59013,643025423],"data":[932499156,"High","Unidentified code injection","Closed",1746454643599,null,1740114000000,1728914099562,null,null,"published"],"affected_assets":{},"assignedTo":null,"client_id":59013,"client_name":"Crimson Nexus Ventures","code_samples":[],"createdAt":1740114000000,"description":"<p>Server-side code injection vulnerabilities arise when an application incorporates user-controllable data into a string that is dynamically evaluated by a code interpreter. If the user data is not strictly validated, an attacker can use crafted input to modify the code to be executed, and inject arbitrary code that will be executed by the server.<br />Server-side code injection vulnerabilities are usually very serious and lead to complete compromise of the application's data and functionality, and often of the server that is hosting the application. It may also be possible to use the server as a platform for further attacks against other systems.</p>","doc_type":"flaw","doc_version":"1.60.8","exhibits":[],"flaw_id":932499156,"last_update":1746454643599,"reopenedAt":null,"report_id":643025423,"report_name":"HQ Internal Penetration Test","sev":1,"severity":"High","severity_key":1,"source":"PTrac","status":"Closed","title":"Unidentified code injection","visibility":"published","closedAt":1728914099562,"fields":{},"jiraIssue":null,"recommendations":"<p>Whenever possible, applications should avoid incorporating user-controllable data into dynamically evaluated code. In almost every situation, there are safer alternative methods of implementing application functions, which cannot be manipulated to inject arbitrary code into the server's processing.<br />If it is considered unavoidable to incorporate user-supplied data into dynamically evaluated code, then the data should be strictly validated. Ideally, a whitelist of specific accepted values should be used. Otherwise, only short alphanumeric strings should be accepted. Input containing any other data, including any conceivable code metacharacters, should be rejected.</p>","references":"<ul><li>CWE-94: Improper Control of Generation of Code ('Code Injection')(https://cwe.mitre.org/data/definitions/94.html)</li><li>CWE-95: Improper Neutralization of Directives in Dynamically Evaluated Code ('Eval Injection')(https://cwe.mitre.org/data/definitions/95.html)</li><li>CWE-116: Improper Encoding or Escaping of Output(https://cwe.mitre.org/data/definitions/116.html)</li></ul>","selectedScore":null,"serviceNowTicket":null,"scores":{},"subStatus":"Remediated","tags":[],"tenant_id":0,"hackerOneData":null,"snykData":null,"edgescanData":null,"integrationData":null,"calculated_severity":false,"reportedAt":1740114000000,"finding_id":null,"cuid":"cma3zphae00qh0hp76v77c6yy"},{"id":977804438,"doc_id":[59013,643025423],"data":[977804438,"High","ASP.NET tracing enabled","Closed",1746454643599,null,1740114000000,1728914099562,null,null,"published"],"affected_assets":{},"assignedTo":null,"client_id":59013,"client_name":"Crimson Nexus Ventures","code_samples":[],"createdAt":1740114000000,"description":"<p>ASP.NET tracing is a debugging feature that is designed for use during development to help troubleshoot problems. It discloses sensitive information to users, and if enabled in production contexts may present a serious security threat.<br />Application-level tracing enables any user to retrieve full details about recent requests to the application, including those of other users. This information typically includes session tokens and request parameters, which may enable an attacker to compromise other users and even take control of the entire application.<br />Page-level tracing returns the same information, but relating only to the current request. This may still contain sensitive data in session and server variables that would be of use to an attacker.</p>","doc_type":"flaw","doc_version":"1.60.8","exhibits":[],"flaw_id":977804438,"last_update":1746454643599,"reopenedAt":null,"report_id":643025423,"report_name":"HQ Internal Penetration Test","sev":1,"severity":"High","severity_key":1,"source":"PTrac","status":"Closed","title":"ASP.NET tracing enabled","visibility":"published","closedAt":1728914099562,"fields":{},"jiraIssue":null,"recommendations":"<p>To disable tracing, open the Web.config file for the application, and find the  element within the  section. Either set the enabled attribute to \"false\" (to disable tracing) or set the localOnly attribute to \"true\" (to enable tracing only on the server itself).<br />Note that even with tracing disabled in this way, it is possible for individual pages to turn on page-level tracing either within the Page directive of the ASP.NET page, or programmatically through application code. If you observe tracing output only on some application pages, you should review the page source and the code behind, to find the reason why tracing is occurring.<br />It is strongly recommended that you refer to your platform's documentation relating to this issue, and do not rely solely on the above remediation.</p>","references":"<ul><li>CWE-10: ASP.NET Environment Issues(https://cwe.mitre.org/data/definitions/10.html)</li><li>CWE-11: ASP.NET Misconfiguration: Creating Debug Binary(https://cwe.mitre.org/data/definitions/11.html)</li></ul>","selectedScore":null,"serviceNowTicket":null,"scores":{},"subStatus":"Remediated","tags":[],"tenant_id":0,"hackerOneData":null,"snykData":null,"edgescanData":null,"integrationData":null,"calculated_severity":false,"reportedAt":1740114000000,"finding_id":null,"cuid":"cma3zphan00qi0hp7582y2vpu"},{"id":1141461693,"doc_id":[59013,643025423],"data":[1141461693,"High","Cross-origin resource sharing: arbitrary origin trusted","Closed",1746454643599,null,1740114000000,1728914099562,null,null,"published"],"affected_assets":{},"assignedTo":null,"client_id":59013,"client_name":"Crimson Nexus Ventures","code_samples":[],"createdAt":1740114000000,"description":"<p>An HTML5 cross-origin resource sharing (CORS) policy controls whether and how content running on other domains can perform two-way interaction with the domain that publishes the policy. The policy is fine-grained and can apply access controls per-request based on the URL and other features of the request.<br />Trusting arbitrary origins effectively disables the same-origin policy, allowing two-way interaction by third-party web sites. Unless the response consists only of unprotected public content, this policy is likely to present a security risk.<br />If the site  specifies the header Access-Control-Allow-Credentials: true, third-party sites may be able to carry out privileged actions and retrieve sensitive information. Even if it does not, attackers may be able to  bypass any IP-based access controls by proxying through users'  browsers.</p>","doc_type":"flaw","doc_version":"1.60.8","exhibits":[],"flaw_id":1141461693,"last_update":1746454643599,"reopenedAt":null,"report_id":643025423,"report_name":"HQ Internal Penetration Test","sev":1,"severity":"High","severity_key":1,"source":"PTrac","status":"Closed","title":"Cross-origin resource sharing: arbitrary origin trusted","visibility":"published","closedAt":1728914099562,"fields":{},"jiraIssue":null,"recommendations":"<p>Rather than using a wildcard or programmatically verifying supplied origins, use a whitelist of trusted domains.</p>","references":"<ul><li>Exploiting CORS Misconfigurations(http://blog.portswigger.net/2016/10/exploiting-cors-misconfigurations-for.html)</li></ul><p>CWE-942: Overly Permissive Cross-domain Whitelist</p>","selectedScore":null,"serviceNowTicket":null,"scores":{},"subStatus":"Remediated","tags":[],"tenant_id":0,"hackerOneData":null,"snykData":null,"edgescanData":null,"integrationData":null,"calculated_severity":false,"reportedAt":1740114000000,"finding_id":null,"cuid":"cma3zphax00qj0hp7ffk7ch22"},{"id":1151192684,"doc_id":[59013,643025423],"data":[1151192684,"High","WebSocket hijacking (reflected DOM-based)","Closed",1746454643599,null,1740114000000,1728914099562,null,"JIT-7245","published"],"affected_assets":{},"assignedTo":null,"client_id":59013,"client_name":"Crimson Nexus Ventures","code_samples":[],"createdAt":1740114000000,"description":"<p>Reflected DOM-based vulnerabilities arise when data is copied from a request and echoed into the application's immediate response within a part of the DOM that is then processed in an unsafe way by a client-side script. An attacker can leverage the reflection to control a part of the response (for example, a JavaScript string) that can be used to trigger the DOM-based vulnerability.<br />WebSocket hijacking occurs when a  script uses controllable  data as the target URL of a WebSocket connection. An attacker may be able to use the vulnerability to construct a URL that, if visited by another application user, will cause the user's browser to open a WebSocket connection to a URL that is under the attacker's control.<br />The potential impact of the vulnerability depends on the application's usage of WebSockets. If the application transmits sensitive data from the user's browser to the WebSocket server, then the attacker may be able to capture this data. If the application reads data from the WebSocket server and performs processing on this data, then the attacker may be able to subvert the application's logic or deliver additional client-side attacks against the user.<br />Burp Suite automatically identifies this issue using static code analysis, which may lead to false positives that are not actually exploitable. The relevant code and execution paths should be reviewed to determine whether this vulnerability is indeed present, or whether mitigations are in place that would prevent exploitation.</p>","doc_type":"flaw","doc_version":"1.60.8","exhibits":[],"flaw_id":1151192684,"last_update":1746454643599,"reopenedAt":null,"report_id":643025423,"report_name":"HQ Internal Penetration Test","sev":1,"severity":"High","severity_key":1,"source":"PTrac","status":"Closed","title":"WebSocket hijacking (reflected DOM-based)","visibility":"published","closedAt":1728914099562,"fields":{},"jiraIssue":{"id":"41803","key":"JIT-7245","link":"https://plextrac.atlassian.net/rest/api/2/issue/41803","configurationId":"clo4s4myx003c0hnw696d1ecn"},"recommendations":"<p>The most effective way to avoid DOM-based WebSocket hijacking vulnerabilities is not to dynamically set the target URL of a WebSocket connection using data that originated from any untrusted source. If the desired functionality of the application means that this behavior is unavoidable, then defenses must be implemented within the client-side code to prevent malicious data from introducing an arbitrary URL as a target of a WebSocket. In general, this is best achieved by using a whitelist of URLs that are permitted WebSocket targets, and strictly validating the target against this list before creating the WebSocket.</p>","references":"<ul><li>CWE-345: Insufficient Verification of Data Authenticity(https://cwe.mitre.org/data/definitions/345.html)</li><li>CWE-346: Origin Validation Error(https://cwe.mitre.org/data/definitions/346.html)</li><li>CWE-441: Unintended Proxy or Intermediary ('Confused Deputy')(https://cwe.mitre.org/data/definitions/441.html)</li></ul>","selectedScore":null,"serviceNowTicket":null,"scores":{},"subStatus":"Remediated","tags":[],"tenant_id":0,"hackerOneData":null,"snykData":null,"edgescanData":null,"integrationData":null,"calculated_severity":false,"reportedAt":1740114000000,"finding_id":null,"cuid":"cma3zphb900qk0hp7b2v652k2"},{"id":1242101259,"doc_id":[59013,643025423],"data":[1242101259,"High","Server-side template injection","Closed",1746454657346,null,1740114000000,1728914099562,null,"JIT-7248","published"],"affected_assets":{},"assignedTo":null,"client_id":59013,"client_name":"Crimson Nexus Ventures","code_samples":[],"createdAt":1740114000000,"description":"<p>Server-side template injection occurs when user input is unsafely embedded into a server-side template, allowing users to inject template directives. Using malicious template directives, an attacker may be able to execute arbitrary code and take full control of the web server.<br />The severity of this issue varies depending on the type of template engine being used. Template engines range from being trivial to almost impossible to exploit. The following  steps should be used when attempting to develop an exploit:<br />Identify the type of template engine being used.<br />Review its documentation for basic syntax, security considerations, and built-in methods and variables.<br />Explore the template environment and map the attack surface.<br />Audit every exposed object and method.</p><p>Template injection vulnerabilities can be very serious and can lead to complete compromise of the application's data and functionality, and often of the server that is hosting the application. It may also be possible to use the server as a platform for further attacks against other systems. On the other hand, some template injection vulnerabilities may pose no significant security risk.</p>","doc_type":"flaw","doc_version":"1.60.8","exhibits":[],"flaw_id":1242101259,"last_update":1746454657346,"reopenedAt":null,"report_id":643025423,"report_name":"HQ Internal Penetration Test","sev":1,"severity":"High","severity_key":1,"source":"PTrac","status":"Closed","title":"Server-side template injection","visibility":"published","closedAt":1728914099562,"fields":{},"jiraIssue":{"id":"41806","key":"JIT-7248","link":"https://plextrac.atlassian.net/rest/api/2/issue/41806","configurationId":"clo4s4myx003c0hnw696d1ecn"},"recommendations":"<p>Wherever possible, avoid creating templates from user input. Passing user input into templates as parameters is normally a safe alternative.<br />If supporting user-submitted templates is a business requirement, consider using a simple logic-less template engine such as Mustache or one provided by the native language like Python's Template. If this is not an option, review the chosen template engine's documentation for hardening advice, and consider rendering the template within a sandboxed execution environment.</p>","references":"<p>For further information on the exploitation process and generic exploits for some popular template engines, please refer to the original PortSwigger blog post . <br />Other references:</p><ul><li>FreeMarker hardening(http://freemarker.org/docs/app_faq.html#faq_template_uploading_security)</li><li>Velocity Hardening(https://velocity.apache.org/engine/devel/apidocs/org/apache/velocity/util/introspection/SecureUberspector.html)</li><li>Twig hardening(http://twig.sensiolabs.org/doc/api.html#sandbox-extension)</li><li>CWE-94: Improper Control of Generation of Code ('Code Injection')(https://cwe.mitre.org/data/definitions/94.html)</li><li>CWE-95: Improper Neutralization of Directives in Dynamically Evaluated Code ('Eval Injection')(https://cwe.mitre.org/data/definitions/95.html)</li><li>CWE-116: Improper Encoding or Escaping of Output(https://cwe.mitre.org/data/definitions/116.html)</li></ul>","selectedScore":null,"serviceNowTicket":null,"scores":{},"subStatus":"","tags":[],"tenant_id":0,"hackerOneData":null,"snykData":null,"edgescanData":null,"integrationData":null,"calculated_severity":false,"reportedAt":1740114000000,"finding_id":null,"cuid":"cma3zphbl00ql0hp70g229q5n"},{"id":1250018131,"doc_id":[59013,643025423],"data":[1250018131,"High","Cleartext submission of password","Closed",1746454657346,null,1740114000000,1705499804175,null,"JIT-7246","published"],"affected_assets":{},"assignedTo":null,"client_id":59013,"client_name":"Crimson Nexus Ventures","code_samples":[],"createdAt":1740114000000,"description":"<p>Some applications transmit passwords over unencrypted connections, making them vulnerable to interception. To exploit this vulnerability, an attacker must be suitably positioned to eavesdrop on the victim's network traffic. This scenario typically occurs when a client communicates with the server over an insecure connection such as public Wi-Fi, or a corporate or home network that is shared with a compromised computer. Common defenses such as switched networks are not sufficient to prevent this. An attacker situated in the user's ISP or the application's hosting infrastructure could also perform this attack. Note that an advanced adversary could potentially target any connection made over the Internet's core infrastructure.Vulnerabilities that result in the disclosure of users' passwords can result in compromises that are extremely difficult to investigate due to obscured audit trails. Even if the application itself only handles non-sensitive information, exposing passwords puts users who have re-used their password elsewhere at risk.</p>","doc_type":"flaw","doc_version":"1.60.8","exhibits":[],"flaw_id":1250018131,"last_update":1746454657346,"reopenedAt":null,"report_id":643025423,"report_name":"HQ Internal Penetration Test","sev":1,"severity":"High","severity_key":1,"source":"PTrac","status":"Closed","title":"Cleartext submission of password","visibility":"published","closedAt":1705499804175,"fields":{},"jiraIssue":{"id":"41804","key":"JIT-7246","link":"https://plextrac.atlassian.net/rest/api/2/issue/41804","configurationId":"clo4s4myx003c0hnw696d1ecn"},"recommendations":"<p>Applications should use transport-level encryption (SSL or TLS) to protect all sensitive communications passing between the client and the server. Communications that should be protected include the login mechanism and related functionality, and any functions where sensitive data can be accessed or privileged actions can be performed. These areas should employ their own session handling mechanism, and the session tokens used should never be transmitted over unencrypted communications. If HTTP cookies are used for transmitting session tokens, then the secure flag should be set to prevent transmission over clear-text HTTP.</p>","references":"<p>CWE-319: Cleartext Transmission of Sensitive Information</p>","selectedScore":null,"serviceNowTicket":null,"scores":{},"subStatus":"","tags":[],"tenant_id":0,"hackerOneData":null,"snykData":null,"edgescanData":null,"integrationData":null,"calculated_severity":false,"reportedAt":1740114000000,"finding_id":null,"cuid":"cma3zphbw00qm0hp77ggngwt3"},{"id":1329021008,"doc_id":[59013,643025423],"data":[1329021008,"High","PHP code injection","Closed",1746454657346,null,1740114000000,1705499804175,null,"JIT-7247","published"],"affected_assets":{},"assignedTo":null,"client_id":59013,"client_name":"Crimson Nexus Ventures","code_samples":[],"createdAt":1740114000000,"description":"<p>Server-side code injection vulnerabilities arise when an application incorporates user-controllable data into a string that is dynamically evaluated by a code interpreter. If the user data is not strictly validated, an attacker can use crafted input to modify the code to be executed, and inject arbitrary code that will be executed by the server.Server-side code injection vulnerabilities are usually very serious and lead to complete compromise of the application's data and functionality, and often of the server that is hosting the application. It may also be possible to use the server as a platform for further attacks against other systems.</p>","doc_type":"flaw","doc_version":"1.60.8","exhibits":[],"flaw_id":1329021008,"last_update":1746454657346,"reopenedAt":null,"report_id":643025423,"report_name":"HQ Internal Penetration Test","sev":1,"severity":"High","severity_key":1,"source":"PTrac","status":"Closed","title":"PHP code injection","visibility":"published","closedAt":1705499804175,"fields":{},"jiraIssue":{"id":"41805","key":"JIT-7247","link":"https://plextrac.atlassian.net/rest/api/2/issue/41805","configurationId":"clo4s4myx003c0hnw696d1ecn"},"recommendations":"<p>Whenever possible, applications should avoid incorporating user-controllable data into dynamically evaluated code. In almost every situation, there are safer alternative methods of implementing application functions, which cannot be manipulated to inject arbitrary code into the server's processing.If it is considered unavoidable to incorporate user-supplied data into dynamically evaluated code, then the data should be strictly validated. Ideally, a whitelist of specific accepted values should be used. Otherwise, only short alphanumeric strings should be accepted. Input containing any other data, including any conceivable code metacharacters, should be rejected.</p>","references":"<p>CWE-94: Improper Control of Generation of Code ('Code Injection')(https://cwe.mitre.org/data/definitions/94.html)<br />CWE-116: Improper Encoding or Escaping of Output(https://cwe.mitre.org/data/definitions/116.html)<br />CWE-159: Failure to Sanitize Special Element(https://cwe.mitre.org/data/definitions/159.html)</p>","selectedScore":null,"serviceNowTicket":null,"scores":{},"subStatus":"","tags":[],"tenant_id":0,"hackerOneData":null,"snykData":null,"edgescanData":null,"integrationData":null,"calculated_severity":false,"reportedAt":1740114000000,"finding_id":null,"cuid":"cma3zphc700qn0hp7h40ldrwq"},{"id":1368926037,"doc_id":[59013,643025423],"data":[1368926037,"High","Local file path manipulation (stored DOM-based)","Closed",1746021199678,null,1740114000000,1705499804175,null,null,"published"],"affected_assets":{},"assignedTo":null,"client_id":59013,"client_name":"Crimson Nexus Ventures","code_samples":[],"createdAt":1740114000000,"description":"<p>Stored DOM-based vulnerabilities arise when user input is stored and later embedded into a response within a part of the DOM that is then processed in an unsafe way by a client-side script. An attacker can leverage the data storage to control a part of the response (for example, a JavaScript string) that can be used to trigger the DOM-based vulnerability.<br />Local file path manipulation  arises when a script uses controllable data as the filename parameter to a file handling API. An attacker may be able to use the vulnerability to construct a URL that, if visited by another application user, will cause the user's browser to open an arbitrary local file.<br />The potential impact of the vulnerability depends on the application's usage of the opened file. If the application reads data from the file, then the attacker may be able to retrieve this data. If the application writes data to the file, then the attacker may be able to write specific data to a sensitive file, such as an operating system configuration file. In both these cases, the actual exploitability of the potential vulnerability may depend on other suitable functionality being present in the application.<br />Burp Suite automatically identifies this issue using static code analysis, which may lead to false positives that are not actually exploitable. The relevant code and execution paths should be reviewed to determine whether this vulnerability is indeed present, or whether mitigations are in place that would prevent exploitation.</p>","doc_type":"flaw","doc_version":"1.60.8","exhibits":[],"flaw_id":1368926037,"last_update":1746021199678,"reopenedAt":null,"report_id":643025423,"report_name":"HQ Internal Penetration Test","sev":1,"severity":"High","severity_key":1,"source":"PTrac","status":"Closed","title":"Local file path manipulation (stored DOM-based)","visibility":"published","closedAt":1705499804175,"fields":{},"jiraIssue":null,"recommendations":"<p>The most effective way to avoid DOM-based local file path manipulation vulnerabilities is not to dynamically pass a filename to a file handling API using data that originated from any untrusted source. If the desired functionality of the application means that this behavior is unavoidable, then defenses must be implemented within the client-side code to prevent malicious data from accessing arbitrary files. In general, this is best achieved by using a whitelist of permitted filenames, and strictly validating the filename against this list before invoking the file handling API.</p>","references":"<ul><li>CWE-22: Improper Limitation of a Pathname to a Restricted Directory ('Path Traversal')(https://cwe.mitre.org/data/definitions/22.html)</li><li>CWE-73: External Control of File Name or Path(https://cwe.mitre.org/data/definitions/73.html)</li></ul>","selectedScore":null,"serviceNowTicket":null,"scores":{},"subStatus":"remediated","tags":[],"tenant_id":0,"hackerOneData":null,"snykData":null,"edgescanData":null,"integrationData":null,"calculated_severity":false,"reportedAt":1740114000000,"finding_id":null,"cuid":"cma3zphci00qo0hp7a31bhmsx"},{"id":1390910009,"doc_id":[59013,643025423],"data":[1390910009,"High","File path manipulation","Closed",1746021199678,null,1740114000000,1705499804175,null,null,"published"],"affected_assets":{},"assignedTo":null,"client_id":59013,"client_name":"Crimson Nexus Ventures","code_samples":[],"createdAt":1740114000000,"description":"<p>File path manipulation vulnerabilities arise when user-controllable data is placed into a file or URL path that is used on the server to access local resources, which may be within or outside the web root. If vulnerable, an attacker can modify the file path to access different resources, which may contain sensitive information. Even where an attack is constrained within the web root, it is often possible to retrieve items that are normally protected from direct access, such as application configuration files, the source code for server-executable scripts, or files with extensions that the web server is not configured to serve directly.</p>","doc_type":"flaw","doc_version":"1.60.8","exhibits":[],"flaw_id":1390910009,"last_update":1746021199678,"reopenedAt":null,"report_id":643025423,"report_name":"HQ Internal Penetration Test","sev":1,"severity":"High","severity_key":1,"source":"PTrac","status":"Closed","title":"File path manipulation","visibility":"published","closedAt":1705499804175,"fields":{},"jiraIssue":null,"recommendations":"<p>Ideally, application functionality should be designed in such a way that user-controllable data does not need to be placed into file or URL paths in order to access local resources on the server. This can normally be achieved by referencing known files via an index number rather than their name.<br />If it is considered unavoidable to place user data into file or URL paths, the data should be strictly validated against a whitelist of accepted values. Note that when accessing resources within the web root, simply blocking input containing file path traversal sequences (such as dot-dot-slash) is not always sufficient to prevent retrieval of sensitive information, because some protected items may be accessible at the original path without using any traversal sequences.</p>","references":"<ul><li>CWE-22: Improper Limitation of a Pathname to a Restricted Directory ('Path Traversal')(https://cwe.mitre.org/data/definitions/22.html)</li><li>CWE-23: Relative Path Traversal(https://cwe.mitre.org/data/definitions/23.html)</li><li>CWE-35: Path Traversal: '…/…//'(https://cwe.mitre.org/data/definitions/35.html)</li><li>CWE-36: Absolute Path Traversal(https://cwe.mitre.org/data/definitions/36.html)</li></ul>","selectedScore":null,"serviceNowTicket":null,"scores":{},"subStatus":"remediated","tags":[],"tenant_id":0,"hackerOneData":null,"snykData":null,"edgescanData":null,"integrationData":null,"calculated_severity":false,"reportedAt":1740114000000,"finding_id":null,"cuid":"cma3zphcv00qp0hp7dq4bd24d"},{"id":1686127487,"doc_id":[59013,643025423],"data":[1686127487,"High","HTTP response header injection","Closed",1746021199678,null,1740114000000,1705499804175,null,null,"published"],"affected_assets":{},"assignedTo":null,"client_id":59013,"client_name":"Crimson Nexus Ventures","code_samples":[],"createdAt":1740114000000,"description":"<p>HTTP response header injection vulnerabilities arise when user-supplied data is copied into a response header in an unsafe way. If an attacker can inject newline characters into the header, then they can inject new HTTP headers and also, by injecting an empty line, break out of the headers into the message body and write arbitrary content into the application's response.<br />Various kinds of attack can be delivered via HTTP response header injection vulnerabilities. Any attack that can be delivered via cross-site scripting can usually be delivered via response header injection, because the attacker can construct a request that causes arbitrary JavaScript to appear within the response body. Further, it is sometimes possible to leverage response header injection vulnerabilities to poison the cache of any proxy server via which users access the application. Here, an attacker sends a crafted request that results in a \"split\" response containing arbitrary content. If the proxy server can be manipulated to associate the injected response with another URL used within the application, then the attacker can perform a \"stored\" attack against this URL, which will compromise other users who request that URL in future.</p>","doc_type":"flaw","doc_version":"1.60.8","exhibits":[],"flaw_id":1686127487,"last_update":1746021199678,"reopenedAt":null,"report_id":643025423,"report_name":"HQ Internal Penetration Test","sev":1,"severity":"High","severity_key":1,"source":"PTrac","status":"Closed","title":"HTTP response header injection","visibility":"published","closedAt":1705499804175,"fields":{},"jiraIssue":null,"recommendations":"<p>If possible, applications should avoid copying user-controllable data into HTTP response headers. If this is unavoidable, then the data should be strictly validated to prevent response header injection attacks. In most situations, it will be appropriate to allow only short alphanumeric strings to be copied into headers, and any other input should be rejected. At a minimum, input containing any characters with ASCII codes less than 0x20 should be rejected.</p>","references":"<p>CWE-113: Improper Neutralization of CRLF Sequences in HTTP Headers ('HTTP Response Splitting')</p>","selectedScore":null,"serviceNowTicket":null,"scores":{},"subStatus":"remediated","tags":[],"tenant_id":0,"hackerOneData":null,"snykData":null,"edgescanData":null,"integrationData":null,"calculated_severity":false,"reportedAt":1740114000000,"finding_id":null,"cuid":"cma3zphd600qq0hp75c3sfjm5"},{"id":1826096324,"doc_id":[59013,643025423],"data":[1826096324,"High","Client-side template injection","Closed",1746021199678,null,1740114000000,1728914099562,null,null,"published"],"affected_assets":{},"assignedTo":null,"client_id":59013,"client_name":"Crimson Nexus Ventures","code_samples":[],"createdAt":1740114000000,"description":"<p>Client-side template injection vulnerabilities arise when applications using a client-side template framework dynamically embed user input in web pages. When a web page is rendered, the framework will scan the page for template expressions, and execute any that it encounters. An attacker can exploit this by supplying a malicious template expression that launches a cross-site scripting (XSS) attack. As with normal cross-site scripting, the attacker-supplied code can perform a wide variety of actions, such as stealing the victim's session token or login credentials, performing arbitrary actions on the victim's behalf, and logging their keystrokes.<br />Users can be induced to issue the attacker's crafted request in various ways. For example, the attacker can send a victim a link containing a malicious URL in an email or instant message. They can submit the link to popular web sites that allow content authoring, for example in blog comments. And they can create an innocuous looking web site that causes anyone viewing it to make arbitrary cross-domain requests to the vulnerable application (using either the GET or the POST method).<br />The security impact of client-side template injection vulnerabilities is dependent upon the nature of the vulnerable application, the kinds of data and functionality that it contains, and the other applications that belong to the same domain and organization. If the application is used only to display non-sensitive public content, with no authentication or access control functionality, then a client-side template injection flaw may be considered low risk. However, if the same application resides on a domain that can access cookies for other more security-critical applications, then the vulnerability could be used to attack those other applications, and so may be considered high risk. Similarly, if the organization that owns the application is a likely target for phishing attacks, then the vulnerability could be leveraged to lend credibility to such attacks, by injecting Trojan functionality into the vulnerable application and exploiting users' trust in the organization in order to capture credentials for other applications that it owns. In many kinds of application, such as those providing online banking functionality, client-side template injection should always be considered high risk.<br />Client-side template frameworks often implement a sandbox aimed at hindering direct execution of arbitrary JavaScript from within a template expression. However, these sandboxes are not intended to be a security control and can normally be bypassed.<br />Browser cross-site scripting filters are typically unable to detect or prevent client-side template injection attacks.</p>","doc_type":"flaw","doc_version":"1.60.8","exhibits":[],"flaw_id":1826096324,"last_update":1746021199678,"reopenedAt":null,"report_id":643025423,"report_name":"HQ Internal Penetration Test","sev":1,"severity":"High","severity_key":1,"source":"PTrac","status":"Closed","title":"Client-side template injection","visibility":"published","closedAt":1728914099562,"fields":{},"jiraIssue":null,"recommendations":"<p>If possible, avoid using server-side code to dynamically embed user input into client-side templates. If this is not practical, consider filtering out template expression syntax from user input prior to embedding it within client-side templates.<br />Note that HTML-encoding is not sufficient to prevent client-side template injection attacks, because frameworks perform an HTML-decode of relevant content prior to locating and executing template expressions.</p>","references":"<ul><li>XSS without HTML: Client-Side Template Injection with AngularJS(http://blog.portswigger.net/2016/01/xss-without-html-client-side-template.html). This includes a list of known AngularJS sandbox escapes.</li><li>AngularJS Security Considerations(https://docs.angularjs.org/guide/security)</li><li>JavaScript MVC Security Pitfalls(https://code.google.com/p/mustache-security/)</li><li>CWE-116: Improper Encoding or Escaping of Output(https://cwe.mitre.org/data/definitions/116.html)</li><li>CWE-159: Failure to Sanitize Special Element(https://cwe.mitre.org/data/definitions/159.html)</li></ul>","selectedScore":null,"serviceNowTicket":null,"scores":{},"subStatus":"remediated","tags":[],"tenant_id":0,"hackerOneData":null,"snykData":null,"edgescanData":null,"integrationData":null,"calculated_severity":false,"reportedAt":1740114000000,"finding_id":null,"cuid":"cma3zphdh00qr0hp7gn8z6eb7"},{"id":1916563222,"doc_id":[59013,643025423],"data":[1916563222,"High","SQL injection","Closed",1746021199678,null,1740114000000,1705499804175,null,null,"published"],"affected_assets":{},"assignedTo":null,"client_id":59013,"client_name":"Crimson Nexus Ventures","code_samples":[],"createdAt":1740114000000,"description":"<p>SQL injection vulnerabilities arise when user-controllable data is incorporated into database SQL queries in an unsafe manner. An attacker can supply crafted input to break out of the data context in which their input appears and interfere with the structure of the surrounding query.<br />A wide range of damaging attacks can often be delivered via SQL injection, including reading or modifying critical application data, interfering with application logic, escalating privileges within the database and taking control of the database server.</p>","doc_type":"flaw","doc_version":"1.60.8","exhibits":[],"flaw_id":1916563222,"last_update":1746021199678,"reopenedAt":null,"report_id":643025423,"report_name":"HQ Internal Penetration Test","sev":1,"severity":"High","severity_key":1,"source":"PTrac","status":"Closed","title":"SQL injection","visibility":"published","closedAt":1705499804175,"fields":{},"jiraIssue":null,"recommendations":"<p>The most effective way to prevent SQL injection attacks is to use parameterized queries (also known as prepared statements) for all database access. This method uses two steps to incorporate potentially tainted data into SQL queries: first, the application specifies the structure of the query, leaving placeholders for each item of user input; second, the application specifies the contents of each placeholder. Because the structure of the query has already been defined in the first step, it is not possible for malformed data in the second step to interfere with the query structure. You should review the documentation for your database and application platform to determine the appropriate APIs which you can use to perform parameterized queries. It is strongly recommended that you parameterize every variable data item that is incorporated into database queries, even if it is not obviously tainted, to prevent oversights occurring and avoid vulnerabilities being introduced by changes elsewhere within the code base of the application. <br />You should be aware that some commonly employed and recommended mitigations for SQL injection vulnerabilities are not always effective:<br />One common defense is to double up any single quotation marks appearing within user input before incorporating that input into a SQL query. This defense is designed to prevent malformed data from terminating the string into which it is inserted. However, if the data being incorporated into queries is numeric, then the defense may fail, because numeric data may not be encapsulated within quotes, in which case only a space is required to break out of the data context and interfere with the query. Further, in second-order SQL injection attacks, data that has been safely escaped when initially inserted into the database is subsequently read from the database and then passed back to it again. Quotation marks that have been doubled up initially will return to their original form when the data is reused, allowing the defense to be bypassed.<br />Another often cited defense is to use stored procedures for database access. While stored procedures can provide security benefits, they are not guaranteed to prevent SQL injection attacks. The same kinds of vulnerabilities that arise within standard dynamic SQL queries can arise if any SQL is dynamically constructed within stored procedures. Further, even if the procedure is sound, SQL injection can arise if the procedure is invoked in an unsafe manner using user-controllable data.</p>","references":"<ul><li>Using Burp to Test for Injection Flaws(https://support.portswigger.net/customer/portal/articles/1965677-using-burp-to-test-for-injection-flaws)</li><li>SQL Injection Cheat Sheet(http://websec.ca/kb/sql_injection)</li><li>SQL Injection Prevention Cheat Sheet(https://www.owasp.org/index.php/SQL_Injection_Prevention_Cheat_Sheet)</li><li>CWE-89: Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')(https://cwe.mitre.org/data/definitions/89.html)</li><li>CWE-94: Improper Control of Generation of Code ('Code Injection')(https://cwe.mitre.org/data/definitions/94.html)</li><li>CWE-116: Improper Encoding or Escaping of Output(https://cwe.mitre.org/data/definitions/116.html)</li></ul>","selectedScore":null,"serviceNowTicket":null,"scores":{},"subStatus":"remediated","tags":[],"tenant_id":0,"hackerOneData":null,"snykData":null,"edgescanData":null,"integrationData":null,"calculated_severity":false,"reportedAt":1740114000000,"finding_id":null,"cuid":"cma3zphdt00qs0hp7cexcam52"},{"id":1988554864,"doc_id":[59013,643025423],"data":[1988554864,"High","Client-side SQL injection (reflected DOM-based)","Closed",1746021199678,null,1740114000000,1728914099562,null,null,"published"],"affected_assets":{},"assignedTo":null,"client_id":59013,"client_name":"Crimson Nexus Ventures","code_samples":[],"createdAt":1740114000000,"description":"<p>Reflected DOM-based vulnerabilities arise when data is copied from a request and echoed into the application's immediate response within a part of the DOM that is then processed in an unsafe way by a client-side script. An attacker can leverage the reflection to control a part of the response (for example, a JavaScript string) that can be used to trigger the DOM-based vulnerability.<br />Client-side SQL injection arises when a script incorporates controllable  data into a client-side SQL query in an unsafe way. An attacker may be able to use the vulnerability to construct a URL that, if visited by another application user, will execute an arbitrary SQL query within the local SQL database of the user's browser.<br />The potential impact of the vulnerability depends on the application's usage of the SQL database. If the database is used to store sensitive data (such as messages in a social networking application), then the attacker may be able to retrieve this data. If the database is used to store pending user actions (such as outgoing messages in an email application), then the attacker may be able to modify this data and carry out actions on the user's behalf.<br />Burp Suite automatically identifies this issue using static code analysis, which may lead to false positives that are not actually exploitable. The relevant code and execution paths should be reviewed to determine whether this vulnerability is indeed present, or whether mitigations are in place that would prevent exploitation.</p>","doc_type":"flaw","doc_version":"1.60.8","exhibits":[],"flaw_id":1988554864,"last_update":1746021199678,"reopenedAt":null,"report_id":643025423,"report_name":"HQ Internal Penetration Test","sev":1,"severity":"High","severity_key":1,"source":"PTrac","status":"Closed","title":"Client-side SQL injection (reflected DOM-based)","visibility":"published","closedAt":1728914099562,"fields":{},"jiraIssue":null,"recommendations":"<p>The most effective way to avoid DOM-based client-side SQL injection vulnerabilities is to use parameterized queries (also known as prepared statements) for all database access. This method uses two steps to incorporate potentially tainted data into SQL queries: first, the application specifies the structure of the query, leaving placeholders for each item of user input; second, the application specifies the contents of each placeholder. Because the structure of the query has already been defined in the first step, it is not possible for malformed data in the second step to interfere with the query structure. In the JavaScript executeSql() API, parameterized items can be designated within the query string using the query character (?), and for each parameterized item, an additional parameter is passed to the API containing the item's value. It is strongly recommended that you parameterize every variable data item that is incorporated into database queries, even if it is not obviously tainted, to prevent oversights occurring and avoid vulnerabilities being introduced by changes elsewhere within the code base of the application. </p>","references":"<ul><li>CWE-89: Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')(https://cwe.mitre.org/data/definitions/89.html)</li><li>CWE-116: Improper Encoding or Escaping of Output(https://cwe.mitre.org/data/definitions/116.html)</li><li>CWE-159: Failure to Sanitize Special Element(https://cwe.mitre.org/data/definitions/159.html)</li></ul>","selectedScore":null,"serviceNowTicket":null,"scores":{},"subStatus":"remediated","tags":[],"tenant_id":0,"hackerOneData":null,"snykData":null,"edgescanData":null,"integrationData":null,"calculated_severity":false,"reportedAt":1740114000000,"finding_id":null,"cuid":"cma3zphe900qt0hp7h87yallh"},{"id":1994926466,"doc_id":[59013,643025423],"data":[1994926466,"High","External service interaction (HTTP)","Closed",1746021199678,null,1740114000000,1728914099562,null,null,"published"],"affected_assets":{},"assignedTo":null,"client_id":59013,"client_name":"Crimson Nexus Ventures","code_samples":[],"createdAt":1740114000000,"description":"<p>External service interaction arises when it is possible to induce an application to interact with an arbitrary external service, such as a web or mail server. The ability to trigger arbitrary external service interactions does not constitute a vulnerability in its own right, and in some cases might even be the intended behavior of the application. However, in many cases, it can indicate a vulnerability with serious consequences.<br />The ability to send requests to other systems can allow the vulnerable server to be used as an attack proxy. By submitting suitable payloads, an attacker can cause the application server to attack other systems that it can interact with. This may include public third-party systems, internal systems within the same organization, or services available on the local loopback adapter of the application server itself. Depending on the network architecture, this may expose highly vulnerable internal services that are not otherwise accessible to external attackers.</p>","doc_type":"flaw","doc_version":"1.60.8","exhibits":[],"flaw_id":1994926466,"last_update":1746021199678,"reopenedAt":null,"report_id":643025423,"report_name":"HQ Internal Penetration Test","sev":1,"severity":"High","severity_key":1,"source":"PTrac","status":"Closed","title":"External service interaction (HTTP)","visibility":"published","closedAt":1728914099562,"fields":{},"jiraIssue":null,"recommendations":"<p>You should review the purpose and intended use of the relevant application functionality, and determine whether the ability to trigger arbitrary external service interactions is intended behavior. If so, you should be aware of the types of attacks that can be performed via this behavior and take appropriate measures. These measures might include blocking network access from the application server to other internal systems, and hardening the application server itself to remove any services available on the local loopback adapter.<br />If the ability to trigger arbitrary external service interactions is not intended behavior, then you should implement a whitelist of permitted services and hosts, and block any interactions that do not appear on this whitelist.</p>","references":"<p>Burp Collaborator</p><ul><li>CWE-918: Server-Side Request Forgery (SSRF)(https://cwe.mitre.org/data/definitions/918.html)</li><li>CWE-406: Insufficient Control of Network Message Volume (Network Amplification)(https://cwe.mitre.org/data/definitions/406.html)</li></ul>","selectedScore":null,"serviceNowTicket":null,"scores":{},"subStatus":"remediated","tags":[],"tenant_id":0,"hackerOneData":null,"snykData":null,"edgescanData":null,"integrationData":null,"calculated_severity":false,"reportedAt":1740114000000,"finding_id":null,"cuid":"cma3zphen00qu0hp7c2ml8kys"},{"id":2015868979,"doc_id":[59013,643025423],"data":[2015868979,"High","SQL injection (second order)","Closed",1746021199678,null,1740114000000,1728914099562,null,null,"published"],"affected_assets":{},"assignedTo":null,"client_id":59013,"client_name":"Crimson Nexus Ventures","code_samples":[],"createdAt":1740114000000,"description":"<p>SQL injection vulnerabilities arise when user-controllable data is incorporated into database SQL queries in an unsafe manner. An attacker can supply crafted input to break out of the data context in which their input appears and interfere with the structure of the surrounding query.<br />A wide range of damaging attacks can often be delivered via SQL injection, including reading or modifying critical application data, interfering with application logic, escalating privileges within the database and taking control of the database server.<br />Second-order SQL injection arises when user-supplied data is stored by the application and later incorporated into SQL queries in an unsafe way. To detect the vulnerability, it is normally necessary to submit suitable data in one location, and then use some other application function that processes the data in an unsafe way.</p>","doc_type":"flaw","doc_version":"1.60.8","exhibits":[],"flaw_id":2015868979,"last_update":1746021199678,"reopenedAt":null,"report_id":643025423,"report_name":"HQ Internal Penetration Test","sev":1,"severity":"High","severity_key":1,"source":"PTrac","status":"Closed","title":"SQL injection (second order)","visibility":"published","closedAt":1728914099562,"fields":{},"jiraIssue":null,"recommendations":"<p>The most effective way to prevent SQL injection attacks is to use parameterized queries (also known as prepared statements) for all database access. This method uses two steps to incorporate potentially tainted data into SQL queries: first, the application specifies the structure of the query, leaving placeholders for each item of user input; second, the application specifies the contents of each placeholder. Because the structure of the query has already been defined in the first step, it is not possible for malformed data in the second step to interfere with the query structure. You should review the documentation for your database and application platform to determine the appropriate APIs which you can use to perform parameterized queries. It is strongly recommended that you parameterize every variable data item that is incorporated into database queries, even if it is not obviously tainted, to prevent oversights occurring and avoid vulnerabilities being introduced by changes elsewhere within the code base of the application. <br />You should be aware that some commonly employed and recommended mitigations for SQL injection vulnerabilities are not always effective:<br />One common defense is to double up any single quotation marks appearing within user input before incorporating that input into a SQL query. This defense is designed to prevent malformed data from terminating the string into which it is inserted. However, if the data being incorporated into queries is numeric, then the defense may fail, because numeric data may not be encapsulated within quotes, in which case only a space is required to break out of the data context and interfere with the query. Further, in second-order SQL injection attacks, data that has been safely escaped when initially inserted into the database is subsequently read from the database and then passed back to it again. Quotation marks that have been doubled up initially will return to their original form when the data is reused, allowing the defense to be bypassed.<br />Another often cited defense is to use stored procedures for database access. While stored procedures can provide security benefits, they are not guaranteed to prevent SQL injection attacks. The same kinds of vulnerabilities that arise within standard dynamic SQL queries can arise if any SQL is dynamically constructed within stored procedures. Further, even if the procedure is sound, SQL injection can arise if the procedure is invoked in an unsafe manner using user-controllable data.</p>","references":"<ul><li>Using Burp to Test for Injection Flaws(https://support.portswigger.net/customer/portal/articles/1965677-using-burp-to-test-for-injection-flaws)</li><li>SQL Injection Cheat Sheet(http://websec.ca/kb/sql_injection)</li><li>SQL Injection Prevention Cheat Sheet(https://www.owasp.org/index.php/SQL_Injection_Prevention_Cheat_Sheet)</li><li>CWE-89: Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')(https://cwe.mitre.org/data/definitions/89.html)</li><li>CWE-94: Improper Control of Generation of Code ('Code Injection')(https://cwe.mitre.org/data/definitions/94.html)</li><li>CWE-116: Improper Encoding or Escaping of Output(https://cwe.mitre.org/data/definitions/116.html)</li></ul>","selectedScore":null,"serviceNowTicket":null,"scores":{},"subStatus":"remediated","tags":[],"tenant_id":0,"hackerOneData":null,"snykData":null,"edgescanData":null,"integrationData":null,"calculated_severity":false,"reportedAt":1740114000000,"finding_id":null,"cuid":"cma3zphf000qv0hp721vmatv7"},{"id":2104395628,"doc_id":[59013,643025423],"data":[2104395628,"High","Expression Language injection","Closed",1746021199678,null,1740114000000,1705499804175,null,null,"published"],"affected_assets":{},"assignedTo":null,"client_id":59013,"client_name":"Crimson Nexus Ventures","code_samples":[],"createdAt":1740114000000,"description":"<p>Server-side code injection vulnerabilities arise when an application incorporates user-controllable data into a string that is dynamically evaluated by a code interpreter. If the user data is not strictly validated, an attacker can use crafted input to modify the code to be executed, and inject arbitrary code that will be executed by the server.<br />Server-side code injection vulnerabilities are usually very serious and lead to complete compromise of the application's data and functionality, and often of the server that is hosting the application. It may also be possible to use the server as a platform for further attacks against other systems.</p>","doc_type":"flaw","doc_version":"1.60.8","exhibits":[],"flaw_id":2104395628,"last_update":1746021199678,"reopenedAt":null,"report_id":643025423,"report_name":"HQ Internal Penetration Test","sev":1,"severity":"High","severity_key":1,"source":"PTrac","status":"Closed","title":"Expression Language injection","visibility":"published","closedAt":1705499804175,"fields":{},"jiraIssue":null,"recommendations":"<p>Whenever possible, applications should avoid incorporating user-controllable data into dynamically evaluated code. In almost every situation, there are safer alternative methods of implementing application functions, which cannot be manipulated to inject arbitrary code into the server's processing.<br />If it is considered unavoidable to incorporate user-supplied data into dynamically evaluated code, then the data should be strictly validated. Ideally, a whitelist of specific accepted values should be used. Otherwise, only short alphanumeric strings should be accepted. Input containing any other data, including any conceivable code metacharacters, should be rejected.</p>","references":"<ul><li>Spring Expression Language Injection(https://www.mindedsecurity.com/fileshare/ExpressionLanguageInjection.pdf)</li><li>Remote Code Execution with Spring Expression Language Injection(http://danamodio.com/appsec/research/spring-remote-code-with-expression-language-injection/)</li><li>CWE-116: Improper Encoding or Escaping of Output(https://cwe.mitre.org/data/definitions/116.html)</li><li>CWE-159: Failure to Sanitize Special Element(https://cwe.mitre.org/data/definitions/159.html)</li><li>CWE-917: Improper Neutralization of Special Elements used in an Expression Language Statement ('Expression Language Injection')(https://cwe.mitre.org/data/definitions/917.html)</li></ul>","selectedScore":null,"serviceNowTicket":null,"scores":{},"subStatus":"remediated","tags":[],"tenant_id":0,"hackerOneData":null,"snykData":null,"edgescanData":null,"integrationData":null,"calculated_severity":false,"reportedAt":1740114000000,"finding_id":null,"cuid":"cma3zphfe00qw0hp7fncd1boi"},{"id":2128379538,"doc_id":[59013,643025423],"data":[2128379538,"High","Flash cross-domain policy","Closed",1746021199678,null,1740114000000,1728914099562,null,null,"published"],"affected_assets":{},"assignedTo":null,"client_id":59013,"client_name":"Crimson Nexus Ventures","code_samples":[],"createdAt":1740114000000,"description":"<p>The Flash cross-domain policy controls whether Flash client components running on other domains can perform two-way interaction with the domain that publishes the policy. If another domain is allowed by the policy, then that domain can potentially attack users of the application. If a user is logged in to the application, and visits a domain allowed by the policy, then any malicious content running on that domain can potentially gain full access to the application within the security context of the logged in user.<br />Even if an allowed domain is not overtly malicious in itself, security vulnerabilities within that domain could potentially be leveraged by a third-party attacker to exploit the trust relationship and attack the application that allows access. Any domains that are allowed by the Flash cross-domain policy should be reviewed to determine whether it is appropriate for the application to fully trust both their intentions and security posture.</p>","doc_type":"flaw","doc_version":"1.60.8","exhibits":[],"flaw_id":2128379538,"last_update":1746021199678,"reopenedAt":null,"report_id":643025423,"report_name":"HQ Internal Penetration Test","sev":1,"severity":"High","severity_key":1,"source":"PTrac","status":"Closed","title":"Flash cross-domain policy","visibility":"published","closedAt":1728914099562,"fields":{},"jiraIssue":null,"recommendations":"<p>Any inappropriate entries in the Flash cross-domain policy file should be removed.</p>","references":"<p>CWE-942: Overly Permissive Cross-domain Whitelist</p>","selectedScore":null,"serviceNowTicket":null,"scores":{},"subStatus":"remediated","tags":[],"tenant_id":0,"hackerOneData":null,"snykData":null,"edgescanData":null,"integrationData":null,"calculated_severity":false,"reportedAt":1740114000000,"finding_id":null,"cuid":"cma3zphfq00qx0hp7c7gj72o2"},{"id":2152731746,"doc_id":[59013,643025423],"data":[2152731746,"High","Client-side SQL injection (stored DOM-based)","Closed",1746021199678,null,1740114000000,1705499804175,null,null,"published"],"affected_assets":{},"assignedTo":null,"client_id":59013,"client_name":"Crimson Nexus Ventures","code_samples":[],"createdAt":1740114000000,"description":"<p>Stored DOM-based vulnerabilities arise when user input is stored and later embedded into a response within a part of the DOM that is then processed in an unsafe way by a client-side script. An attacker can leverage the data storage to control a part of the response (for example, a JavaScript string) that can be used to trigger the DOM-based vulnerability.<br />Client-side SQL injection arises when a script incorporates controllable  data into a client-side SQL query in an unsafe way. An attacker may be able to use the vulnerability to construct a URL that, if visited by another application user, will execute an arbitrary SQL query within the local SQL database of the user's browser.<br />The potential impact of the vulnerability depends on the application's usage of the SQL database. If the database is used to store sensitive data (such as messages in a social networking application), then the attacker may be able to retrieve this data. If the database is used to store pending user actions (such as outgoing messages in an email application), then the attacker may be able to modify this data and carry out actions on the user's behalf.<br />Burp Suite automatically identifies this issue using static code analysis, which may lead to false positives that are not actually exploitable. The relevant code and execution paths should be reviewed to determine whether this vulnerability is indeed present, or whether mitigations are in place that would prevent exploitation.</p>","doc_type":"flaw","doc_version":"1.60.8","exhibits":[],"flaw_id":2152731746,"last_update":1746021199678,"reopenedAt":null,"report_id":643025423,"report_name":"HQ Internal Penetration Test","sev":1,"severity":"High","severity_key":1,"source":"PTrac","status":"Closed","title":"Client-side SQL injection (stored DOM-based)","visibility":"published","closedAt":1705499804175,"fields":{},"jiraIssue":null,"recommendations":"<p>The most effective way to avoid DOM-based client-side SQL injection vulnerabilities is to use parameterized queries (also known as prepared statements) for all database access. This method uses two steps to incorporate potentially tainted data into SQL queries: first, the application specifies the structure of the query, leaving placeholders for each item of user input; second, the application specifies the contents of each placeholder. Because the structure of the query has already been defined in the first step, it is not possible for malformed data in the second step to interfere with the query structure. In the JavaScript executeSql() API, parameterized items can be designated within the query string using the query character (?), and for each parameterized item, an additional parameter is passed to the API containing the item's value. It is strongly recommended that you parameterize every variable data item that is incorporated into database queries, even if it is not obviously tainted, to prevent oversights occurring and avoid vulnerabilities being introduced by changes elsewhere within the code base of the application. </p>","references":"<ul><li>CWE-89: Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')(https://cwe.mitre.org/data/definitions/89.html)</li><li>CWE-116: Improper Encoding or Escaping of Output(https://cwe.mitre.org/data/definitions/116.html)</li><li>CWE-159: Failure to Sanitize Special Element(https://cwe.mitre.org/data/definitions/159.html)</li></ul>","selectedScore":null,"serviceNowTicket":null,"scores":{},"subStatus":"remediated","tags":[],"tenant_id":0,"hackerOneData":null,"snykData":null,"edgescanData":null,"integrationData":null,"calculated_severity":false,"reportedAt":1740114000000,"finding_id":null,"cuid":"cma3zphg100qy0hp76hp2cdma"},{"id":2317643843,"doc_id":[59013,643025423],"data":[2317643843,"High","Perl code injection","Closed",1746021199678,null,1740114000000,1728914099562,null,null,"published"],"affected_assets":{},"assignedTo":null,"client_id":59013,"client_name":"Crimson Nexus Ventures","code_samples":[],"createdAt":1740114000000,"description":"<p>Server-side code injection vulnerabilities arise when an application incorporates user-controllable data into a string that is dynamically evaluated by a code interpreter. If the user data is not strictly validated, an attacker can use crafted input to modify the code to be executed, and inject arbitrary code that will be executed by the server.<br />Server-side code injection vulnerabilities are usually very serious and lead to complete compromise of the application's data and functionality, and often of the server that is hosting the application. It may also be possible to use the server as a platform for further attacks against other systems.</p>","doc_type":"flaw","doc_version":"1.60.8","exhibits":[],"flaw_id":2317643843,"last_update":1746021199678,"reopenedAt":null,"report_id":643025423,"report_name":"HQ Internal Penetration Test","sev":1,"severity":"High","severity_key":1,"source":"PTrac","status":"Closed","title":"Perl code injection","visibility":"published","closedAt":1728914099562,"fields":{},"jiraIssue":null,"recommendations":"<p>Whenever possible, applications should avoid incorporating user-controllable data into dynamically evaluated code. In almost every situation, there are safer alternative methods of implementing application functions, which cannot be manipulated to inject arbitrary code into the server's processing.<br />If it is considered unavoidable to incorporate user-supplied data into dynamically evaluated code, then the data should be strictly validated. Ideally, a whitelist of specific accepted values should be used. Otherwise, only short alphanumeric strings should be accepted. Input containing any other data, including any conceivable code metacharacters, should be rejected.</p>","references":"<ul><li>CWE-94: Improper Control of Generation of Code ('Code Injection')(https://cwe.mitre.org/data/definitions/94.html)</li><li>CWE-95: Improper Neutralization of Directives in Dynamically Evaluated Code ('Eval Injection')(https://cwe.mitre.org/data/definitions/95.html)</li><li>CWE-116: Improper Encoding or Escaping of Output(https://cwe.mitre.org/data/definitions/116.html)</li></ul>","selectedScore":null,"serviceNowTicket":null,"scores":{},"subStatus":"remediated","tags":[],"tenant_id":0,"hackerOneData":null,"snykData":null,"edgescanData":null,"integrationData":null,"calculated_severity":false,"reportedAt":1740114000000,"finding_id":null,"cuid":"cma3zphgb00qz0hp7gm0tauvs"},{"id":2324430936,"doc_id":[59013,643025423],"data":[2324430936,"High","WebSocket hijacking (DOM-based)","Closed",1746021199678,null,1740114000000,1705499804175,null,null,"published"],"affected_assets":{},"assignedTo":null,"client_id":59013,"client_name":"Crimson Nexus Ventures","code_samples":[],"createdAt":1740114000000,"description":"<p>DOM-based vulnerabilities arise when a client-side script reads data from a controllable part of the DOM (for example, the URL) and processes this data in an unsafe way.<br />WebSocket hijacking occurs when a  script uses controllable  data as the target URL of a WebSocket connection. An attacker may be able to use the vulnerability to construct a URL that, if visited by another application user, will cause the user's browser to open a WebSocket connection to a URL that is under the attacker's control.<br />The potential impact of the vulnerability depends on the application's usage of WebSockets. If the application transmits sensitive data from the user's browser to the WebSocket server, then the attacker may be able to capture this data. If the application reads data from the WebSocket server and performs processing on this data, then the attacker may be able to subvert the application's logic or deliver additional client-side attacks against the user.<br />Burp Suite automatically identifies this issue using static code analysis, which may lead to false positives that are not actually exploitable. The relevant code and execution paths should be reviewed to determine whether this vulnerability is indeed present, or whether mitigations are in place that would prevent exploitation.</p>","doc_type":"flaw","doc_version":"1.60.8","exhibits":[],"flaw_id":2324430936,"last_update":1746021199678,"reopenedAt":null,"report_id":643025423,"report_name":"HQ Internal Penetration Test","sev":1,"severity":"High","severity_key":1,"source":"PTrac","status":"Closed","title":"WebSocket hijacking (DOM-based)","visibility":"published","closedAt":1705499804175,"fields":{},"jiraIssue":null,"recommendations":"<p>The most effective way to avoid DOM-based WebSocket hijacking vulnerabilities is not to dynamically set the target URL of a WebSocket connection using data that originated from any untrusted source. If the desired functionality of the application means that this behavior is unavoidable, then defenses must be implemented within the client-side code to prevent malicious data from introducing an arbitrary URL as a target of a WebSocket. In general, this is best achieved by using a whitelist of URLs that are permitted WebSocket targets, and strictly validating the target against this list before creating the WebSocket.</p>","references":"<ul><li>CWE-345: Insufficient Verification of Data Authenticity(https://cwe.mitre.org/data/definitions/345.html)</li><li>CWE-346: Origin Validation Error(https://cwe.mitre.org/data/definitions/346.html)</li><li>CWE-441: Unintended Proxy or Intermediary ('Confused Deputy')(https://cwe.mitre.org/data/definitions/441.html)</li></ul>","selectedScore":null,"serviceNowTicket":null,"scores":{},"subStatus":"remediated","tags":[],"tenant_id":0,"hackerOneData":null,"snykData":null,"edgescanData":null,"integrationData":null,"calculated_severity":false,"reportedAt":1740114000000,"finding_id":null,"cuid":"cma3zphgn00r00hp7gyzsfio9"},{"id":2335918991,"doc_id":[59013,643025423],"data":[2335918991,"High","Client-side SQL injection (DOM-based)","Closed",1746021199678,null,1740114000000,1728914099562,null,null,"published"],"affected_assets":{},"assignedTo":null,"client_id":59013,"client_name":"Crimson Nexus Ventures","code_samples":[],"createdAt":1740114000000,"description":"<p>DOM-based vulnerabilities arise when a client-side script reads data from a controllable part of the DOM (for example, the URL) and processes this data in an unsafe way.<br />Client-side SQL injection arises when a script incorporates controllable  data into a client-side SQL query in an unsafe way. An attacker may be able to use the vulnerability to construct a URL that, if visited by another application user, will execute an arbitrary SQL query within the local SQL database of the user's browser.<br />The potential impact of the vulnerability depends on the application's usage of the SQL database. If the database is used to store sensitive data (such as messages in a social networking application), then the attacker may be able to retrieve this data. If the database is used to store pending user actions (such as outgoing messages in an email application), then the attacker may be able to modify this data and carry out actions on the user's behalf.<br />Burp Suite automatically identifies this issue using static code analysis, which may lead to false positives that are not actually exploitable. The relevant code and execution paths should be reviewed to determine whether this vulnerability is indeed present, or whether mitigations are in place that would prevent exploitation.</p>","doc_type":"flaw","doc_version":"1.60.8","exhibits":[],"flaw_id":2335918991,"last_update":1746021199678,"reopenedAt":null,"report_id":643025423,"report_name":"HQ Internal Penetration Test","sev":1,"severity":"High","severity_key":1,"source":"PTrac","status":"Closed","title":"Client-side SQL injection (DOM-based)","visibility":"published","closedAt":1728914099562,"fields":{},"jiraIssue":null,"recommendations":"<p>The most effective way to avoid DOM-based client-side SQL injection vulnerabilities is to use parameterized queries (also known as prepared statements) for all database access. This method uses two steps to incorporate potentially tainted data into SQL queries: first, the application specifies the structure of the query, leaving placeholders for each item of user input; second, the application specifies the contents of each placeholder. Because the structure of the query has already been defined in the first step, it is not possible for malformed data in the second step to interfere with the query structure. In the JavaScript executeSql() API, parameterized items can be designated within the query string using the query character (?), and for each parameterized item, an additional parameter is passed to the API containing the item's value. It is strongly recommended that you parameterize every variable data item that is incorporated into database queries, even if it is not obviously tainted, to prevent oversights occurring and avoid vulnerabilities being introduced by changes elsewhere within the code base of the application. </p>","references":"<ul><li>CWE-89: Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')(https://cwe.mitre.org/data/definitions/89.html)</li><li>CWE-116: Improper Encoding or Escaping of Output(https://cwe.mitre.org/data/definitions/116.html)</li><li>CWE-159: Failure to Sanitize Special Element(https://cwe.mitre.org/data/definitions/159.html)</li></ul>","selectedScore":null,"serviceNowTicket":null,"scores":{},"subStatus":"remediated","tags":[],"tenant_id":0,"hackerOneData":null,"snykData":null,"edgescanData":null,"integrationData":null,"calculated_severity":false,"reportedAt":1740114000000,"finding_id":null,"cuid":"cma3zphgw00r10hp7gt8f7kk3"},{"id":2348518526,"doc_id":[59013,643025423],"data":[2348518526,"High","JavaScript injection (reflected DOM-based)","Closed",1746021199678,null,1740114000000,1705499804175,null,null,"published"],"affected_assets":{},"assignedTo":null,"client_id":59013,"client_name":"Crimson Nexus Ventures","code_samples":[],"createdAt":1740114000000,"description":"<p>Reflected DOM-based vulnerabilities arise when data is copied from a request and echoed into the application's immediate response within a part of the DOM that is then processed in an unsafe way by a client-side script. An attacker can leverage the reflection to control a part of the response (for example, a JavaScript string) that can be used to trigger the DOM-based vulnerability.<br />DOM-based JavaScript injection arises when a script executes controllable data as JavaScript. An attacker may be able to use the vulnerability to construct a URL that, if visited by another application user, will cause JavaScript code supplied by the attacker to execute within the user's browser in the context of that user's session with the application.<br />The attacker-supplied code can perform a wide variety of actions, such as stealing the victim's session token or login credentials, performing arbitrary actions on the victim's behalf, and logging their keystrokes.<br />Users can be induced to visit the attacker's crafted URL in various ways, similar to the usual attack delivery vectors for reflected cross-site scripting vulnerabilities.<br />Burp Suite automatically identifies this issue using static code analysis, which may lead to false positives that are not actually exploitable. The relevant code and execution paths should be reviewed to determine whether this vulnerability is indeed present, or whether mitigations are in place that would prevent exploitation.</p>","doc_type":"flaw","doc_version":"1.60.8","exhibits":[],"flaw_id":2348518526,"last_update":1746021199678,"reopenedAt":null,"report_id":643025423,"report_name":"HQ Internal Penetration Test","sev":1,"severity":"High","severity_key":1,"source":"PTrac","status":"Closed","title":"JavaScript injection (reflected DOM-based)","visibility":"published","closedAt":1705499804175,"fields":{},"jiraIssue":null,"recommendations":"<p>The most effective way to avoid DOM-based JavaScript injection vulnerabilities is not to execute as JavaScript any data that originated from an untrusted source. If the desired functionality of the application means that this behavior is unavoidable, then defenses must be implemented within the client-side code to prevent malicious data from executing as script. In many cases, the relevant data can be validated on a whitelist basis, to allow only content that is known to be safe. In other cases, it will be necessary to sanitize or encode the data. This can be a complex task, and may need to involve a combination of JavaScript escaping and HTML encoding, in the appropriate sequence.</p>","references":"<ul><li>CWE-94: Improper Control of Generation of Code ('Code Injection')(https://cwe.mitre.org/data/definitions/94.html)</li><li>CWE-95: Improper Neutralization of Directives in Dynamically Evaluated Code ('Eval Injection')(https://cwe.mitre.org/data/definitions/95.html)</li><li>CWE-116: Improper Encoding or Escaping of Output(https://cwe.mitre.org/data/definitions/116.html)</li></ul>","selectedScore":null,"serviceNowTicket":null,"scores":{},"subStatus":"remediated","tags":[],"tenant_id":0,"hackerOneData":null,"snykData":null,"edgescanData":null,"integrationData":null,"calculated_severity":false,"reportedAt":1740114000000,"finding_id":null,"cuid":"cma3zphh600r20hp77nha9lsf"},{"id":2399381761,"doc_id":[59013,643025423],"data":[2399381761,"High","Out-of-band resource load (HTTP)","Closed",1746021199678,null,1740114000000,1728914099562,null,null,"published"],"affected_assets":{},"assignedTo":null,"client_id":59013,"client_name":"Crimson Nexus Ventures","code_samples":[],"createdAt":1740114000000,"description":"<p>Out-of-band resource load arises when it is possible to induce an application to fetch content from an arbitrary external location, and incorporate that content into the application's own response(s). The ability to trigger arbitrary out-of-band resource load does not constitute a vulnerability in its own right, and in some cases might even be the intended behavior of the application. However, in many cases, it can indicate a vulnerability with serious consequences.<br />The ability to request and retrieve web content from other systems can allow the application server to be used as a two-way attack proxy. By submitting suitable payloads, an attacker can cause the application server to attack, or retrieve content from, other systems that it can interact with. This may include public third-party systems, internal systems within the same organization, or services available on the local loopback adapter of the application server itself. Depending on the network architecture, this may expose highly vulnerable internal services that are not otherwise accessible to external attackers.<br />Additionally, the application's processing of web content that is retrieved from arbitrary URLs exposes some important and non-conventional attack surface. An attacker can deploy a web server that returns malicious content, and then induce the application to retrieve and process that content. This processing might give rise to the types of input-based vulnerabilities that are normally found when unexpected input is submitted directly in requests to the application. The out-of-band attack surface that the application exposes should be thoroughly tested for these types of vulnerabilities.</p>","doc_type":"flaw","doc_version":"1.60.8","exhibits":[],"flaw_id":2399381761,"last_update":1746021199678,"reopenedAt":null,"report_id":643025423,"report_name":"HQ Internal Penetration Test","sev":1,"severity":"High","severity_key":1,"source":"PTrac","status":"Closed","title":"Out-of-band resource load (HTTP)","visibility":"published","closedAt":1728914099562,"fields":{},"jiraIssue":null,"recommendations":"<p>You should review the purpose and intended use of the relevant application functionality, and determine whether the ability to trigger arbitrary out-of-band resource load is intended behavior. If so, you should be aware of the types of attacks that can be performed via this behavior and take appropriate measures. These measures might include blocking network access from the application server to other internal systems, and hardening the application server itself to remove any services available on the local loopback adapter. You should also ensure that content retrieved from other systems is processed in a safe manner, with the usual precautions that are applicable when processing input from direct incoming web requests.<br />If the ability to trigger arbitrary out-of-band resource load is not intended behavior, then you should implement a whitelist of permitted URLs, and block requests to URLs that do not appear on this whitelist.</p>","references":"<p>Burp Collaborator</p><ul><li>CWE-610: Externally Controlled Reference to a Resource in Another Sphere(https://cwe.mitre.org/data/definitions/610.html)</li><li>CWE-918: Server-Side Request Forgery (SSRF)(https://cwe.mitre.org/data/definitions/918.html)</li></ul>","selectedScore":null,"serviceNowTicket":null,"scores":{},"subStatus":"remediated","tags":[],"tenant_id":0,"hackerOneData":null,"snykData":null,"edgescanData":null,"integrationData":null,"calculated_severity":false,"reportedAt":1740114000000,"finding_id":null,"cuid":"cma3zphhh00r30hp74pf52mgy"},{"id":2595507788,"doc_id":[59013,643025423],"data":[2595507788,"High","SSI injection","Closed",1746021199678,null,1740114000000,1705499804175,null,null,"published"],"affected_assets":{},"assignedTo":null,"client_id":59013,"client_name":"Crimson Nexus Ventures","code_samples":[],"createdAt":1740114000000,"description":"<p>Server-Side Include (SSI) injection vulnerabilities arise when an application incorporates user-controllable data into response that is then parsed for Server-Side Include directives. If the data is not strictly validated, an attacker can modify or inject directives to carry out malicious actions.<br />SSI injection vulnerabilities can typically be exploited to inject arbitrary content, including JavaScript, into the application's response, with the same impact as cross-site scripting. Depending on the server configuration, it may also be possible to read protected files, or perform arbitrary code execution on the server, with the same impact as OS command injection.</p>","doc_type":"flaw","doc_version":"1.60.8","exhibits":[],"flaw_id":2595507788,"last_update":1746021199678,"reopenedAt":null,"report_id":643025423,"report_name":"HQ Internal Penetration Test","sev":1,"severity":"High","severity_key":1,"source":"PTrac","status":"Closed","title":"SSI injection","visibility":"published","closedAt":1705499804175,"fields":{},"jiraIssue":null,"recommendations":"<p>If possible, applications should avoid incorporating user-controllable data into pages that are processed for SSI directives. In almost every situation, there are safer alternative methods of implementing the required functionality. If this is not considered feasible, then the data should be strictly validated. Ideally, a whitelist of specific accepted values should be used. Otherwise, only short alphanumeric strings should be accepted. Input containing any other data, including any conceivable SSI metacharacter, should be rejected.</p>","references":"<p>Introduction to Server-Side Includes</p><ul><li>CWE-96: Improper Neutralization of Directives in Statically Saved Code ('Static Code Injection')(https://cwe.mitre.org/data/definitions/96.html)</li><li>CWE-116: Improper Encoding or Escaping of Output(https://cwe.mitre.org/data/definitions/116.html)</li><li>CWE-159: Failure to Sanitize Special Element(https://cwe.mitre.org/data/definitions/159.html)</li></ul>","selectedScore":null,"serviceNowTicket":null,"scores":{},"subStatus":"remediated","tags":[],"tenant_id":0,"hackerOneData":null,"snykData":null,"edgescanData":null,"integrationData":null,"calculated_severity":false,"reportedAt":1740114000000,"finding_id":null,"cuid":"cma3zphhr00r40hp7axff9f8u"},{"id":2697172689,"doc_id":[59013,643025423],"data":[2697172689,"High","WebSocket hijacking (stored DOM-based)","Closed",1746021199678,null,1740114000000,1728914099562,null,null,"published"],"affected_assets":{},"assignedTo":null,"client_id":59013,"client_name":"Crimson Nexus Ventures","code_samples":[],"createdAt":1740114000000,"description":"<p>Stored DOM-based vulnerabilities arise when user input is stored and later embedded into a response within a part of the DOM that is then processed in an unsafe way by a client-side script. An attacker can leverage the data storage to control a part of the response (for example, a JavaScript string) that can be used to trigger the DOM-based vulnerability.<br />WebSocket hijacking occurs when a  script uses controllable  data as the target URL of a WebSocket connection. An attacker may be able to use the vulnerability to construct a URL that, if visited by another application user, will cause the user's browser to open a WebSocket connection to a URL that is under the attacker's control.<br />The potential impact of the vulnerability depends on the application's usage of WebSockets. If the application transmits sensitive data from the user's browser to the WebSocket server, then the attacker may be able to capture this data. If the application reads data from the WebSocket server and performs processing on this data, then the attacker may be able to subvert the application's logic or deliver additional client-side attacks against the user.<br />Burp Suite automatically identifies this issue using static code analysis, which may lead to false positives that are not actually exploitable. The relevant code and execution paths should be reviewed to determine whether this vulnerability is indeed present, or whether mitigations are in place that would prevent exploitation.</p>","doc_type":"flaw","doc_version":"1.60.8","exhibits":[],"flaw_id":2697172689,"last_update":1746021199678,"reopenedAt":null,"report_id":643025423,"report_name":"HQ Internal Penetration Test","sev":1,"severity":"High","severity_key":1,"source":"PTrac","status":"Closed","title":"WebSocket hijacking (stored DOM-based)","visibility":"published","closedAt":1728914099562,"fields":{},"jiraIssue":null,"recommendations":"<p>The most effective way to avoid DOM-based WebSocket hijacking vulnerabilities is not to dynamically set the target URL of a WebSocket connection using data that originated from any untrusted source. If the desired functionality of the application means that this behavior is unavoidable, then defenses must be implemented within the client-side code to prevent malicious data from introducing an arbitrary URL as a target of a WebSocket. In general, this is best achieved by using a whitelist of URLs that are permitted WebSocket targets, and strictly validating the target against this list before creating the WebSocket.</p>","references":"<ul><li>CWE-345: Insufficient Verification of Data Authenticity(https://cwe.mitre.org/data/definitions/345.html)</li><li>CWE-346: Origin Validation Error(https://cwe.mitre.org/data/definitions/346.html)</li><li>CWE-441: Unintended Proxy or Intermediary ('Confused Deputy')(https://cwe.mitre.org/data/definitions/441.html)</li></ul>","selectedScore":null,"serviceNowTicket":null,"scores":{},"subStatus":"remediated","tags":[],"tenant_id":0,"hackerOneData":null,"snykData":null,"edgescanData":null,"integrationData":null,"calculated_severity":false,"reportedAt":1740114000000,"finding_id":null,"cuid":"cma3zphi300r50hp77g4tgse8"},{"id":2805321593,"doc_id":[59013,643025423],"data":[2805321593,"High","External service interaction (DNS)","Closed",1746021199678,null,1740114000000,1728914099562,null,null,"published"],"affected_assets":{},"assignedTo":null,"client_id":59013,"client_name":"Crimson Nexus Ventures","code_samples":[],"createdAt":1740114000000,"description":"<p>External service interaction arises when it is possible to induce an application to interact with an arbitrary external service, such as a web or mail server. The ability to trigger arbitrary external service interactions does not constitute a vulnerability in its own right, and in some cases might even be the intended behavior of the application. However, in many cases, it can indicate a vulnerability with serious consequences.<br />In cases where DNS-based interactions can be triggered, it is normally possible to trigger interactions using other service types, and these are reported as separate issues. If a payload that specifies a particular service type (e.g. a URL) triggers only a DNS-based interaction, then this strongly indicates that the application attempted to connect using that other service, but was prevented from doing so by egress filters in place at the network layer. The ability to send requests to other systems can allow the vulnerable server to be used as an attack proxy. By submitting suitable payloads, an attacker can cause the application server to attack other systems that it can interact with. This may include public third-party systems, internal systems within the same organization, or services available on the local loopback adapter of the application server itself. Depending on the network architecture, this may expose highly vulnerable internal services that are not otherwise accessible to external attackers.</p>","doc_type":"flaw","doc_version":"1.60.8","exhibits":[],"flaw_id":2805321593,"last_update":1746021199678,"reopenedAt":null,"report_id":643025423,"report_name":"HQ Internal Penetration Test","sev":1,"severity":"High","severity_key":1,"source":"PTrac","status":"Closed","title":"External service interaction (DNS)","visibility":"published","closedAt":1728914099562,"fields":{},"jiraIssue":null,"recommendations":"<p>You should review the purpose and intended use of the relevant application functionality, and determine whether the ability to trigger arbitrary external service interactions is intended behavior. If so, you should be aware of the types of attacks that can be performed via this behavior and take appropriate measures. These measures might include blocking network access from the application server to other internal systems, and hardening the application server itself to remove any services available on the local loopback adapter.<br />If the ability to trigger arbitrary external service interactions is not intended behavior, then you should implement a whitelist of permitted services and hosts, and block any interactions that do not appear on this whitelist.</p>","references":"<p>Burp Collaborator</p><ul><li>CWE-918: Server-Side Request Forgery (SSRF)(https://cwe.mitre.org/data/definitions/918.html)</li><li>CWE-406: Insufficient Control of Network Message Volume (Network Amplification)(https://cwe.mitre.org/data/definitions/406.html)</li></ul>","selectedScore":null,"serviceNowTicket":null,"scores":{},"subStatus":"remediated","tags":[],"tenant_id":0,"hackerOneData":null,"snykData":null,"edgescanData":null,"integrationData":null,"calculated_severity":false,"reportedAt":1740114000000,"finding_id":null,"cuid":"cma3zphif00r60hp796y55b84"},{"id":2838749300,"doc_id":[59013,643025423],"data":[2838749300,"High","HTTP PUT method is enabled","Closed",1746021199678,null,1740114000000,1705499804175,null,null,"published"],"affected_assets":{},"assignedTo":null,"client_id":59013,"client_name":"Crimson Nexus Ventures","code_samples":[],"createdAt":1740114000000,"description":"<p>The HTTP PUT method is normally used to upload data that is saved on the server at a user-supplied URL. If enabled, an attacker may be able to place arbitrary, and potentially malicious, content into the application. Depending on the server's configuration, this may lead to compromise of other users (by uploading client-executable scripts), compromise of the server (by uploading server-executable code), or other attacks.</p>","doc_type":"flaw","doc_version":"1.60.8","exhibits":[],"flaw_id":2838749300,"last_update":1746021199678,"reopenedAt":null,"report_id":643025423,"report_name":"HQ Internal Penetration Test","sev":1,"severity":"High","severity_key":1,"source":"PTrac","status":"Closed","title":"HTTP PUT method is enabled","visibility":"published","closedAt":1705499804175,"fields":{},"jiraIssue":null,"recommendations":"<p>Refer to your platform's documentation to determine how to disable the HTTP PUT method on the server.</p>","references":"<p>CWE-650: Trusting HTTP Permission Methods on the Server Side</p>","selectedScore":null,"serviceNowTicket":null,"scores":{},"subStatus":"remediated","tags":[],"tenant_id":0,"hackerOneData":null,"snykData":null,"edgescanData":null,"integrationData":null,"calculated_severity":false,"reportedAt":1740114000000,"finding_id":null,"cuid":"cma3zphis00r70hp742ptfcpj"},{"id":2948889209,"doc_id":[59013,643025423],"data":[2948889209,"High","JavaScript injection (DOM-based)","Closed",1746021199678,null,1740114000000,1728914099562,null,null,"published"],"affected_assets":{},"assignedTo":null,"client_id":59013,"client_name":"Crimson Nexus Ventures","code_samples":[],"createdAt":1740114000000,"description":"<p>DOM-based vulnerabilities arise when a client-side script reads data from a controllable part of the DOM (for example, the URL) and processes this data in an unsafe way.<br />DOM-based JavaScript injection arises when a script executes controllable data as JavaScript. An attacker may be able to use the vulnerability to construct a URL that, if visited by another application user, will cause JavaScript code supplied by the attacker to execute within the user's browser in the context of that user's session with the application.<br />The attacker-supplied code can perform a wide variety of actions, such as stealing the victim's session token or login credentials, performing arbitrary actions on the victim's behalf, and logging their keystrokes.<br />Users can be induced to visit the attacker's crafted URL in various ways, similar to the usual attack delivery vectors for reflected cross-site scripting vulnerabilities.<br />Burp Suite automatically identifies this issue using static code analysis, which may lead to false positives that are not actually exploitable. The relevant code and execution paths should be reviewed to determine whether this vulnerability is indeed present, or whether mitigations are in place that would prevent exploitation.</p>","doc_type":"flaw","doc_version":"1.60.8","exhibits":[],"flaw_id":2948889209,"last_update":1746021199678,"reopenedAt":null,"report_id":643025423,"report_name":"HQ Internal Penetration Test","sev":1,"severity":"High","severity_key":1,"source":"PTrac","status":"Closed","title":"JavaScript injection (DOM-based)","visibility":"published","closedAt":1728914099562,"fields":{},"jiraIssue":null,"recommendations":"<p>The most effective way to avoid DOM-based JavaScript injection vulnerabilities is not to execute as JavaScript any data that originated from an untrusted source. If the desired functionality of the application means that this behavior is unavoidable, then defenses must be implemented within the client-side code to prevent malicious data from executing as script. In many cases, the relevant data can be validated on a whitelist basis, to allow only content that is known to be safe. In other cases, it will be necessary to sanitize or encode the data. This can be a complex task, and may need to involve a combination of JavaScript escaping and HTML encoding, in the appropriate sequence.</p>","references":"<ul><li>CWE-94: Improper Control of Generation of Code ('Code Injection')(https://cwe.mitre.org/data/definitions/94.html)</li><li>CWE-95: Improper Neutralization of Directives in Dynamically Evaluated Code ('Eval Injection')(https://cwe.mitre.org/data/definitions/95.html)</li><li>CWE-116: Improper Encoding or Escaping of Output(https://cwe.mitre.org/data/definitions/116.html)</li></ul>","selectedScore":null,"serviceNowTicket":null,"scores":{},"subStatus":"remediated","tags":[],"tenant_id":0,"hackerOneData":null,"snykData":null,"edgescanData":null,"integrationData":null,"calculated_severity":false,"reportedAt":1740114000000,"finding_id":null,"cuid":"cma3zphj300r80hp7fsr2g7dm"},{"id":2966920723,"doc_id":[59013,643025423],"data":[2966920723,"High","Cross-site scripting (DOM-based)","Closed",1746021199678,null,1740114000000,1705499804175,null,null,"published"],"affected_assets":{},"assignedTo":null,"client_id":59013,"client_name":"Crimson Nexus Ventures","code_samples":[],"createdAt":1740114000000,"description":"<p>DOM-based vulnerabilities arise when a client-side script reads data from a controllable part of the DOM (for example, the URL) and processes this data in an unsafe way.<br />DOM-based cross-site scripting arises when a script  writes controllable data into the HTML document in an unsafe way. An attacker may be able to use the vulnerability to construct a URL that, if visited by another application user, will cause JavaScript code supplied by the attacker to execute within the user's browser in the context of that user's session with the application.<br />The attacker-supplied code can perform a wide variety of actions, such as stealing the victim's session token or login credentials, performing arbitrary actions on the victim's behalf, and logging their keystrokes.<br />Users can be induced to visit the attacker's crafted URL in various ways, similar to the usual attack delivery vectors for reflected cross-site scripting vulnerabilities.<br />Burp Suite automatically identifies this issue using static code analysis, which may lead to false positives that are not actually exploitable. The relevant code and execution paths should be reviewed to determine whether this vulnerability is indeed present, or whether mitigations are in place that would prevent exploitation.</p>","doc_type":"flaw","doc_version":"1.60.8","exhibits":[],"flaw_id":2966920723,"last_update":1746021199678,"reopenedAt":null,"report_id":643025423,"report_name":"HQ Internal Penetration Test","sev":1,"severity":"High","severity_key":1,"source":"PTrac","status":"Closed","title":"Cross-site scripting (DOM-based)","visibility":"published","closedAt":1705499804175,"fields":{},"jiraIssue":null,"recommendations":"<p>The most effective way to avoid DOM-based cross-site scripting vulnerabilities is not to dynamically write data from any untrusted source into the HTML document. If the desired functionality of the application means that this behavior is unavoidable, then defenses must be implemented within the client-side code to prevent malicious data from introducing script code into the document. In many cases, the relevant data can be validated on a whitelist basis, to allow only content that is known to be safe. In other cases, it will be necessary to sanitize or encode the data. This can be a complex task, and depending on the context that the data is to be inserted may need to involve a combination of JavaScript escaping, HTML encoding, and URL encoding, in the appropriate sequence.</p>","references":"<ul><li>CWE-79: Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')(https://cwe.mitre.org/data/definitions/79.html)</li><li>CWE-80: Improper Neutralization of Script-Related HTML Tags in a Web Page (Basic XSS)(https://cwe.mitre.org/data/definitions/80.html)</li><li>CWE-116: Improper Encoding or Escaping of Output(https://cwe.mitre.org/data/definitions/116.html)</li><li>CWE-159: Failure to Sanitize Special Element(https://cwe.mitre.org/data/definitions/159.html)</li></ul>","selectedScore":null,"serviceNowTicket":null,"scores":{},"subStatus":"remediated","tags":[],"tenant_id":0,"hackerOneData":null,"snykData":null,"edgescanData":null,"integrationData":null,"calculated_severity":false,"reportedAt":1740114000000,"finding_id":null,"cuid":"cma3zphjd00r90hp71rbd04s4"},{"id":3060587577,"doc_id":[59013,643025423],"data":[3060587577,"High","Silverlight cross-domain policy","Closed",1746021199678,null,1740114000000,1728914099562,null,null,"published"],"affected_assets":{},"assignedTo":null,"client_id":59013,"client_name":"Crimson Nexus Ventures","code_samples":[],"createdAt":1740114000000,"description":"<p>The Silverlight cross-domain policy controls whether Silverlight client components running on other domains can perform two-way interaction with the domain that publishes the policy. If another domain is allowed by the policy, then that domain can potentially attack users of the application. If a user is logged in to the application, and visits a domain allowed by the policy, then any malicious content running on that domain can potentially gain full access to the application within the security context of the logged in user.<br />Even if an allowed domain is not overtly malicious in itself, security vulnerabilities within that domain could potentially be leveraged by a third-party attacker to exploit the trust relationship and attack the application that allows access. Any domains that are allowed by the Silverlight cross-domain policy should be reviewed to determine whether it is appropriate for the application to fully trust both their intentions and security posture.</p>","doc_type":"flaw","doc_version":"1.60.8","exhibits":[],"flaw_id":3060587577,"last_update":1746021199678,"reopenedAt":null,"report_id":643025423,"report_name":"HQ Internal Penetration Test","sev":1,"severity":"High","severity_key":1,"source":"PTrac","status":"Closed","title":"Silverlight cross-domain policy","visibility":"published","closedAt":1728914099562,"fields":{},"jiraIssue":null,"recommendations":"<p>Any inappropriate entries in the Silverlight cross-domain policy file should be removed.</p>","references":"<p>CWE-942: Overly Permissive Cross-domain Whitelist</p>","selectedScore":null,"serviceNowTicket":null,"scores":{},"subStatus":"remediated","tags":[],"tenant_id":0,"hackerOneData":null,"snykData":null,"edgescanData":null,"integrationData":null,"calculated_severity":false,"reportedAt":1740114000000,"finding_id":null,"cuid":"cma3zphjo00ra0hp76y2n0j47"},{"id":3061976833,"doc_id":[59013,643025423],"data":[3061976833,"High","LDAP injection","Closed",1746021199678,null,1740114000000,1705499804175,null,null,"published"],"affected_assets":{},"assignedTo":null,"client_id":59013,"client_name":"Crimson Nexus Ventures","code_samples":[],"createdAt":1740114000000,"description":"<p>LDAP injection arises when user-controllable data is copied in an unsafe way into an LDAP query that is performed by the application. If an attacker can inject LDAP metacharacters into the query, then they can interfere with the query's logic. Depending on the function for which the query is used, the attacker may be able to retrieve sensitive data to which they are not authorized, or subvert the application's logic to perform some unauthorized action.<br />Note that automated difference-based tests for LDAP injection flaws can often be unreliable and are prone to false positive results. Scanner results should be manually reviewed to confirm whether a vulnerability is actually present.</p>","doc_type":"flaw","doc_version":"1.60.8","exhibits":[],"flaw_id":3061976833,"last_update":1746021199678,"reopenedAt":null,"report_id":643025423,"report_name":"HQ Internal Penetration Test","sev":1,"severity":"High","severity_key":1,"source":"PTrac","status":"Closed","title":"LDAP injection","visibility":"published","closedAt":1705499804175,"fields":{},"jiraIssue":null,"recommendations":"<p>If possible, applications should avoid copying user-controllable data into LDAP queries. If this is unavoidable, then the data should be strictly validated to prevent LDAP injection attacks. In most situations, it will be appropriate to allow only short alphanumeric strings to be copied into queries, and any other input should be rejected. At a minimum, input containing any LDAP metacharacters should be rejected; characters that should be blocked include ( ) ; , * | &amp; = and whitespace.</p>","references":"<ul><li>CWE-90: Improper Neutralization of Special Elements used in an LDAP Query ('LDAP Injection')(https://cwe.mitre.org/data/definitions/90.html)</li><li>CWE-116: Improper Encoding or Escaping of Output(https://cwe.mitre.org/data/definitions/116.html)</li></ul>","selectedScore":null,"serviceNowTicket":null,"scores":{},"subStatus":"remediated","tags":[],"tenant_id":0,"hackerOneData":null,"snykData":null,"edgescanData":null,"integrationData":null,"calculated_severity":false,"reportedAt":1740114000000,"finding_id":null,"cuid":"cma3zphjz00rb0hp7892b5wdd"},{"id":3263747540,"doc_id":[59013,643025423],"data":[3263747540,"High","Ruby code injection","Closed",1746021199678,null,1740114000000,1705499804175,null,null,"published"],"affected_assets":{},"assignedTo":null,"client_id":59013,"client_name":"Crimson Nexus Ventures","code_samples":[],"createdAt":1740114000000,"description":"<p>Server-side code injection vulnerabilities arise when an application incorporates user-controllable data into a string that is dynamically evaluated by a code interpreter. If the user data is not strictly validated, an attacker can use crafted input to modify the code to be executed, and inject arbitrary code that will be executed by the server.<br />Server-side code injection vulnerabilities are usually very serious and lead to complete compromise of the application's data and functionality, and often of the server that is hosting the application. It may also be possible to use the server as a platform for further attacks against other systems.</p>","doc_type":"flaw","doc_version":"1.60.8","exhibits":[],"flaw_id":3263747540,"last_update":1746021199678,"reopenedAt":null,"report_id":643025423,"report_name":"HQ Internal Penetration Test","sev":1,"severity":"High","severity_key":1,"source":"PTrac","status":"Closed","title":"Ruby code injection","visibility":"published","closedAt":1705499804175,"fields":{},"jiraIssue":null,"recommendations":"<p>Whenever possible, applications should avoid incorporating user-controllable data into dynamically evaluated code. In almost every situation, there are safer alternative methods of implementing application functions, which cannot be manipulated to inject arbitrary code into the server's processing.<br />If it is considered unavoidable to incorporate user-supplied data into dynamically evaluated code, then the data should be strictly validated. Ideally, a whitelist of specific accepted values should be used. Otherwise, only short alphanumeric strings should be accepted. Input containing any other data, including any conceivable code metacharacters, should be rejected.</p>","references":"<ul><li>CWE-94: Improper Control of Generation of Code ('Code Injection')(https://cwe.mitre.org/data/definitions/94.html)</li><li>CWE-95: Improper Neutralization of Directives in Dynamically Evaluated Code ('Eval Injection')(https://cwe.mitre.org/data/definitions/95.html)</li><li>CWE-116: Improper Encoding or Escaping of Output(https://cwe.mitre.org/data/definitions/116.html)</li></ul>","selectedScore":null,"serviceNowTicket":null,"scores":{},"subStatus":"remediated","tags":[],"tenant_id":0,"hackerOneData":null,"snykData":null,"edgescanData":null,"integrationData":null,"calculated_severity":false,"reportedAt":1740114000000,"finding_id":null,"cuid":"cma3zphka00rc0hp7dmuf1en8"},{"id":3298425454,"doc_id":[59013,643025423],"data":[3298425454,"High","File path traversal","Closed",1746021199678,null,1740114000000,1728914099562,null,null,"published"],"affected_assets":{},"assignedTo":null,"client_id":59013,"client_name":"Crimson Nexus Ventures","code_samples":[],"createdAt":1740114000000,"description":"<p>File path traversal vulnerabilities arise when user-controllable data is used within a filesystem operation in an unsafe manner. Typically, a user-supplied filename is appended to a directory prefix in order to read or write the contents of a file. If vulnerable, an attacker can supply path traversal sequences (using dot-dot-slash characters) to break out of the intended directory and read or write files elsewhere on the filesystem.<br />This is typically a very serious vulnerability, enabling an attacker to access sensitive files containing configuration data, passwords, database records, log data, source code, and program scripts and binaries.</p>","doc_type":"flaw","doc_version":"1.60.8","exhibits":[],"flaw_id":3298425454,"last_update":1746021199678,"reopenedAt":null,"report_id":643025423,"report_name":"HQ Internal Penetration Test","sev":1,"severity":"High","severity_key":1,"source":"PTrac","status":"Closed","title":"File path traversal","visibility":"published","closedAt":1728914099562,"fields":{},"jiraIssue":null,"recommendations":"<p>Ideally, application functionality should be designed in such a way that user-controllable data does not need to be passed to filesystem operations. This can normally be achieved by referencing known files via an index number rather than their name, and using application-generated filenames to save user-supplied file content.<br />If it is considered unavoidable to pass user-controllable data to a filesystem operation, three layers of defense can be employed to prevent path traversal attacks:<br />User-controllable data should be strictly validated before being passed to any filesystem operation. In particular, input containing dot-dot sequences should be blocked.<br />After validating user input, the application can use a suitable filesystem API to verify that the file to be accessed is actually located within the base directory used by the application. In Java, this can be achieved by instantiating a java.io.File object using the user-supplied filename and then calling the getCanonicalPath method on this object. If the string returned by this method does not begin with the name of the start directory, then the user has somehow bypassed the application's input filters, and the request should be rejected. In ASP.NET, the same check can be performed by passing the user-supplied filename to the System.Io.Path.GetFullPath method and checking the returned string in the same way as described for Java.<br />The directory used to store files that are accessed using user-controllable data can be located on a separate logical volume to other sensitive application and operating system files, so that these cannot be reached via path traversal attacks. In Unix-based systems, this can be achieved using a chrooted filesystem; on Windows, this can be achieved by mounting the base directory as a new logical drive and using the associated drive letter to access its contents.</p>","references":"<ul><li>CWE-22: Improper Limitation of a Pathname to a Restricted Directory ('Path Traversal')(https://cwe.mitre.org/data/definitions/22.html)</li><li>CWE-23: Relative Path Traversal(https://cwe.mitre.org/data/definitions/23.html)</li><li>CWE-35: Path Traversal: '…/…//'(https://cwe.mitre.org/data/definitions/35.html)</li><li>CWE-36: Absolute Path Traversal(https://cwe.mitre.org/data/definitions/36.html)</li></ul>","selectedScore":null,"serviceNowTicket":null,"scores":{},"subStatus":"remediated","tags":[],"tenant_id":0,"hackerOneData":null,"snykData":null,"edgescanData":null,"integrationData":null,"calculated_severity":false,"reportedAt":1740114000000,"finding_id":null,"cuid":"cma3zphkn00rd0hp74qua1vo5"},{"id":3406286823,"doc_id":[59013,643025423],"data":[3406286823,"High","Cross-site scripting (reflected DOM-based)","Closed",1746021199678,null,1740114000000,1705499804175,null,null,"published"],"affected_assets":{},"assignedTo":null,"client_id":59013,"client_name":"Crimson Nexus Ventures","code_samples":[],"createdAt":1740114000000,"description":"<p>Reflected DOM-based vulnerabilities arise when data is copied from a request and echoed into the application's immediate response within a part of the DOM that is then processed in an unsafe way by a client-side script. An attacker can leverage the reflection to control a part of the response (for example, a JavaScript string) that can be used to trigger the DOM-based vulnerability.<br />DOM-based cross-site scripting arises when a script  writes controllable data into the HTML document in an unsafe way. An attacker may be able to use the vulnerability to construct a URL that, if visited by another application user, will cause JavaScript code supplied by the attacker to execute within the user's browser in the context of that user's session with the application.<br />The attacker-supplied code can perform a wide variety of actions, such as stealing the victim's session token or login credentials, performing arbitrary actions on the victim's behalf, and logging their keystrokes.<br />Users can be induced to visit the attacker's crafted URL in various ways, similar to the usual attack delivery vectors for reflected cross-site scripting vulnerabilities.<br />Burp Suite automatically identifies this issue using static code analysis, which may lead to false positives that are not actually exploitable. The relevant code and execution paths should be reviewed to determine whether this vulnerability is indeed present, or whether mitigations are in place that would prevent exploitation.</p>","doc_type":"flaw","doc_version":"1.60.8","exhibits":[],"flaw_id":3406286823,"last_update":1746021199678,"reopenedAt":null,"report_id":643025423,"report_name":"HQ Internal Penetration Test","sev":1,"severity":"High","severity_key":1,"source":"PTrac","status":"Closed","title":"Cross-site scripting (reflected DOM-based)","visibility":"published","closedAt":1705499804175,"fields":{},"jiraIssue":null,"recommendations":"<p>The most effective way to avoid DOM-based cross-site scripting vulnerabilities is not to dynamically write data from any untrusted source into the HTML document. If the desired functionality of the application means that this behavior is unavoidable, then defenses must be implemented within the client-side code to prevent malicious data from introducing script code into the document. In many cases, the relevant data can be validated on a whitelist basis, to allow only content that is known to be safe. In other cases, it will be necessary to sanitize or encode the data. This can be a complex task, and depending on the context that the data is to be inserted may need to involve a combination of JavaScript escaping, HTML encoding, and URL encoding, in the appropriate sequence.</p>","references":"<ul><li>CWE-79: Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')(https://cwe.mitre.org/data/definitions/79.html)</li><li>CWE-80: Improper Neutralization of Script-Related HTML Tags in a Web Page (Basic XSS)(https://cwe.mitre.org/data/definitions/80.html)</li><li>CWE-116: Improper Encoding or Escaping of Output(https://cwe.mitre.org/data/definitions/116.html)</li><li>CWE-159: Failure to Sanitize Special Element(https://cwe.mitre.org/data/definitions/159.html)</li></ul>","selectedScore":null,"serviceNowTicket":null,"scores":{},"subStatus":"remediated","tags":[],"tenant_id":0,"hackerOneData":null,"snykData":null,"edgescanData":null,"integrationData":null,"calculated_severity":false,"reportedAt":1740114000000,"finding_id":null,"cuid":"cma3zphl200re0hp7312p70k5"},{"id":3549559769,"doc_id":[59013,643025423],"data":[3549559769,"High","OS command injection","Closed",1746021199678,null,1740114000000,1705499804175,null,null,"published"],"affected_assets":{},"assignedTo":null,"client_id":59013,"client_name":"Crimson Nexus Ventures","code_samples":[],"createdAt":1740114000000,"description":"<p>Operating system command injection vulnerabilities arise when an application incorporates user-controllable data into a command that is processed by a shell command interpreter. If the user data is not strictly validated, an attacker can use shell metacharacters to modify the command that is executed, and inject arbitrary further commands that will be executed by the server.<br />OS command injection vulnerabilities are usually very serious and may lead to compromise of the server hosting the application, or of the application's own data and functionality. It may also be possible to use the server as a platform for attacks against other systems. The exact potential for exploitation depends upon the security context in which the command is executed, and the privileges that this context has regarding sensitive resources on the server.</p>","doc_type":"flaw","doc_version":"1.60.8","exhibits":[],"flaw_id":3549559769,"last_update":1746021199678,"reopenedAt":null,"report_id":643025423,"report_name":"HQ Internal Penetration Test","sev":1,"severity":"High","severity_key":1,"source":"PTrac","status":"Closed","title":"OS command injection","visibility":"published","closedAt":1705499804175,"fields":{},"jiraIssue":null,"recommendations":"<p>If possible, applications should avoid incorporating user-controllable data into operating system commands. In almost every situation, there are safer alternative methods of performing server-level tasks, which cannot be manipulated to perform additional commands than the one intended.<br />If it is considered unavoidable to incorporate user-supplied data into operating system commands, the following two layers of defense should be used to prevent attacks:<br />The user data should be strictly validated. Ideally, a whitelist of specific accepted values should be used. Otherwise, only short alphanumeric strings should be accepted. Input containing any other data, including any conceivable shell metacharacter or whitespace, should be rejected.<br />The application should use command APIs that launch a specific process via its name and command-line parameters, rather than passing a command string to a shell interpreter that supports command chaining and redirection. For example, the Java API Runtime.exec and the ASP.NET API Process.Start do not support shell metacharacters. This defense can mitigate the impact of an attack even in the event that an attacker circumvents the input validation defenses.</p>","references":"<ul><li>CWE-77: Improper Neutralization of Special Elements used in a Command ('Command Injection')(https://cwe.mitre.org/data/definitions/77.html)</li><li>CWE-78: Improper Neutralization of Special Elements used in an OS Command ('OS Command Injection')(https://cwe.mitre.org/data/definitions/78.html)</li><li>CWE-116: Improper Encoding or Escaping of Output(https://cwe.mitre.org/data/definitions/116.html)</li></ul>","selectedScore":null,"serviceNowTicket":null,"scores":{},"subStatus":"remediated","tags":[],"tenant_id":0,"hackerOneData":null,"snykData":null,"edgescanData":null,"integrationData":null,"calculated_severity":false,"reportedAt":1740114000000,"finding_id":null,"cuid":"cma3zphlf00rf0hp77vj6c1lr"},{"id":3594517888,"doc_id":[59013,643025423],"data":[3594517888,"High","Local file path manipulation (reflected DOM-based)","Closed",1746021199678,null,1740114000000,1705499804175,null,null,"published"],"affected_assets":{},"assignedTo":null,"client_id":59013,"client_name":"Crimson Nexus Ventures","code_samples":[],"createdAt":1740114000000,"description":"<p>Reflected DOM-based vulnerabilities arise when data is copied from a request and echoed into the application's immediate response within a part of the DOM that is then processed in an unsafe way by a client-side script. An attacker can leverage the reflection to control a part of the response (for example, a JavaScript string) that can be used to trigger the DOM-based vulnerability.<br />Local file path manipulation  arises when a script uses controllable data as the filename parameter to a file handling API. An attacker may be able to use the vulnerability to construct a URL that, if visited by another application user, will cause the user's browser to open an arbitrary local file.<br />The potential impact of the vulnerability depends on the application's usage of the opened file. If the application reads data from the file, then the attacker may be able to retrieve this data. If the application writes data to the file, then the attacker may be able to write specific data to a sensitive file, such as an operating system configuration file. In both these cases, the actual exploitability of the potential vulnerability may depend on other suitable functionality being present in the application.<br />Burp Suite automatically identifies this issue using static code analysis, which may lead to false positives that are not actually exploitable. The relevant code and execution paths should be reviewed to determine whether this vulnerability is indeed present, or whether mitigations are in place that would prevent exploitation.</p>","doc_type":"flaw","doc_version":"1.60.8","exhibits":[],"flaw_id":3594517888,"last_update":1746021199678,"reopenedAt":null,"report_id":643025423,"report_name":"HQ Internal Penetration Test","sev":1,"severity":"High","severity_key":1,"source":"PTrac","status":"Closed","title":"Local file path manipulation (reflected DOM-based)","visibility":"published","closedAt":1705499804175,"fields":{},"jiraIssue":null,"recommendations":"<p>The most effective way to avoid DOM-based local file path manipulation vulnerabilities is not to dynamically pass a filename to a file handling API using data that originated from any untrusted source. If the desired functionality of the application means that this behavior is unavoidable, then defenses must be implemented within the client-side code to prevent malicious data from accessing arbitrary files. In general, this is best achieved by using a whitelist of permitted filenames, and strictly validating the filename against this list before invoking the file handling API.</p>","references":"<ul><li>CWE-22: Improper Limitation of a Pathname to a Restricted Directory ('Path Traversal')(https://cwe.mitre.org/data/definitions/22.html)</li><li>CWE-73: External Control of File Name or Path(https://cwe.mitre.org/data/definitions/73.html)</li></ul>","selectedScore":null,"serviceNowTicket":null,"scores":{},"subStatus":"remediated","tags":[],"tenant_id":0,"hackerOneData":null,"snykData":null,"edgescanData":null,"integrationData":null,"calculated_severity":false,"reportedAt":1740114000000,"finding_id":null,"cuid":"cma3zphlp00rg0hp752zw86by"},{"id":3716548227,"doc_id":[59013,643025423],"data":[3716548227,"High","Cross-site scripting (reflected)","Closed",1746021199678,null,1740114000000,1705499804175,null,null,"published"],"affected_assets":{},"assignedTo":null,"client_id":59013,"client_name":"Crimson Nexus Ventures","code_samples":[],"createdAt":1740114000000,"description":"<p>Reflected cross-site scripting vulnerabilities arise when data is copied from a request and echoed into the application's immediate response in an unsafe way. An attacker can use the vulnerability to construct a request that, if issued by another application user, will cause JavaScript code supplied by the attacker to execute within the user's browser in the context of that user's session with the application.<br />The attacker-supplied code can perform a wide variety of actions, such as stealing the victim's session token or login credentials, performing arbitrary actions on the victim's behalf, and logging their keystrokes.<br />Users can be induced to issue the attacker's crafted request in various ways. For example, the attacker can send a victim a link containing a malicious URL in an email or instant message. They can submit the link to popular web sites that allow content authoring, for example in blog comments. And they can create an innocuous looking web site that causes anyone viewing it to make arbitrary cross-domain requests to the vulnerable application (using either the GET or the POST method).<br />The security impact of cross-site scripting vulnerabilities is dependent upon the nature of the vulnerable application, the kinds of data and functionality that it contains, and the other applications that belong to the same domain and organization. If the application is used only to display non-sensitive public content, with no authentication or access control functionality, then a cross-site scripting flaw may be considered low risk. However, if the same application resides on a domain that can access cookies for other more security-critical applications, then the vulnerability could be used to attack those other applications, and so may be considered high risk. Similarly, if the organization that owns the application is a likely target for phishing attacks, then the vulnerability could be leveraged to lend credibility to such attacks, by injecting Trojan functionality into the vulnerable application and exploiting users' trust in the organization in order to capture credentials for other applications that it owns. In many kinds of application, such as those providing online banking functionality, cross-site scripting should always be considered high risk.</p>","doc_type":"flaw","doc_version":"1.60.8","exhibits":[],"flaw_id":3716548227,"last_update":1746021199678,"reopenedAt":null,"report_id":643025423,"report_name":"HQ Internal Penetration Test","sev":1,"severity":"High","severity_key":1,"source":"PTrac","status":"Closed","title":"Cross-site scripting (reflected)","visibility":"published","closedAt":1705499804175,"fields":{},"jiraIssue":null,"recommendations":"<p>In most situations where user-controllable data is copied into application responses, cross-site scripting attacks can be prevented using two layers of defenses:<br />Input should be validated as strictly as possible on arrival, given the kind of content that it is expected to contain. For example, personal names should consist of alphabetical and a small range of typographical characters, and be relatively short; a year of birth should consist of exactly four numerals; email addresses should match a well-defined regular expression. Input which fails the validation should be rejected, not sanitized.<br />User input should be HTML-encoded at any point where it is copied into application responses. All HTML metacharacters, including &lt; &gt; \" ' and =, should be replaced with the corresponding HTML entities (&lt; &gt; etc).</p><p>In cases where the application's functionality allows users to author content using a restricted subset of HTML tags and attributes (for example, blog comments which allow limited formatting and linking), it is necessary to parse the supplied HTML to validate that it does not use any dangerous syntax; this is a non-trivial task.</p>","references":"<p>Using Burp to Find XSS issues</p><ul><li>CWE-79: Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')(https://cwe.mitre.org/data/definitions/79.html)</li><li>CWE-80: Improper Neutralization of Script-Related HTML Tags in a Web Page (Basic XSS)(https://cwe.mitre.org/data/definitions/80.html)</li><li>CWE-116: Improper Encoding or Escaping of Output(https://cwe.mitre.org/data/definitions/116.html)</li><li>CWE-159: Failure to Sanitize Special Element(https://cwe.mitre.org/data/definitions/159.html)</li></ul>","selectedScore":null,"serviceNowTicket":null,"scores":{},"subStatus":"remediated","tags":[],"tenant_id":0,"hackerOneData":null,"snykData":null,"edgescanData":null,"integrationData":null,"calculated_severity":false,"reportedAt":1740114000000,"finding_id":null,"cuid":"cma3zphm000rh0hp7frgeh886"},{"id":3848628578,"doc_id":[59013,643025423],"data":[3848628578,"High","Cross-site scripting (stored)","Closed",1746021199678,null,1740114000000,1728914099562,null,null,"published"],"affected_assets":{},"assignedTo":null,"client_id":59013,"client_name":"Crimson Nexus Ventures","code_samples":[],"createdAt":1740114000000,"description":"<p>Stored cross-site scripting vulnerabilities arise when user input is stored and later embedded into the application's responses in an unsafe way. An attacker can use the vulnerability to inject malicious JavaScript code into the application, which will execute within the browser of any user who views the relevant application content.<br />The attacker-supplied code can perform a wide variety of actions, such as stealing victims' session tokens or login credentials, performing arbitrary actions on their behalf, and logging their keystrokes.<br />Methods for introducing malicious content include any function where request parameters or headers are processed and stored by the application, and any out-of-band channel whereby data can be introduced into the application's processing space (for example, email messages sent over SMTP that are ultimately rendered within a web mail application).<br />Stored cross-site scripting flaws are typically more serious than reflected vulnerabilities because they do not require a separate delivery mechanism in order to reach target users, and are not hindered by web browsers' XSS filters. Depending on the affected page, ordinary users may be exploited during normal use of the application. In some situations this can be used to create web application worms that spread exponentially and ultimately exploit all active users.<br />Note that automated detection of stored cross-site scripting vulnerabilities cannot reliably determine whether attacks that are persisted within the application can be accessed by any other user, only by authenticated users, or only by the attacker themselves. You should review the functionality in which the vulnerability appears to determine whether the application's behavior can feasibly be used to compromise other application users.</p>","doc_type":"flaw","doc_version":"1.60.8","exhibits":[],"flaw_id":3848628578,"last_update":1746021199678,"reopenedAt":null,"report_id":643025423,"report_name":"HQ Internal Penetration Test","sev":1,"severity":"High","severity_key":1,"source":"PTrac","status":"Closed","title":"Cross-site scripting (stored)","visibility":"published","closedAt":1728914099562,"fields":{},"jiraIssue":null,"recommendations":"<p>In most situations where user-controllable data is copied into application responses, cross-site scripting attacks can be prevented using two layers of defenses:<br />Input should be validated as strictly as possible on arrival, given the kind of content that it is expected to contain. For example, personal names should consist of alphabetical and a small range of typographical characters, and be relatively short; a year of birth should consist of exactly four numerals; email addresses should match a well-defined regular expression. Input which fails the validation should be rejected, not sanitized.<br />User input should be HTML-encoded at any point where it is copied into application responses. All HTML metacharacters, including &lt; &gt; \" ' and =, should be replaced with the corresponding HTML entities (&lt; &gt; etc).</p><p>In cases where the application's functionality allows users to author content using a restricted subset of HTML tags and attributes (for example, blog comments which allow limited formatting and linking), it is necessary to parse the supplied HTML to validate that it does not use any dangerous syntax; this is a non-trivial task.</p>","references":"<p>Using Burp to Find XSS issues</p><ul><li>CWE-79: Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')(https://cwe.mitre.org/data/definitions/79.html)</li><li>CWE-80: Improper Neutralization of Script-Related HTML Tags in a Web Page (Basic XSS)(https://cwe.mitre.org/data/definitions/80.html)</li><li>CWE-116: Improper Encoding or Escaping of Output(https://cwe.mitre.org/data/definitions/116.html)</li><li>CWE-159: Failure to Sanitize Special Element(https://cwe.mitre.org/data/definitions/159.html)</li></ul>","selectedScore":null,"serviceNowTicket":null,"scores":{},"subStatus":"remediated","tags":[],"tenant_id":0,"hackerOneData":null,"snykData":null,"edgescanData":null,"integrationData":null,"calculated_severity":false,"reportedAt":1740114000000,"finding_id":null,"cuid":"cma3zphmc00ri0hp75rh698ot"},{"id":4061125791,"doc_id":[59013,643025423],"data":[4061125791,"High","Server-side JavaScript code injection","Closed",1746021199678,null,1740114000000,1705499804175,null,null,"published"],"affected_assets":{},"assignedTo":null,"client_id":59013,"client_name":"Crimson Nexus Ventures","code_samples":[],"createdAt":1740114000000,"description":"<p>Server-side code injection vulnerabilities arise when an application incorporates user-controllable data into a string that is dynamically evaluated by a code interpreter. If the user data is not strictly validated, an attacker can use crafted input to modify the code to be executed, and inject arbitrary code that will be executed by the server.<br />Server-side code injection vulnerabilities are usually very serious and lead to complete compromise of the application's data and functionality, and often of the server that is hosting the application. It may also be possible to use the server as a platform for further attacks against other systems.</p>","doc_type":"flaw","doc_version":"1.60.8","exhibits":[],"flaw_id":4061125791,"last_update":1746021199678,"reopenedAt":null,"report_id":643025423,"report_name":"HQ Internal Penetration Test","sev":1,"severity":"High","severity_key":1,"source":"PTrac","status":"Closed","title":"Server-side JavaScript code injection","visibility":"published","closedAt":1705499804175,"fields":{},"jiraIssue":null,"recommendations":"<p>Whenever possible, applications should avoid incorporating user-controllable data into dynamically evaluated code. In almost every situation, there are safer alternative methods of implementing application functions, which cannot be manipulated to inject arbitrary code into the server's processing.<br />If it is considered unavoidable to incorporate user-supplied data into dynamically evaluated code, then the data should be strictly validated. Ideally, a whitelist of specific accepted values should be used. Otherwise, only short alphanumeric strings should be accepted. Input containing any other data, including any conceivable code metacharacters, should be rejected.</p>","references":"<ul><li>CWE-94: Improper Control of Generation of Code ('Code Injection')(https://cwe.mitre.org/data/definitions/94.html)</li><li>CWE-95: Improper Neutralization of Directives in Dynamically Evaluated Code ('Eval Injection')(https://cwe.mitre.org/data/definitions/95.html)</li><li>CWE-116: Improper Encoding or Escaping of Output(https://cwe.mitre.org/data/definitions/116.html)</li></ul>","selectedScore":null,"serviceNowTicket":null,"scores":{},"subStatus":"remediated","tags":[],"tenant_id":0,"hackerOneData":null,"snykData":null,"edgescanData":null,"integrationData":null,"calculated_severity":false,"reportedAt":1740114000000,"finding_id":null,"cuid":"cma3zphmm00rj0hp76d8pbm86"},{"id":58230390,"doc_id":[59013,643025423],"data":[58230390,"Medium","XML entity expansion","Closed",1746021199678,null,1740114000000,1728914099562,null,null,"published"],"affected_assets":{},"assignedTo":null,"client_id":59013,"client_name":"Crimson Nexus Ventures","code_samples":[],"createdAt":1740114000000,"description":"<p>XML entity expansion vulnerabilities arise because the XML specification allows XML documents to define entities that reference other entities defined within the document. If this is done recursively to a significant depth, then the XML parser will consume exponentially increasing amounts of memory and processor resources as each level of recursion is processed. This might result in a denial-of-service condition, causing the entire application to stop functioning.<br />Note: To avoid causing an actual denial-of-service, Burp Suite merely verifies that entities are being recursively expanded to a modest depth. It is possible that reported applications are not actually vulnerable because they are designed to prevent entity expansion beyond a given depth. </p>","doc_type":"flaw","doc_version":"1.60.8","exhibits":[],"flaw_id":58230390,"last_update":1746021199678,"reopenedAt":null,"report_id":643025423,"report_name":"HQ Internal Penetration Test","sev":2,"severity":"Medium","severity_key":2,"source":"PTrac","status":"Closed","title":"XML entity expansion","visibility":"published","closedAt":1728914099562,"fields":{},"jiraIssue":null,"recommendations":"<p>XML entity expansion makes use of the DOCTYPE tag to define the injected entities. XML parsers can usually be configured to disable support for this tag. You should consult the documentation for your XML parsing library to determine how to disable this feature.<br />It may also be possible to use input validation to block input containing a DOCTYPE tag.</p>","references":"<p>CWE-776: Improper Restriction of Recursive Entity References in DTDs ('XML Entity Expansion')</p>","selectedScore":null,"serviceNowTicket":null,"scores":{},"subStatus":"remediated","tags":[],"tenant_id":0,"hackerOneData":null,"snykData":null,"edgescanData":null,"integrationData":null,"calculated_severity":false,"reportedAt":1740114000000,"finding_id":null,"cuid":"cma3zphmv00rk0hp7145ocjw0"},{"id":269910325,"doc_id":[59013,643025423],"data":[269910325,"Medium","XML injection","Closed",1746021199678,null,1740114000000,1705499804175,null,null,"published"],"affected_assets":{},"assignedTo":null,"client_id":59013,"client_name":"Crimson Nexus Ventures","code_samples":[],"createdAt":1740114000000,"description":"<p>XML or SOAP injection vulnerabilities arise when user input is inserted into a server-side XML document or SOAP message in an unsafe way. It may be possible to use XML metacharacters to modify the structure of the resulting XML. Depending on the function in which the XML is used, it may be possible to interfere with the application's logic, to perform unauthorized actions or access sensitive data.<br />This kind of vulnerability can be difficult to detect and exploit remotely; you should review the application's response, and the purpose that the relevant input performs within the application's functionality, to determine whether it is indeed vulnerable.</p>","doc_type":"flaw","doc_version":"1.60.8","exhibits":[],"flaw_id":269910325,"last_update":1746021199678,"reopenedAt":null,"report_id":643025423,"report_name":"HQ Internal Penetration Test","sev":2,"severity":"Medium","severity_key":2,"source":"PTrac","status":"Closed","title":"XML injection","visibility":"published","closedAt":1705499804175,"fields":{},"jiraIssue":null,"recommendations":"<p>The application should validate or sanitize user input before incorporating it into an XML document or SOAP message. It may be possible to block any input containing XML metacharacters such as &lt; and &gt;. Alternatively, these characters can be replaced with the corresponding entities: &lt; and &gt;.</p>","references":"<ul><li>CWE-91: XML Injection (aka Blind XPath Injection)(https://cwe.mitre.org/data/definitions/91.html)</li><li>CWE-116: Improper Encoding or Escaping of Output(https://cwe.mitre.org/data/definitions/116.html)</li><li>CWE-159: Failure to Sanitize Special Element(https://cwe.mitre.org/data/definitions/159.html)</li><li>CWE-611: Improper Restriction of XML External Entity Reference ('XXE')(https://cwe.mitre.org/data/definitions/611.html)</li><li>CWE-776: Improper Restriction of Recursive Entity References in DTDs ('XML Entity Expansion')(https://cwe.mitre.org/data/definitions/776.html)</li></ul>","selectedScore":null,"serviceNowTicket":null,"scores":{},"subStatus":"remediated","tags":[],"tenant_id":0,"hackerOneData":null,"snykData":null,"edgescanData":null,"integrationData":null,"calculated_severity":false,"reportedAt":1740114000000,"finding_id":null,"cuid":"cma3zphn400rl0hp7cc0p6an2"},{"id":376139806,"doc_id":[59013,643025423],"data":[376139806,"Medium","SSL cookie without secure flag set","Closed",1746021199678,null,1740114000000,1705499804175,null,null,"published"],"affected_assets":{},"assignedTo":null,"client_id":59013,"client_name":"Crimson Nexus Ventures","code_samples":[],"createdAt":1740114000000,"description":"<p>If the secure flag is set on a cookie, then browsers will not submit the cookie in any requests that use an unencrypted HTTP connection, thereby preventing the cookie from being trivially intercepted by an attacker monitoring network traffic. If the secure flag is not set, then the cookie will be transmitted in clear-text if the user visits any HTTP URLs within the cookie's scope. An attacker may be able to induce this event by feeding a user suitable links, either directly or via another web site. Even if the domain that issued the cookie does not host any content that is accessed over HTTP, an attacker may be able to use links of the form http://example.com:443/ to perform the same attack.<br />To exploit this vulnerability, an attacker must be suitably positioned to eavesdrop on the victim's network traffic. This scenario typically occurs when a client communicates with the server over an insecure connection such as public Wi-Fi, or a corporate or home network that is shared with a compromised computer. Common defenses such as switched networks are not sufficient to prevent this. An attacker situated in the user's ISP or the application's hosting infrastructure could also perform this attack. Note that an advanced adversary could potentially target any connection made over the Internet's core infrastructure.</p>","doc_type":"flaw","doc_version":"1.60.8","exhibits":[],"flaw_id":376139806,"last_update":1746021199678,"reopenedAt":null,"report_id":643025423,"report_name":"HQ Internal Penetration Test","sev":2,"severity":"Medium","severity_key":2,"source":"PTrac","status":"Closed","title":"SSL cookie without secure flag set","visibility":"published","closedAt":1705499804175,"fields":{},"jiraIssue":null,"recommendations":"<p>The secure flag should be set on all cookies that are used for transmitting sensitive data when accessing content over HTTPS. If cookies are used to transmit session tokens, then areas of the application that are accessed over HTTPS should employ their own session handling mechanism, and the session tokens used should never be transmitted over unencrypted communications.</p>","references":"<p>CWE-614: Sensitive Cookie in HTTPS Session Without 'Secure' Attribute</p>","selectedScore":null,"serviceNowTicket":null,"scores":{},"subStatus":"remediated","tags":[],"tenant_id":0,"hackerOneData":null,"snykData":null,"edgescanData":null,"integrationData":null,"calculated_severity":false,"reportedAt":1740114000000,"finding_id":null,"cuid":"cma3zphne00rm0hp7gg6dgc36"},{"id":943387680,"doc_id":[59013,643025423],"data":[943387680,"Medium","ASP.NET debugging enabled","Closed",1746021199678,null,1740114000000,1705499804175,null,null,"published"],"affected_assets":{},"assignedTo":null,"client_id":59013,"client_name":"Crimson Nexus Ventures","code_samples":[],"createdAt":1740114000000,"description":"<p>ASP.NET allows remote debugging of web applications, if configured to do so. By default, debugging is subject to access control and requires platform-level authentication.<br />If an attacker can successfully start a remote debugging session, this is likely to disclose sensitive information about the web application and supporting infrastructure that may be valuable in formulating targeted attacks against the system.</p>","doc_type":"flaw","doc_version":"1.60.8","exhibits":[],"flaw_id":943387680,"last_update":1746021199678,"reopenedAt":null,"report_id":643025423,"report_name":"HQ Internal Penetration Test","sev":2,"severity":"Medium","severity_key":2,"source":"PTrac","status":"Closed","title":"ASP.NET debugging enabled","visibility":"published","closedAt":1705499804175,"fields":{},"jiraIssue":null,"recommendations":"<p>To disable debugging, open the Web.config file for the application, and find the  element within the  section. Set the debug attribute to \"false\". Note that it is also possible to enable debugging for all applications within the Machine.config file. You should confirm that the debug attribute in the  element has not been set to \"true\" within the Machine.config file.<br />It is strongly recommended that you refer to your platform's documentation relating to this issue, and do not rely solely on the above remediation.</p>","references":"<p>CWE-11: ASP.NET Misconfiguration: Creating Debug Binary</p>","selectedScore":null,"serviceNowTicket":null,"scores":{},"subStatus":"remediated","tags":[],"tenant_id":0,"hackerOneData":null,"snykData":null,"edgescanData":null,"integrationData":null,"calculated_severity":false,"reportedAt":1740114000000,"finding_id":null,"cuid":"cma3zphnp00rn0hp76tbv5aff"},{"id":958969629,"doc_id":[59013,643025423],"data":[958969629,"Medium","Password value set in cookie","Closed",1746021199678,null,1740114000000,1728914099562,null,null,"published"],"affected_assets":{},"assignedTo":null,"client_id":59013,"client_name":"Crimson Nexus Ventures","code_samples":[],"createdAt":1740114000000,"description":"<p>Some applications issue a cookie containing the clear-text value of the password supplied by the user. This behavior increases the risk that users' passwords will be captured by an attacker. Any cookie-stealing vulnerabilities within the application or browser would enable an attacker to steal the user's credentials to the application.<br />Vulnerabilities that result in the disclosure of users' passwords can result in compromises that are extremely difficult to investigate due to obscured audit trails. Even if the application itself only handles non-sensitive information, exposing passwords puts users who have re-used their password elsewhere at risk.</p>","doc_type":"flaw","doc_version":"1.60.8","exhibits":[],"flaw_id":958969629,"last_update":1746021199678,"reopenedAt":null,"report_id":643025423,"report_name":"HQ Internal Penetration Test","sev":2,"severity":"Medium","severity_key":2,"source":"PTrac","status":"Closed","title":"Password value set in cookie","visibility":"published","closedAt":1728914099562,"fields":{},"jiraIssue":null,"recommendations":"<p>Applications should not store user credentials within any client-side mechanism such as cookies.</p>","references":"<p>CWE-287: Improper Authentication</p>","selectedScore":null,"serviceNowTicket":null,"scores":{},"subStatus":"remediated","tags":[],"tenant_id":0,"hackerOneData":null,"snykData":null,"edgescanData":null,"integrationData":null,"calculated_severity":false,"reportedAt":1740114000000,"finding_id":null,"cuid":"cma3zpho300ro0hp71rxfdfc1"},{"id":959356729,"doc_id":[59013,643025423],"data":[959356729,"Medium","Open redirection (stored DOM-based)","Closed",1746021199678,null,1740114000000,1705499804175,null,null,"published"],"affected_assets":{},"assignedTo":null,"client_id":59013,"client_name":"Crimson Nexus Ventures","code_samples":[],"createdAt":1740114000000,"description":"<p>Stored DOM-based vulnerabilities arise when user input is stored and later embedded into a response within a part of the DOM that is then processed in an unsafe way by a client-side script. An attacker can leverage the data storage to control a part of the response (for example, a JavaScript string) that can be used to trigger the DOM-based vulnerability.<br />DOM-based open redirection arises when a script  writes controllable data into the target of a redirection in an unsafe way. An attacker may be able to use the vulnerability to  construct a URL that, if visited by another application user, will cause a redirection to an arbitrary external domain. This behavior can be leveraged to facilitate phishing attacks against users of the application. The ability to use an authentic application URL, targeting the correct domain and with a valid SSL certificate (if SSL is used), lends credibility to the phishing attack because many users, even if they verify these features, will not notice the subsequent redirection to a different domain.<br />Note: If an attacker is able to control the start of the string that is passed to the redirection API, then it may be possible to escalate this vulnerability into a JavaScript injection attack, by using a URL with the javascript: pseudo-protocol to execute arbitrary script code when the URL is processed by the browser. <br />Burp Suite automatically identifies this issue using static code analysis, which may lead to false positives that are not actually exploitable. The relevant code and execution paths should be reviewed to determine whether this vulnerability is indeed present, or whether mitigations are in place that would prevent exploitation.</p>","doc_type":"flaw","doc_version":"1.60.8","exhibits":[],"flaw_id":959356729,"last_update":1746021199678,"reopenedAt":null,"report_id":643025423,"report_name":"HQ Internal Penetration Test","sev":2,"severity":"Medium","severity_key":2,"source":"PTrac","status":"Closed","title":"Open redirection (stored DOM-based)","visibility":"published","closedAt":1705499804175,"fields":{},"jiraIssue":null,"recommendations":"<p>The most effective way to avoid DOM-based open redirection vulnerabilities is not to dynamically set redirection targets using data that originated from any untrusted source. If the desired functionality of the application means that this behavior is unavoidable, then defenses must be implemented within the client-side code to prevent malicious data from introducing an arbitrary URL as a redirection target. In general, this is best achieved by using a whitelist of URLs that are permitted redirection targets, and strictly validating the target against this list before performing the redirection.</p>","references":"<p>CWE-601: URL Redirection to Untrusted Site ('Open Redirect')</p>","selectedScore":null,"serviceNowTicket":null,"scores":{},"subStatus":"remediated","tags":[],"tenant_id":0,"hackerOneData":null,"snykData":null,"edgescanData":null,"integrationData":null,"calculated_severity":false,"reportedAt":1740114000000,"finding_id":null,"cuid":"cma3zphoh00rp0hp73yzlcsr0"},{"id":1153810192,"doc_id":[59013,643025423],"data":[1153810192,"Medium","Session token in URL","Closed",1746021199678,null,1740114000000,1728914099562,null,null,"published"],"affected_assets":{},"assignedTo":null,"client_id":59013,"client_name":"Crimson Nexus Ventures","code_samples":[],"createdAt":1740114000000,"description":"<p>Sensitive information within URLs may be logged in various locations, including the user's browser, the web server, and any forward or reverse proxy servers between the two endpoints. URLs may also be displayed on-screen, bookmarked or emailed around by users. They may be disclosed to third parties via the Referer header when any off-site links are followed. Placing session tokens into the URL increases the risk that they will be captured by an attacker.</p>","doc_type":"flaw","doc_version":"1.60.8","exhibits":[],"flaw_id":1153810192,"last_update":1746021199678,"reopenedAt":null,"report_id":643025423,"report_name":"HQ Internal Penetration Test","sev":2,"severity":"Medium","severity_key":2,"source":"PTrac","status":"Closed","title":"Session token in URL","visibility":"published","closedAt":1728914099562,"fields":{},"jiraIssue":null,"recommendations":"<p>Applications should use an alternative mechanism for transmitting session tokens, such as HTTP cookies or hidden fields in forms that are submitted using the POST method.</p>","references":"<ul><li>CWE-200: Information Exposure(https://cwe.mitre.org/data/definitions/200.html)</li><li>CWE-384: Session Fixation(https://cwe.mitre.org/data/definitions/384.html)</li><li>CWE-598: Information Exposure Through Query Strings in GET Request(https://cwe.mitre.org/data/definitions/598.html)</li></ul>","selectedScore":null,"serviceNowTicket":null,"scores":{},"subStatus":"remediated","tags":[],"tenant_id":0,"hackerOneData":null,"snykData":null,"edgescanData":null,"integrationData":null,"calculated_severity":false,"reportedAt":1740114000000,"finding_id":null,"cuid":"cma3zphos00rq0hp7cj4938fg"},{"id":1505344213,"doc_id":[59013,643025423],"data":[1505344213,"Medium","Password returned in later response","Closed",1746021199678,null,1740114000000,1705499804175,null,null,"published"],"affected_assets":{},"assignedTo":null,"client_id":59013,"client_name":"Crimson Nexus Ventures","code_samples":[],"createdAt":1740114000000,"description":"<p>Some applications return passwords submitted to the application in clear form in later responses. This behavior increases the risk that users' passwords will be captured by an attacker. Many types of vulnerability, such as weaknesses in session handling, broken access controls, and cross-site scripting, could enable an attacker to leverage this behavior to retrieve the passwords of other application users. This possibility typically exacerbates the impact of those other vulnerabilities, and in some situations can enable an attacker to quickly compromise the entire application.<br />Vulnerabilities that result in the disclosure of users' passwords can result in compromises that are extremely difficult to investigate due to obscured audit trails. Even if the application itself only handles non-sensitive information, exposing passwords puts users who have re-used their password elsewhere at risk.</p>","doc_type":"flaw","doc_version":"1.60.8","exhibits":[],"flaw_id":1505344213,"last_update":1746021199678,"reopenedAt":null,"report_id":643025423,"report_name":"HQ Internal Penetration Test","sev":2,"severity":"Medium","severity_key":2,"source":"PTrac","status":"Closed","title":"Password returned in later response","visibility":"published","closedAt":1705499804175,"fields":{},"jiraIssue":null,"recommendations":"<p>There is usually no good reason for an application to return users' passwords in its responses. If user impersonation is a business requirement this would be better implemented as a custom function with associated logging.</p>","references":"<p>CWE-204: Response Discrepancy Information Exposure</p>","selectedScore":null,"serviceNowTicket":null,"scores":{},"subStatus":"remediated","tags":[],"tenant_id":0,"hackerOneData":null,"snykData":null,"edgescanData":null,"integrationData":null,"calculated_severity":false,"reportedAt":1740114000000,"finding_id":null,"cuid":"cma3zphp300rr0hp729hwfflf"},{"id":1651353801,"doc_id":[59013,643025423],"data":[1651353801,"Medium","Cross-site request forgery","Closed",1746021199678,null,1740114000000,1705499804175,null,null,"published"],"affected_assets":{},"assignedTo":null,"client_id":59013,"client_name":"Crimson Nexus Ventures","code_samples":[],"createdAt":1740114000000,"description":"<p>Cross-site request forgery (CSRF) vulnerabilities may arise when applications rely solely on HTTP cookies to identify the user that has issued a particular request. Because browsers automatically add cookies to requests regardless of their origin, it may be possible for an attacker to create a malicious web site that forges a cross-domain request to the vulnerable application. For a request to be vulnerable to CSRF, the following conditions must hold:<br />The request can be issued cross-domain, for example using an HTML form. If the request contains non-standard headers or body content, then it may only be issuable from a page that originated on the same domain.<br />The application relies solely on HTTP cookies or Basic Authentication to identify the user that issued the request. If the application places session-related tokens elsewhere within the request, then it may not be vulnerable.<br />The request performs some privileged action within the application, which modifies the application's state based on the identity of the issuing user.<br />The attacker can determine all the parameters required to construct a request that performs the action. If the request contains any values that the attacker cannot determine or predict, then it is not vulnerable.</p>","doc_type":"flaw","doc_version":"1.60.8","exhibits":[],"flaw_id":1651353801,"last_update":1746021199678,"reopenedAt":null,"report_id":643025423,"report_name":"HQ Internal Penetration Test","sev":2,"severity":"Medium","severity_key":2,"source":"PTrac","status":"Closed","title":"Cross-site request forgery","visibility":"published","closedAt":1705499804175,"fields":{},"jiraIssue":null,"recommendations":"<p>The most effective way to protect against CSRF vulnerabilities is to include within relevant requests an additional token that is not transmitted in a cookie: for example, a parameter in a hidden form field. This additional token should contain sufficient entropy, and be generated using a cryptographic random number generator, such that it is not feasible for an attacker to determine or predict the value of any token that was issued to another user. The token should be associated with the user's session, and the application should validate that the correct token is received before performing any action resulting from the request.<br />An alternative approach, which may be easier to implement, is to validate that Host and Referer headers in relevant requests are both present and contain the same domain name. However, this approach is somewhat less robust: historically, quirks in browsers and plugins have often enabled attackers to forge cross-domain requests that manipulate these headers to bypass such defenses.</p>","references":"<ul><li>Using Burp to Test for Cross-Site Request Forgery(https://support.portswigger.net/customer/portal/articles/1965674-using-burp-to-test-for-cross-site-request-forgery-csrf-)</li><li>The Deputies Are Still Confused(https://media.blackhat.com/eu-13/briefings/Lundeen/bh-eu-13-deputies-still-confused-lundeen-wp.pdf)</li></ul><p>CWE-352: Cross-Site Request Forgery (CSRF)</p>","selectedScore":null,"serviceNowTicket":null,"scores":{},"subStatus":"remediated","tags":[],"tenant_id":0,"hackerOneData":null,"snykData":null,"edgescanData":null,"integrationData":null,"calculated_severity":false,"reportedAt":1740114000000,"finding_id":null,"cuid":"cma3zphpb00rs0hp7agb09u9s"},{"id":1763561869,"doc_id":[59013,643025423],"data":[1763561869,"Medium","Document domain manipulation (stored DOM-based)","Closed",1746021199678,null,1740114000000,1728914099562,null,null,"published"],"affected_assets":{},"assignedTo":null,"client_id":59013,"client_name":"Crimson Nexus Ventures","code_samples":[],"createdAt":1740114000000,"description":"<p>Stored DOM-based vulnerabilities arise when user input is stored and later embedded into a response within a part of the DOM that is then processed in an unsafe way by a client-side script. An attacker can leverage the data storage to control a part of the response (for example, a JavaScript string) that can be used to trigger the DOM-based vulnerability.<br />Document domain manipulation arises when a script uses controllable data to set the document.domain property. An attacker may be able to use the vulnerability to construct a URL that, if visited by another application user, will cause the response page to set an arbitrary document.domain value.<br />The document.domain property is used by browsers in their enforcement of the same origin policy. If two pages from different origins explicitly set the same document.domain value, then those two pages can interact in unrestricted ways. If an attacker can cause a page of a targeted application, and another page they control (either directly, or via an XSS-like vulnerability), to set the same document.domain value, then the attacker may be able to fully compromise the targeted application page via the page they already control, with the same possibilities for exploitation as regular cross-site scripting (XSS) vulnerabilities.<br />Browsers generally enforce some restrictions on the values that can be assigned to document.domain, and may prevent the use of completely different values than the actual origin of the page. However, there are two important caveats to this. Firstly, browsers allow the use of child or parent domains, so an attacker may be able to switch the domain of the targeted application page to that of a related application with a weaker security posture. Secondly, some browser quirks enable switching to completely unrelated domains. These caveats mean that the ability to manipulate the document.domain property of a page generally represents a security vulnerability whose severity is not far behind regular XSS.<br />Burp Suite automatically identifies this issue using static code analysis, which may lead to false positives that are not actually exploitable. The relevant code and execution paths should be reviewed to determine whether this vulnerability is indeed present, or whether mitigations are in place that would prevent exploitation.</p>","doc_type":"flaw","doc_version":"1.60.8","exhibits":[],"flaw_id":1763561869,"last_update":1746021199678,"reopenedAt":null,"report_id":643025423,"report_name":"HQ Internal Penetration Test","sev":2,"severity":"Medium","severity_key":2,"source":"PTrac","status":"Closed","title":"Document domain manipulation (stored DOM-based)","visibility":"published","closedAt":1728914099562,"fields":{},"jiraIssue":null,"recommendations":"<p>The most effective way to avoid DOM-based document domain manipulation vulnerabilities is not to dynamically set the document.domain property using data that originated from any untrusted source. If it is necessary to programmatically set the document.domain property from within client-side code, then the application should employ a set list of acceptable values, and assign only from values in that list.</p>","references":"<p>CWE-20: Improper Input Validation</p>","selectedScore":null,"serviceNowTicket":null,"scores":{},"subStatus":"remediated","tags":[],"tenant_id":0,"hackerOneData":null,"snykData":null,"edgescanData":null,"integrationData":null,"calculated_severity":false,"reportedAt":1740114000000,"finding_id":null,"cuid":"cma3zphpk00rt0hp72cpp99e4"},{"id":1926750124,"doc_id":[59013,643025423],"data":[1926750124,"Medium","Open redirection (stored)","Closed",1746021199678,null,1740114000000,1728914099562,null,null,"published"],"affected_assets":{},"assignedTo":null,"client_id":59013,"client_name":"Crimson Nexus Ventures","code_samples":[],"createdAt":1740114000000,"description":"<p>Open redirection vulnerabilities arise when an application incorporates user-controllable data into the target of a redirection in an unsafe way. An attacker can construct a URL within the application that causes a redirection to an arbitrary external domain. This behavior can be leveraged to facilitate phishing attacks against users of the application. The ability to use an authentic application URL, targeting the correct domain and with a valid SSL certificate (if SSL is used), lends credibility to the phishing attack because many users, even if they verify these features, will not notice the subsequent redirection to a different domain.</p>","doc_type":"flaw","doc_version":"1.60.8","exhibits":[],"flaw_id":1926750124,"last_update":1746021199678,"reopenedAt":null,"report_id":643025423,"report_name":"HQ Internal Penetration Test","sev":2,"severity":"Medium","severity_key":2,"source":"PTrac","status":"Closed","title":"Open redirection (stored)","visibility":"published","closedAt":1728914099562,"fields":{},"jiraIssue":null,"recommendations":"<p>If possible, applications should avoid incorporating user-controllable data into redirection targets. In many cases, this behavior can be avoided in two ways:<br />Remove the redirection function from the application, and replace links to it with direct links to the relevant target URLs.<br />Maintain a server-side list of all URLs that are permitted for redirection. Instead of passing the target URL as a parameter to the redirector, pass an index into this list.</p><p>If it is considered unavoidable for the redirection function to receive user-controllable input and incorporate this into the redirection target, one of the following measures should be used to minimize the risk of redirection attacks:<br />The application should use relative URLs in all of its redirects, and the redirection function should strictly validate that the URL received is a relative URL.<br />The application should use URLs relative to the web root for all of its redirects, and the redirection function should validate that the URL received starts with a slash character. It should then prepend http://yourdomainname.com to the URL before issuing the redirect.<br />The application should use absolute URLs for all of its redirects, and the redirection function should verify that the user-supplied URL begins with http://yourdomainname.com/ before issuing the redirect.</p><p>Stored open redirection vulnerabilities arise when the applicable input was submitted in an previous request and stored by the application. This is often more serious than reflected open redirection because an attacker might be able to place persistent input into the application which, when viewed by other users, causes their browser to invisibly redirect to a domain of the attacker's choice.</p>","references":"<ul><li>Using Burp to Test for Open Redirections(https://support.portswigger.net/customer/portal/articles/1965733-Methodology_Testing%20for%20Open%20Redirections.html)</li><li>Fun With Redirects(https://www.owasp.org/images/b/b9/OWASP_Appsec_Research_2010_Redirects_XSLJ_by_Sirdarckcat_and_Thornmaker.pdf)</li></ul><p>CWE-601: URL Redirection to Untrusted Site ('Open Redirect')</p>","selectedScore":null,"serviceNowTicket":null,"scores":{},"subStatus":"remediated","tags":[],"tenant_id":0,"hackerOneData":null,"snykData":null,"edgescanData":null,"integrationData":null,"calculated_severity":false,"reportedAt":1740114000000,"finding_id":null,"cuid":"cma3zphpt00ru0hp73qso0uhu"},{"id":2004606827,"doc_id":[59013,643025423],"data":[2004606827,"Medium","CSS injection (reflected)","Closed",1746021199678,null,1740114000000,1705499804175,null,null,"published"],"affected_assets":{},"assignedTo":null,"client_id":59013,"client_name":"Crimson Nexus Ventures","code_samples":[],"createdAt":1740114000000,"description":"<p>CSS injection vulnerabilities arise when an application imports a style sheet from a user-supplied URL, or embeds user input in CSS blocks without adequate escaping. They are closely related to cross-site scripting (XSS) vulnerabilities but often trickier to exploit.<br />Being able to inject arbitrary CSS into the victim's browser may enable various attacks, including:<br />Executing arbitrary JavaScript using IE's expression() function.<br />Using CSS selectors to read parts of the HTML source, which may include sensitive data such as anti-CSRF tokens.<br />Capturing any sensitive data within the URL query string by making a further style sheet import to a URL on the attacker's domain, and monitoring the incoming Referer header.</p>","doc_type":"flaw","doc_version":"1.60.8","exhibits":[],"flaw_id":2004606827,"last_update":1746021199678,"reopenedAt":null,"report_id":643025423,"report_name":"HQ Internal Penetration Test","sev":2,"severity":"Medium","severity_key":2,"source":"PTrac","status":"Closed","title":"CSS injection (reflected)","visibility":"published","closedAt":1705499804175,"fields":{},"jiraIssue":null,"recommendations":"<p>Ensure that user input is adequately escaped before embedding it in CSS blocks, and consider using a whitelist to prevent loading of arbitrary style sheets.</p>","references":"<ul><li>Malicious CSS(http://blog.portswigger.net/2015/02/prssi.html#badcss)</li><li>Abusing unicode-range of @font-face(http://mksben.l0.cm/2015/10/css-based-attack-abusing-unicode-range.html)</li><li>CWE-73: External Control of File Name or Path(https://cwe.mitre.org/data/definitions/73.html)</li><li>CWE-20: Improper Input Validation(https://cwe.mitre.org/data/definitions/20.html)</li></ul>","selectedScore":null,"serviceNowTicket":null,"scores":{},"subStatus":"remediated","tags":[],"tenant_id":0,"hackerOneData":null,"snykData":null,"edgescanData":null,"integrationData":null,"calculated_severity":false,"reportedAt":1740114000000,"finding_id":null,"cuid":"cma3zphq700rv0hp7904k03kx"},{"id":2078949928,"doc_id":[59013,643025423],"data":[2078949928,"Medium","Document domain manipulation (DOM-based)","Closed",1746021199678,null,1740114000000,1705499804175,null,null,"published"],"affected_assets":{},"assignedTo":null,"client_id":59013,"client_name":"Crimson Nexus Ventures","code_samples":[],"createdAt":1740114000000,"description":"<p>DOM-based vulnerabilities arise when a client-side script reads data from a controllable part of the DOM (for example, the URL) and processes this data in an unsafe way.<br />Document domain manipulation arises when a script uses controllable data to set the document.domain property. An attacker may be able to use the vulnerability to construct a URL that, if visited by another application user, will cause the response page to set an arbitrary document.domain value.<br />The document.domain property is used by browsers in their enforcement of the same origin policy. If two pages from different origins explicitly set the same document.domain value, then those two pages can interact in unrestricted ways. If an attacker can cause a page of a targeted application, and another page they control (either directly, or via an XSS-like vulnerability), to set the same document.domain value, then the attacker may be able to fully compromise the targeted application page via the page they already control, with the same possibilities for exploitation as regular cross-site scripting (XSS) vulnerabilities.<br />Browsers generally enforce some restrictions on the values that can be assigned to document.domain, and may prevent the use of completely different values than the actual origin of the page. However, there are two important caveats to this. Firstly, browsers allow the use of child or parent domains, so an attacker may be able to switch the domain of the targeted application page to that of a related application with a weaker security posture. Secondly, some browser quirks enable switching to completely unrelated domains. These caveats mean that the ability to manipulate the document.domain property of a page generally represents a security vulnerability whose severity is not far behind regular XSS.<br />Burp Suite automatically identifies this issue using static code analysis, which may lead to false positives that are not actually exploitable. The relevant code and execution paths should be reviewed to determine whether this vulnerability is indeed present, or whether mitigations are in place that would prevent exploitation.</p>","doc_type":"flaw","doc_version":"1.60.8","exhibits":[],"flaw_id":2078949928,"last_update":1746021199678,"reopenedAt":null,"report_id":643025423,"report_name":"HQ Internal Penetration Test","sev":2,"severity":"Medium","severity_key":2,"source":"PTrac","status":"Closed","title":"Document domain manipulation (DOM-based)","visibility":"published","closedAt":1705499804175,"fields":{},"jiraIssue":null,"recommendations":"<p>The most effective way to avoid DOM-based document domain manipulation vulnerabilities is not to dynamically set the document.domain property using data that originated from any untrusted source. If it is necessary to programmatically set the document.domain property from within client-side code, then the application should employ a set list of acceptable values, and assign only from values in that list.</p>","references":"<p>CWE-20: Improper Input Validation</p>","selectedScore":null,"serviceNowTicket":null,"scores":{},"subStatus":"remediated","tags":[],"tenant_id":0,"hackerOneData":null,"snykData":null,"edgescanData":null,"integrationData":null,"calculated_severity":false,"reportedAt":1740114000000,"finding_id":null,"cuid":"cma3zphql00rw0hp77xx20aun"},{"id":2154670940,"doc_id":[59013,643025423],"data":[2154670940,"Medium","SQL statement in request parameter","Closed",1746021199678,null,1740114000000,1728914099562,null,null,"published"],"affected_assets":{},"assignedTo":null,"client_id":59013,"client_name":"Crimson Nexus Ventures","code_samples":[],"createdAt":1740114000000,"description":"<p>HTTP requests sometimes contain SQL syntax. If this is incorporated into a SQL query and executed by the server, then the application is almost certainly vulnerable to SQL injection.<br />When SQL-like syntax is observed, you should verify whether the request contains a genuine SQL query and whether this is being executed by the server.</p>","doc_type":"flaw","doc_version":"1.60.8","exhibits":[],"flaw_id":2154670940,"last_update":1746021199678,"reopenedAt":null,"report_id":643025423,"report_name":"HQ Internal Penetration Test","sev":2,"severity":"Medium","severity_key":2,"source":"PTrac","status":"Closed","title":"SQL statement in request parameter","visibility":"published","closedAt":1728914099562,"fields":{},"jiraIssue":null,"recommendations":"<p>Applications should not incorporate any user-controllable data directly into SQL queries. Parameterized queries (also known as prepared statements) should be used to safely insert data into predefined queries. In no circumstances should users be able to control or modify the structure of the SQL query itself.</p>","references":"<ul><li>Using Burp to Test for Injection Flaws(https://support.portswigger.net/customer/portal/articles/1965677-using-burp-to-test-for-injection-flaws)</li><li>SQL Injection Cheat Sheet(http://websec.ca/kb/sql_injection)</li><li>SQL Injection Prevention Cheat Sheet(https://www.owasp.org/index.php/SQL_Injection_Prevention_Cheat_Sheet)</li></ul><p>CWE-598: Information Exposure Through Query Strings in GET Request</p>","selectedScore":null,"serviceNowTicket":null,"scores":{},"subStatus":"remediated","tags":[],"tenant_id":0,"hackerOneData":null,"snykData":null,"edgescanData":null,"integrationData":null,"calculated_severity":false,"reportedAt":1740114000000,"finding_id":null,"cuid":"cma3zphqw00rx0hp72rl9cm5q"},{"id":2247708903,"doc_id":[59013,643025423],"data":[2247708903,"Medium","Form action hijacking (stored)","Closed",1746021199678,null,1740114000000,1728914099562,null,null,"published"],"affected_assets":{},"assignedTo":null,"client_id":59013,"client_name":"Crimson Nexus Ventures","code_samples":[],"createdAt":1740114000000,"description":"<p>Form action hijacking vulnerabilities arise when an application places user-supplied input into the action URL of an HTML form. An attacker can use this vulnerability to construct a URL that, if visited by another application user, will modify the action URL of a form to point to the attacker's server. If a user submits the form then its contents, including any input from the victim user, will be delivered directly to the attacker.<br />Even if the user doesn't enter any sensitive information, the form may still deliver a valid CSRF token to the attacker, enabling them to perform CSRF attacks. In some cases web browsers may help exacerbate this issue by autocompleting forms with previously entered user input.<br />Stored form action hijacking vulnerabilities arise when the applicable input was submitted in an previous request and stored by the application.</p>","doc_type":"flaw","doc_version":"1.60.8","exhibits":[],"flaw_id":2247708903,"last_update":1746021199678,"reopenedAt":null,"report_id":643025423,"report_name":"HQ Internal Penetration Test","sev":2,"severity":"Medium","severity_key":2,"source":"PTrac","status":"Closed","title":"Form action hijacking (stored)","visibility":"published","closedAt":1728914099562,"fields":{},"jiraIssue":null,"recommendations":"<p>Consider hard-coding the form action URL, or implementing a whitelist of allowed values.</p>","references":"<ul><li>CWE-73: External Control of File Name or Path(https://cwe.mitre.org/data/definitions/73.html)</li><li>CWE-20: Improper Input Validation(https://cwe.mitre.org/data/definitions/20.html)</li></ul>","selectedScore":null,"serviceNowTicket":null,"scores":{},"subStatus":"remediated","tags":[],"tenant_id":0,"hackerOneData":null,"snykData":null,"edgescanData":null,"integrationData":null,"calculated_severity":false,"reportedAt":1740114000000,"finding_id":null,"cuid":"cma3zphr600ry0hp7ao0f9yqf"},{"id":2375688913,"doc_id":[59013,643025423],"data":[2375688913,"Medium","SMTP header injection","Closed",1746021199678,null,1740114000000,1705499804175,null,null,"published"],"affected_assets":{},"assignedTo":null,"client_id":59013,"client_name":"Crimson Nexus Ventures","code_samples":[],"createdAt":1740114000000,"description":"<p>SMTP header injection vulnerabilities arise when user input is placed into email headers without adequate sanitization, allowing an attacker to inject additional headers with arbitrary values. This behavior can be exploited to send copies of emails to third parties, attach viruses, deliver phishing attacks, and often alter the content of emails. It is typically exploited by spammers looking to leverage the vulnerable company's reputation to add legitimacy to their emails.<br />This issue is particularly serious if the email contains sensitive information not intended for the attacker, such as a password reset token.</p>","doc_type":"flaw","doc_version":"1.60.8","exhibits":[],"flaw_id":2375688913,"last_update":1746021199678,"reopenedAt":null,"report_id":643025423,"report_name":"HQ Internal Penetration Test","sev":2,"severity":"Medium","severity_key":2,"source":"PTrac","status":"Closed","title":"SMTP header injection","visibility":"published","closedAt":1705499804175,"fields":{},"jiraIssue":null,"recommendations":"<p>Validate that user input conforms to a whitelist of safe characters before placing it into email headers. In particular, input containing newlines and carriage returns should be rejected. Alternatively, consider switching to an email library that automatically prevents such attacks.</p>","references":"<p>Burp Collaborator</p><ul><li>CWE-93: Improper Neutralization of CRLF Sequences ('CRLF Injection')(https://cwe.mitre.org/data/definitions/93.html)</li><li>CWE-159: Failure to Sanitize Special Element(https://cwe.mitre.org/data/definitions/159.html)</li></ul>","selectedScore":null,"serviceNowTicket":null,"scores":{},"subStatus":"remediated","tags":[],"tenant_id":0,"hackerOneData":null,"snykData":null,"edgescanData":null,"integrationData":null,"calculated_severity":false,"reportedAt":1740114000000,"finding_id":null,"cuid":"cma3zphrk00rz0hp7epfybxxt"},{"id":3205298713,"doc_id":[59013,643025423],"data":[3205298713,"Medium","CSS injection (stored)","Closed",1746021199678,null,1740114000000,1705499804175,null,null,"published"],"affected_assets":{},"assignedTo":null,"client_id":59013,"client_name":"Crimson Nexus Ventures","code_samples":[],"createdAt":1740114000000,"description":"<p>CSS injection vulnerabilities arise when an application imports a style sheet from a user-supplied URL, or embeds user input in CSS blocks without adequate escaping. They are closely related to cross-site scripting (XSS) vulnerabilities but often trickier to exploit.<br />Being able to inject arbitrary CSS into the victim's browser may enable various attacks, including:<br />Executing arbitrary JavaScript using IE's expression() function.<br />Using CSS selectors to read parts of the HTML source, which may include sensitive data such as anti-CSRF tokens.<br />Capturing any sensitive data within the URL query string by making a further style sheet import to a URL on the attacker's domain, and monitoring the incoming Referer header.</p><p>Stored CSS injection vulnerabilities arise when the applicable input was submitted in an previous request and stored by the application.</p>","doc_type":"flaw","doc_version":"1.60.8","exhibits":[],"flaw_id":3205298713,"last_update":1746021199678,"reopenedAt":null,"report_id":643025423,"report_name":"HQ Internal Penetration Test","sev":2,"severity":"Medium","severity_key":2,"source":"PTrac","status":"Closed","title":"CSS injection (stored)","visibility":"published","closedAt":1705499804175,"fields":{},"jiraIssue":null,"recommendations":"<p>Ensure that user input is adequately escaped before embedding it in CSS blocks, and consider using a whitelist to prevent loading of arbitrary style sheets.</p>","references":"<ul><li>Malicious CSS(http://blog.portswigger.net/2015/02/prssi.html#badcss)</li><li>Abusing unicode-range of @font-face(http://mksben.l0.cm/2015/10/css-based-attack-abusing-unicode-range.html)</li><li>CWE-73: External Control of File Name or Path(https://cwe.mitre.org/data/definitions/73.html)</li><li>CWE-20: Improper Input Validation(https://cwe.mitre.org/data/definitions/20.html)</li></ul>","selectedScore":null,"serviceNowTicket":null,"scores":{},"subStatus":"remediated","tags":[],"tenant_id":0,"hackerOneData":null,"snykData":null,"edgescanData":null,"integrationData":null,"calculated_severity":false,"reportedAt":1740114000000,"finding_id":null,"cuid":"cma3zphrw00s00hp7baz3b1c5"},{"id":3449219831,"doc_id":[59013,643025423],"data":[3449219831,"Medium","Database connection string disclosed","Closed",1746021199678,null,1740114000000,1728914099562,null,null,"published"],"affected_assets":{},"assignedTo":null,"client_id":59013,"client_name":"Crimson Nexus Ventures","code_samples":[],"createdAt":1740114000000,"description":"<p>A database connection string specifies information about a data source and the means of connecting to it. In web applications, connection strings are generally used by the application tier to connect to the back database used for storing application data. They are usually read from server-side configuration files or hard-coded into application source code.</p>","doc_type":"flaw","doc_version":"1.60.8","exhibits":[],"flaw_id":3449219831,"last_update":1746021199678,"reopenedAt":null,"report_id":643025423,"report_name":"HQ Internal Penetration Test","sev":2,"severity":"Medium","severity_key":2,"source":"PTrac","status":"Closed","title":"Database connection string disclosed","visibility":"published","closedAt":1728914099562,"fields":{},"jiraIssue":null,"recommendations":"<p>It is almost never necessary for applications to disclose database connection strings to clients. The reason for the disclosure should be reviewed and addressed.</p>","references":"<ul><li>CWE-15: External Control of System or Configuration Setting(https://cwe.mitre.org/data/definitions/15.html)</li><li>CWE-497: Exposure of System Data to an Unauthorized Control Sphere(https://cwe.mitre.org/data/definitions/497.html)</li></ul>","selectedScore":null,"serviceNowTicket":null,"scores":{},"subStatus":"remediated","tags":[],"tenant_id":0,"hackerOneData":null,"snykData":null,"edgescanData":null,"integrationData":null,"calculated_severity":false,"reportedAt":1740114000000,"finding_id":null,"cuid":"cma3zphs700s10hp7faja89i6"},{"id":3951700585,"doc_id":[59013,643025423],"data":[3951700585,"Medium","SSL certificate","Closed",1746021199678,null,1740114000000,1728914099562,null,null,"published"],"affected_assets":{},"assignedTo":null,"client_id":59013,"client_name":"Crimson Nexus Ventures","code_samples":[],"createdAt":1740114000000,"description":"<p>SSL (or TLS) helps to protect the confidentiality and integrity of information in transit between the browser and server, and to provide authentication of the server's identity. To serve this purpose, the server must present an SSL certificate that is valid for the server's hostname, is issued by a trusted authority and is valid for the current date. If any one of these requirements is not met, SSL connections to the server will not provide the full protection for which SSL is designed.<br />It should be noted that various attacks exist against SSL in general, and in the context of HTTPS web connections in particular. It may be possible for a determined and suitably-positioned attacker to compromise SSL connections without user detection even when a valid SSL certificate is used.</p>","doc_type":"flaw","doc_version":"1.60.8","exhibits":[],"flaw_id":3951700585,"last_update":1746021199678,"reopenedAt":null,"report_id":643025423,"report_name":"HQ Internal Penetration Test","sev":2,"severity":"Medium","severity_key":2,"source":"PTrac","status":"Closed","title":"SSL certificate","visibility":"published","closedAt":1728914099562,"fields":{},"jiraIssue":null,"recommendations":"","references":"<p>SSL/TLS Configuration Guide</p><ul><li>CWE-295: Improper Certificate Validation(https://cwe.mitre.org/data/definitions/295.html)</li><li>CWE-326: Inadequate Encryption Strength(https://cwe.mitre.org/data/definitions/326.html)</li><li>CWE-327: Use of a Broken or Risky Cryptographic Algorithm(https://cwe.mitre.org/data/definitions/327.html)</li></ul>","selectedScore":null,"serviceNowTicket":null,"scores":{},"subStatus":"remediated","tags":[],"tenant_id":0,"hackerOneData":null,"snykData":null,"edgescanData":null,"integrationData":null,"calculated_severity":false,"reportedAt":1740114000000,"finding_id":null,"cuid":"cma3zphsj00s20hp7cl1t344k"},{"id":3959662988,"doc_id":[59013,643025423],"data":[3959662988,"Medium","Form action hijacking (reflected)","Closed",1746021199678,null,1740114000000,1705499804175,null,null,"published"],"affected_assets":{},"assignedTo":null,"client_id":59013,"client_name":"Crimson Nexus Ventures","code_samples":[],"createdAt":1740114000000,"description":"<p>Form action hijacking vulnerabilities arise when an application places user-supplied input into the action URL of an HTML form. An attacker can use this vulnerability to construct a URL that, if visited by another application user, will modify the action URL of a form to point to the attacker's server. If a user submits the form then its contents, including any input from the victim user, will be delivered directly to the attacker.<br />Even if the user doesn't enter any sensitive information, the form may still deliver a valid CSRF token to the attacker, enabling them to perform CSRF attacks. In some cases web browsers may help exacerbate this issue by autocompleting forms with previously entered user input.</p>","doc_type":"flaw","doc_version":"1.60.8","exhibits":[],"flaw_id":3959662988,"last_update":1746021199678,"reopenedAt":null,"report_id":643025423,"report_name":"HQ Internal Penetration Test","sev":2,"severity":"Medium","severity_key":2,"source":"PTrac","status":"Closed","title":"Form action hijacking (reflected)","visibility":"published","closedAt":1705499804175,"fields":{},"jiraIssue":null,"recommendations":"<p>Consider hard-coding the form action URL, or implementing a whitelist of allowed values.</p>","references":"<ul><li>CWE-73: External Control of File Name or Path(https://cwe.mitre.org/data/definitions/73.html)</li><li>CWE-20: Improper Input Validation(https://cwe.mitre.org/data/definitions/20.html)</li></ul>","selectedScore":null,"serviceNowTicket":null,"scores":{},"subStatus":"remediated","tags":[],"tenant_id":0,"hackerOneData":null,"snykData":null,"edgescanData":null,"integrationData":null,"calculated_severity":false,"reportedAt":1740114000000,"finding_id":null,"cuid":"cma3zphsu00s30hp70xv80y5v"},{"id":4105106680,"doc_id":[59013,643025423],"data":[4105106680,"Medium","Document domain manipulation (reflected DOM-based)","Closed",1746021199678,null,1740114000000,1705499804175,null,null,"published"],"affected_assets":{},"assignedTo":null,"client_id":59013,"client_name":"Crimson Nexus Ventures","code_samples":[],"createdAt":1740114000000,"description":"<p>Reflected DOM-based vulnerabilities arise when data is copied from a request and echoed into the application's immediate response within a part of the DOM that is then processed in an unsafe way by a client-side script. An attacker can leverage the reflection to control a part of the response (for example, a JavaScript string) that can be used to trigger the DOM-based vulnerability.<br />Document domain manipulation arises when a script uses controllable data to set the document.domain property. An attacker may be able to use the vulnerability to construct a URL that, if visited by another application user, will cause the response page to set an arbitrary document.domain value.<br />The document.domain property is used by browsers in their enforcement of the same origin policy. If two pages from different origins explicitly set the same document.domain value, then those two pages can interact in unrestricted ways. If an attacker can cause a page of a targeted application, and another page they control (either directly, or via an XSS-like vulnerability), to set the same document.domain value, then the attacker may be able to fully compromise the targeted application page via the page they already control, with the same possibilities for exploitation as regular cross-site scripting (XSS) vulnerabilities.<br />Browsers generally enforce some restrictions on the values that can be assigned to document.domain, and may prevent the use of completely different values than the actual origin of the page. However, there are two important caveats to this. Firstly, browsers allow the use of child or parent domains, so an attacker may be able to switch the domain of the targeted application page to that of a related application with a weaker security posture. Secondly, some browser quirks enable switching to completely unrelated domains. These caveats mean that the ability to manipulate the document.domain property of a page generally represents a security vulnerability whose severity is not far behind regular XSS.<br />Burp Suite automatically identifies this issue using static code analysis, which may lead to false positives that are not actually exploitable. The relevant code and execution paths should be reviewed to determine whether this vulnerability is indeed present, or whether mitigations are in place that would prevent exploitation.</p>","doc_type":"flaw","doc_version":"1.60.8","exhibits":[],"flaw_id":4105106680,"last_update":1746021199678,"reopenedAt":null,"report_id":643025423,"report_name":"HQ Internal Penetration Test","sev":2,"severity":"Medium","severity_key":2,"source":"PTrac","status":"Closed","title":"Document domain manipulation (reflected DOM-based)","visibility":"published","closedAt":1705499804175,"fields":{},"jiraIssue":null,"recommendations":"<p>The most effective way to avoid DOM-based document domain manipulation vulnerabilities is not to dynamically set the document.domain property using data that originated from any untrusted source. If it is necessary to programmatically set the document.domain property from within client-side code, then the application should employ a set list of acceptable values, and assign only from values in that list.</p>","references":"<p>CWE-20: Improper Input Validation</p>","selectedScore":null,"serviceNowTicket":null,"scores":{},"subStatus":"remediated","tags":[],"tenant_id":0,"hackerOneData":null,"snykData":null,"edgescanData":null,"integrationData":null,"calculated_severity":false,"reportedAt":1740114000000,"finding_id":null,"cuid":"cma3zpht400s40hp77j70f71p"},{"id":63344040,"doc_id":[59013,643025423],"data":[63344040,"Low","Client-side JSON injection (stored DOM-based)","Closed",1746021199678,null,1740114000000,1705499804175,null,null,"published"],"affected_assets":{},"assignedTo":null,"client_id":59013,"client_name":"Crimson Nexus Ventures","code_samples":[],"createdAt":1740114000000,"description":"<p>Stored DOM-based vulnerabilities arise when user input is stored and later embedded into a response within a part of the DOM that is then processed in an unsafe way by a client-side script. An attacker can leverage the data storage to control a part of the response (for example, a JavaScript string) that can be used to trigger the DOM-based vulnerability.<br />DOM-based JSON injection  arises when a script  incorporates controllable data into a string that is parsed as a JSON data structure and then processed by the application. An attacker may be able to use this behavior to construct a URL that, if visited by another application user, will cause arbitrary JSON data to be processed. Depending on the purpose for which this data is used, it may be possible to subvert the application's logic, or cause unintended actions on behalf of the user.<br />Burp Suite automatically identifies this issue using static code analysis, which may lead to false positives that are not actually exploitable. The relevant code and execution paths should be reviewed to determine whether this vulnerability is indeed present, or whether mitigations are in place that would prevent exploitation.</p>","doc_type":"flaw","doc_version":"1.60.8","exhibits":[],"flaw_id":63344040,"last_update":1746021199678,"reopenedAt":null,"report_id":643025423,"report_name":"HQ Internal Penetration Test","sev":3,"severity":"Low","severity_key":3,"source":"PTrac","status":"Closed","title":"Client-side JSON injection (stored DOM-based)","visibility":"published","closedAt":1705499804175,"fields":{},"jiraIssue":null,"recommendations":"<p>The most effective way to avoid DOM-based JSON injection vulnerabilities is not to parse as JSON any string containing data that originated from an untrusted source. If the desired functionality of the application means that this behavior is unavoidable, then defenses must be implemented within the client-side code to prevent malicious data from modifying the JSON structure in inappropriate ways. This may involve strict validation of specific items to ensure they do not contain any characters that may interfere with the structure of the JSON when it is parsed.</p>","references":"<ul><li>CWE-79: Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')(https://cwe.mitre.org/data/definitions/79.html)</li><li>CWE-116: Improper Encoding or Escaping of Output(https://cwe.mitre.org/data/definitions/116.html)</li><li>CWE-159: Failure to Sanitize Special Element(https://cwe.mitre.org/data/definitions/159.html)</li></ul>","selectedScore":null,"serviceNowTicket":null,"scores":{},"subStatus":"remediated","tags":[],"tenant_id":0,"hackerOneData":null,"snykData":null,"edgescanData":null,"integrationData":null,"calculated_severity":false,"reportedAt":1740114000000,"finding_id":null,"cuid":"cma3zphtg00s50hp71d3qdyut"},{"id":149496624,"doc_id":[59013,643025423],"data":[149496624,"Low","Ajax request header manipulation (stored DOM-based)","Closed",1746021199678,null,1740114000000,1728914099562,null,null,"published"],"affected_assets":{},"assignedTo":null,"client_id":59013,"client_name":"Crimson Nexus Ventures","code_samples":[],"createdAt":1740114000000,"description":"<p>Stored DOM-based vulnerabilities arise when user input is stored and later embedded into a response within a part of the DOM that is then processed in an unsafe way by a client-side script. An attacker can leverage the data storage to control a part of the response (for example, a JavaScript string) that can be used to trigger the DOM-based vulnerability.<br />Ajax request header manipulation  arises when a script writes controllable data into a header of an Ajax request that is issued using XmlHttpRequest. An attacker may be able to use the vulnerability to construct a URL that, if visited by another application user, will set an arbitrary header in the subsequent Ajax request.<br />The potential impact of the vulnerability depends on the role of specific HTTP headers in the server-side application's processing of the Ajax request. If the header is used to control the behavior that results from the Ajax request, then the attacker may be able to cause the user to perform unintended actions by manipulating the header.<br />Burp Suite automatically identifies this issue using static code analysis, which may lead to false positives that are not actually exploitable. The relevant code and execution paths should be reviewed to determine whether this vulnerability is indeed present, or whether mitigations are in place that would prevent exploitation.</p>","doc_type":"flaw","doc_version":"1.60.8","exhibits":[],"flaw_id":149496624,"last_update":1746021199678,"reopenedAt":null,"report_id":643025423,"report_name":"HQ Internal Penetration Test","sev":3,"severity":"Low","severity_key":3,"source":"PTrac","status":"Closed","title":"Ajax request header manipulation (stored DOM-based)","visibility":"published","closedAt":1728914099562,"fields":{},"jiraIssue":null,"recommendations":"<p>The most effective way to avoid DOM-based Ajax request header manipulation vulnerabilities is not to dynamically set Ajax request headers using data that originated from any untrusted source. This behavior should never be implemented for headers that have any role in controlling the effects of privileged actions within the application.</p>","references":"<p>CWE-116: Improper Encoding or Escaping of Output</p>","selectedScore":null,"serviceNowTicket":null,"scores":{},"subStatus":"remediated","tags":[],"tenant_id":0,"hackerOneData":null,"snykData":null,"edgescanData":null,"integrationData":null,"calculated_severity":false,"reportedAt":1740114000000,"finding_id":null,"cuid":"cma3zphtu00s60hp7a4th67hc"},{"id":306189911,"doc_id":[59013,643025423],"data":[306189911,"Low","Cross-origin resource sharing: unencrypted origin trusted","Closed",1746021199678,null,1740114000000,1705499804175,null,null,"published"],"affected_assets":{},"assignedTo":null,"client_id":59013,"client_name":"Crimson Nexus Ventures","code_samples":[],"createdAt":1740114000000,"description":"<p>An HTML5 cross-origin resource sharing (CORS) policy controls whether and how content running on other domains can perform two-way interaction with the domain that publishes the policy. The policy is fine-grained and can apply access controls per-request based on the URL and other features of the request.<br />If a site allows interaction from an origin that uses unencrypted HTTP communications, then it is vulnerable to an attacker who is in a position to view and modify a user's unencrypted network traffic. The attacker can control the responses from unencrypted origins, thereby injecting content that is able to interact with the application that publishes the policy. This means that the application is effectively extending trust to all such attackers, thereby undoing much of the benefit of using HTTPS communications.</p>","doc_type":"flaw","doc_version":"1.60.8","exhibits":[],"flaw_id":306189911,"last_update":1746021199678,"reopenedAt":null,"report_id":643025423,"report_name":"HQ Internal Penetration Test","sev":3,"severity":"Low","severity_key":3,"source":"PTrac","status":"Closed","title":"Cross-origin resource sharing: unencrypted origin trusted","visibility":"published","closedAt":1705499804175,"fields":{},"jiraIssue":null,"recommendations":"<p>Only trust origins that use encrypted HTTPS communications.</p>","references":"<ul><li>Exploiting CORS Misconfigurations(http://blog.portswigger.net/2016/10/exploiting-cors-misconfigurations-for.html)</li></ul><p>CWE-942: Overly Permissive Cross-domain Whitelist</p>","selectedScore":null,"serviceNowTicket":null,"scores":{},"subStatus":"remediated","tags":[],"tenant_id":0,"hackerOneData":null,"snykData":null,"edgescanData":null,"integrationData":null,"calculated_severity":false,"reportedAt":1740114000000,"finding_id":null,"cuid":"cma3zphu600s70hp7hy631p7m"},{"id":307630604,"doc_id":[59013,643025423],"data":[307630604,"Low","ASP.NET ViewState without MAC enabled","Closed",1746021199678,null,1740114000000,1705499804175,null,null,"published"],"affected_assets":{},"assignedTo":null,"client_id":59013,"client_name":"Crimson Nexus Ventures","code_samples":[],"createdAt":1740114000000,"description":"<p>The ViewState is a mechanism built in to the ASP.NET platform for persisting elements of the user interface and other data across successive requests. The data to be persisted is serialized by the server and transmitted via a hidden form field. When it is posted back to the server, the ViewState parameter is deserialized and the data is retrieved.<br />By default, the serialized value is signed by the server to prevent tampering by the user; however, this behavior can be disabled by setting the Page.EnableViewStateMac property to false. If this is done, then an attacker can modify the contents of the ViewState and cause arbitrary data to be deserialized and processed by the server. If the ViewState contains any items that are critical to the server's processing of the request, then this may result in a security exposure.<br />The contents of the deserialized ViewState should be reviewed to determine whether it contains any critical items that can be manipulated to attack the application.</p>","doc_type":"flaw","doc_version":"1.60.8","exhibits":[],"flaw_id":307630604,"last_update":1746021199678,"reopenedAt":null,"report_id":643025423,"report_name":"HQ Internal Penetration Test","sev":3,"severity":"Low","severity_key":3,"source":"PTrac","status":"Closed","title":"ASP.NET ViewState without MAC enabled","visibility":"published","closedAt":1705499804175,"fields":{},"jiraIssue":null,"recommendations":"<p>There is no good reason to disable the default ASP.NET behavior in which the ViewState is signed to prevent tampering. To ensure that this occurs, you should set the Page.EnableViewStateMac property to true on any pages where the ViewState is not currently signed.</p>","references":"<p>CWE-642: External Control of Critical State Data</p>","selectedScore":null,"serviceNowTicket":null,"scores":{},"subStatus":"remediated","tags":[],"tenant_id":0,"hackerOneData":null,"snykData":null,"edgescanData":null,"integrationData":null,"calculated_severity":false,"reportedAt":1740114000000,"finding_id":null,"cuid":"cma3zphuh00s80hp78x5744xo"},{"id":565859376,"doc_id":[59013,643025423],"data":[565859376,"Low","Ajax request header manipulation (DOM-based)","Closed",1746021199678,null,1740114000000,1728914099562,null,null,"published"],"affected_assets":{},"assignedTo":null,"client_id":59013,"client_name":"Crimson Nexus Ventures","code_samples":[],"createdAt":1740114000000,"description":"<p>DOM-based vulnerabilities arise when a client-side script reads data from a controllable part of the DOM (for example, the URL) and processes this data in an unsafe way.<br />Ajax request header manipulation  arises when a script writes controllable data into a header of an Ajax request that is issued using XmlHttpRequest. An attacker may be able to use the vulnerability to construct a URL that, if visited by another application user, will set an arbitrary header in the subsequent Ajax request.<br />The potential impact of the vulnerability depends on the role of specific HTTP headers in the server-side application's processing of the Ajax request. If the header is used to control the behavior that results from the Ajax request, then the attacker may be able to cause the user to perform unintended actions by manipulating the header.<br />Burp Suite automatically identifies this issue using static code analysis, which may lead to false positives that are not actually exploitable. The relevant code and execution paths should be reviewed to determine whether this vulnerability is indeed present, or whether mitigations are in place that would prevent exploitation.</p>","doc_type":"flaw","doc_version":"1.60.8","exhibits":[],"flaw_id":565859376,"last_update":1746021199678,"reopenedAt":null,"report_id":643025423,"report_name":"HQ Internal Penetration Test","sev":3,"severity":"Low","severity_key":3,"source":"PTrac","status":"Closed","title":"Ajax request header manipulation (DOM-based)","visibility":"published","closedAt":1728914099562,"fields":{},"jiraIssue":null,"recommendations":"<p>The most effective way to avoid DOM-based Ajax request header manipulation vulnerabilities is not to dynamically set Ajax request headers using data that originated from any untrusted source. This behavior should never be implemented for headers that have any role in controlling the effects of privileged actions within the application.</p>","references":"<p>CWE-116: Improper Encoding or Escaping of Output</p>","selectedScore":null,"serviceNowTicket":null,"scores":{},"subStatus":"remediated","tags":[],"tenant_id":0,"hackerOneData":null,"snykData":null,"edgescanData":null,"integrationData":null,"calculated_severity":false,"reportedAt":1740114000000,"finding_id":null,"cuid":"cma3zphut00s90hp77vixgs28"},{"id":650364755,"doc_id":[59013,643025423],"data":[650364755,"Low","Client-side HTTP parameter pollution (stored)","Closed",1746021199678,null,1740114000000,1705499804175,null,null,"published"],"affected_assets":{},"assignedTo":null,"client_id":59013,"client_name":"Crimson Nexus Ventures","code_samples":[],"createdAt":1740114000000,"description":"<p>Client-side HTTP parameter pollution (HPP) vulnerabilities arise when an application embeds user input in URLs in an unsafe manner.  An attacker can use this vulnerability to construct a URL that, if visited by another application user, will modify URLs within the response by inserting additional query string parameters and sometimes overriding existing ones. This may result in links and forms having unexpected side effects. For example, it may be possible to modify an invitation form using HPP so that the invitation is delivered to an unexpected recipient.<br />The security impact of this issue depends largely on the nature of the application functionality. Even if it has no direct impact on its own, an attacker may use it in conjunction with other vulnerabilities to escalate their overall severity.<br />Stored client-side HTTP parameter pollution vulnerabilities arise when the applicable input was submitted in an previous request and stored by the application.</p>","doc_type":"flaw","doc_version":"1.60.8","exhibits":[],"flaw_id":650364755,"last_update":1746021199678,"reopenedAt":null,"report_id":643025423,"report_name":"HQ Internal Penetration Test","sev":3,"severity":"Low","severity_key":3,"source":"PTrac","status":"Closed","title":"Client-side HTTP parameter pollution (stored)","visibility":"published","closedAt":1705499804175,"fields":{},"jiraIssue":null,"recommendations":"<p>Ensure that user input is URL-encoded before it is embedded in a URL.</p>","references":"<p>HTTP Parameter Pollution</p><ul><li>CWE-233: Improper Handling of Parameters(https://cwe.mitre.org/data/definitions/233.html)</li><li>CWE-20: Improper Input Validation(https://cwe.mitre.org/data/definitions/20.html)</li></ul>","selectedScore":null,"serviceNowTicket":null,"scores":{},"subStatus":"remediated","tags":[],"tenant_id":0,"hackerOneData":null,"snykData":null,"edgescanData":null,"integrationData":null,"calculated_severity":false,"reportedAt":1740114000000,"finding_id":null,"cuid":"cma3zphv600sa0hp7adi38427"},{"id":667347537,"doc_id":[59013,643025423],"data":[667347537,"Low","Password returned in URL query string","Closed",1746021199678,null,1740114000000,1728914099562,null,null,"published"],"affected_assets":{},"assignedTo":null,"client_id":59013,"client_name":"Crimson Nexus Ventures","code_samples":[],"createdAt":1740114000000,"description":"<p>The application responds to login submissions with a link containing the user's password within the URL query string. Sensitive information within URLs may be logged in various locations, including the user's browser, the web server, and any forward or reverse proxy servers between the two endpoints. URLs may also be displayed on-screen, bookmarked or emailed around by users. They may be disclosed to third parties via the Referer header when any off-site links are followed. Placing passwords into the URL increases the risk that they will be captured by an attacker.<br />Vulnerabilities that result in the disclosure of users' passwords can result in compromises that are extremely difficult to investigate due to obscured audit trails. Even if the application itself only handles non-sensitive information, exposing passwords puts users who have re-used their password elsewhere at risk.</p>","doc_type":"flaw","doc_version":"1.60.8","exhibits":[],"flaw_id":667347537,"last_update":1746021199678,"reopenedAt":null,"report_id":643025423,"report_name":"HQ Internal Penetration Test","sev":3,"severity":"Low","severity_key":3,"source":"PTrac","status":"Closed","title":"Password returned in URL query string","visibility":"published","closedAt":1728914099562,"fields":{},"jiraIssue":null,"recommendations":"<p>The application should never transmit any sensitive information within the URL query string. There is no good reason for a login mechanism to echo passwords back to the user, and the mechanism should be modified to remove this behavior.</p>","references":"<p>CWE-598: Information Exposure Through Query Strings in GET Request</p>","selectedScore":null,"serviceNowTicket":null,"scores":{},"subStatus":"remediated","tags":[],"tenant_id":0,"hackerOneData":null,"snykData":null,"edgescanData":null,"integrationData":null,"calculated_severity":false,"reportedAt":1740114000000,"finding_id":null,"cuid":"cma3zphvk00sb0hp7bbvphvlx"},{"id":739865650,"doc_id":[59013,643025423],"data":[739865650,"Low","Unencrypted communications","Closed",1746021199678,null,1740114000000,1705499804175,null,null,"published"],"affected_assets":{},"assignedTo":null,"client_id":59013,"client_name":"Crimson Nexus Ventures","code_samples":[],"createdAt":1740114000000,"description":"<p>The application allows users to connect to it over unencrypted connections.  An attacker suitably positioned to view a legitimate user's network traffic could record and monitor their interactions with the application and obtain any information the user supplies. Furthermore, an attacker able to modify traffic could use the application as a platform for attacks against its users and third-party websites. Unencrypted connections have been exploited by ISPs and governments to track users, and to inject adverts and malicious JavaScript. Due to these concerns, web browser vendors are planning to visually flag unencrypted connections as hazardous.<br />To exploit this vulnerability, an attacker must be suitably positioned to eavesdrop on the victim's network traffic. This scenario typically occurs when a client communicates with the server over an insecure connection such as public Wi-Fi, or a corporate or home network that is shared with a compromised computer. Common defenses such as switched networks are not sufficient to prevent this. An attacker situated in the user's ISP or the application's hosting infrastructure could also perform this attack. Note that an advanced adversary could potentially target any connection made over the Internet's core infrastructure.<br />Please note that using a mixture of encrypted and unencrypted communications is an ineffective defense against active attackers, because they can easily remove references to encrypted resources when these references are transmitted over an unencrypted connection.</p>","doc_type":"flaw","doc_version":"1.60.8","exhibits":[],"flaw_id":739865650,"last_update":1746021199678,"reopenedAt":null,"report_id":643025423,"report_name":"HQ Internal Penetration Test","sev":3,"severity":"Low","severity_key":3,"source":"PTrac","status":"Closed","title":"Unencrypted communications","visibility":"published","closedAt":1705499804175,"fields":{},"jiraIssue":null,"recommendations":"<p>Applications should use transport-level encryption (SSL/TLS) to protect all communications passing between the client and the server. The Strict-Transport-Security HTTP header should be used to ensure that clients refuse to access the server over an insecure connection.</p>","references":"<ul><li>Marking HTTP as non-secure(https://www.chromium.org/Home/chromium-security/marking-http-as-non-secure)</li><li>Configuring Server-Side SSL/TLS(https://wiki.mozilla.org/Security/Server_Side_TLS)</li><li>HTTP Strict Transport Security(https://developer.mozilla.org/en-US/docs/Web/Security/HTTP_strict_transport_security)</li></ul><p>CWE-326: Inadequate Encryption Strength</p>","selectedScore":null,"serviceNowTicket":null,"scores":{},"subStatus":"remediated","tags":[],"tenant_id":0,"hackerOneData":null,"snykData":null,"edgescanData":null,"integrationData":null,"calculated_severity":false,"reportedAt":1740114000000,"finding_id":null,"cuid":"cma3zphvy00sc0hp78rqi99fs"},{"id":1008233855,"doc_id":[59013,643025423],"data":[1008233855,"Low","Open redirection (DOM-based)","Closed",1746021199678,null,1740114000000,1705499804175,null,null,"published"],"affected_assets":{},"assignedTo":null,"client_id":59013,"client_name":"Crimson Nexus Ventures","code_samples":[],"createdAt":1740114000000,"description":"<p>DOM-based vulnerabilities arise when a client-side script reads data from a controllable part of the DOM (for example, the URL) and processes this data in an unsafe way.<br />DOM-based open redirection arises when a script  writes controllable data into the target of a redirection in an unsafe way. An attacker may be able to use the vulnerability to  construct a URL that, if visited by another application user, will cause a redirection to an arbitrary external domain. This behavior can be leveraged to facilitate phishing attacks against users of the application. The ability to use an authentic application URL, targeting the correct domain and with a valid SSL certificate (if SSL is used), lends credibility to the phishing attack because many users, even if they verify these features, will not notice the subsequent redirection to a different domain.<br />Note: If an attacker is able to control the start of the string that is passed to the redirection API, then it may be possible to escalate this vulnerability into a JavaScript injection attack, by using a URL with the javascript: pseudo-protocol to execute arbitrary script code when the URL is processed by the browser. <br />Burp Suite automatically identifies this issue using static code analysis, which may lead to false positives that are not actually exploitable. The relevant code and execution paths should be reviewed to determine whether this vulnerability is indeed present, or whether mitigations are in place that would prevent exploitation.</p>","doc_type":"flaw","doc_version":"1.60.8","exhibits":[],"flaw_id":1008233855,"last_update":1746021199678,"reopenedAt":null,"report_id":643025423,"report_name":"HQ Internal Penetration Test","sev":3,"severity":"Low","severity_key":3,"source":"PTrac","status":"Closed","title":"Open redirection (DOM-based)","visibility":"published","closedAt":1705499804175,"fields":{},"jiraIssue":null,"recommendations":"<p>The most effective way to avoid DOM-based open redirection vulnerabilities is not to dynamically set redirection targets using data that originated from any untrusted source. If the desired functionality of the application means that this behavior is unavoidable, then defenses must be implemented within the client-side code to prevent malicious data from introducing an arbitrary URL as a redirection target. In general, this is best achieved by using a whitelist of URLs that are permitted redirection targets, and strictly validating the target against this list before performing the redirection.</p>","references":"<p>CWE-601: URL Redirection to Untrusted Site ('Open Redirect')</p>","selectedScore":null,"serviceNowTicket":null,"scores":{},"subStatus":"remediated","tags":[],"tenant_id":0,"hackerOneData":null,"snykData":null,"edgescanData":null,"integrationData":null,"calculated_severity":false,"reportedAt":1740114000000,"finding_id":null,"cuid":"cma3zphwa00sd0hp71oa93yir"},{"id":1063562780,"doc_id":[59013,643025423],"data":[1063562780,"Low","Client-side JSON injection (DOM-based)","Closed",1746021199678,null,1740114000000,1728914099562,null,null,"published"],"affected_assets":{},"assignedTo":null,"client_id":59013,"client_name":"Crimson Nexus Ventures","code_samples":[],"createdAt":1740114000000,"description":"<p>DOM-based vulnerabilities arise when a client-side script reads data from a controllable part of the DOM (for example, the URL) and processes this data in an unsafe way.<br />DOM-based JSON injection  arises when a script  incorporates controllable data into a string that is parsed as a JSON data structure and then processed by the application. An attacker may be able to use this behavior to construct a URL that, if visited by another application user, will cause arbitrary JSON data to be processed. Depending on the purpose for which this data is used, it may be possible to subvert the application's logic, or cause unintended actions on behalf of the user.<br />Burp Suite automatically identifies this issue using static code analysis, which may lead to false positives that are not actually exploitable. The relevant code and execution paths should be reviewed to determine whether this vulnerability is indeed present, or whether mitigations are in place that would prevent exploitation.</p>","doc_type":"flaw","doc_version":"1.60.8","exhibits":[],"flaw_id":1063562780,"last_update":1746021199678,"reopenedAt":null,"report_id":643025423,"report_name":"HQ Internal Penetration Test","sev":3,"severity":"Low","severity_key":3,"source":"PTrac","status":"Closed","title":"Client-side JSON injection (DOM-based)","visibility":"published","closedAt":1728914099562,"fields":{},"jiraIssue":null,"recommendations":"<p>The most effective way to avoid DOM-based JSON injection vulnerabilities is not to parse as JSON any string containing data that originated from an untrusted source. If the desired functionality of the application means that this behavior is unavoidable, then defenses must be implemented within the client-side code to prevent malicious data from modifying the JSON structure in inappropriate ways. This may involve strict validation of specific items to ensure they do not contain any characters that may interfere with the structure of the JSON when it is parsed.</p>","references":"<ul><li>CWE-79: Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')(https://cwe.mitre.org/data/definitions/79.html)</li><li>CWE-116: Improper Encoding or Escaping of Output(https://cwe.mitre.org/data/definitions/116.html)</li><li>CWE-159: Failure to Sanitize Special Element(https://cwe.mitre.org/data/definitions/159.html)</li></ul>","selectedScore":null,"serviceNowTicket":null,"scores":{},"subStatus":"remediated","tags":[],"tenant_id":0,"hackerOneData":null,"snykData":null,"edgescanData":null,"integrationData":null,"calculated_severity":false,"reportedAt":1740114000000,"finding_id":null,"cuid":"cma3zphwn00se0hp75smsdb4m"},{"id":1350733139,"doc_id":[59013,643025423],"data":[1350733139,"Low","Client-side XPath injection (reflected DOM-based)","Closed",1746021199678,null,1740114000000,1728914099562,null,null,"published"],"affected_assets":{},"assignedTo":null,"client_id":59013,"client_name":"Crimson Nexus Ventures","code_samples":[],"createdAt":1740114000000,"description":"<p>Reflected DOM-based vulnerabilities arise when data is copied from a request and echoed into the application's immediate response within a part of the DOM that is then processed in an unsafe way by a client-side script. An attacker can leverage the reflection to control a part of the response (for example, a JavaScript string) that can be used to trigger the DOM-based vulnerability.<br />DOM-based XPath injection  arises when a script incorporates controllable data into an XPath query. An attacker may be able to use this behavior to construct a URL that, if visited by another application user, will cause an arbitrary XPath query to execute, causing different data to be retrieved and processed by the application. Depending on the purpose for which the query results are used, it may be possible to subvert the application's logic, or cause unintended actions on behalf of the user.<br />Burp Suite automatically identifies this issue using static code analysis, which may lead to false positives that are not actually exploitable. The relevant code and execution paths should be reviewed to determine whether this vulnerability is indeed present, or whether mitigations are in place that would prevent exploitation.</p>","doc_type":"flaw","doc_version":"1.60.8","exhibits":[],"flaw_id":1350733139,"last_update":1746021199678,"reopenedAt":null,"report_id":643025423,"report_name":"HQ Internal Penetration Test","sev":3,"severity":"Low","severity_key":3,"source":"PTrac","status":"Closed","title":"Client-side XPath injection (reflected DOM-based)","visibility":"published","closedAt":1728914099562,"fields":{},"jiraIssue":null,"recommendations":"<p>The most effective way to avoid DOM-based XPath injection vulnerabilities is not to incorporate into an XPath query any data that originated from an untrusted source. If the desired functionality of the application means that this behavior is unavoidable, then defenses must be implemented within the client-side code to prevent malicious data from modifying the XPath query in inappropriate ways. This may involve strict validation of specific items to ensure they do not contain any characters that may interfere with the structure of the query when it is parsed.</p>","references":"<ul><li>CWE-79: Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')(https://cwe.mitre.org/data/definitions/79.html)</li><li>CWE-116: Improper Encoding or Escaping of Output(https://cwe.mitre.org/data/definitions/116.html)</li><li>CWE-159: Failure to Sanitize Special Element(https://cwe.mitre.org/data/definitions/159.html)</li></ul>","selectedScore":null,"serviceNowTicket":null,"scores":{},"subStatus":"remediated","tags":[],"tenant_id":0,"hackerOneData":null,"snykData":null,"edgescanData":null,"integrationData":null,"calculated_severity":false,"reportedAt":1740114000000,"finding_id":null,"cuid":"cma3zphwx00sf0hp779ts2or7"},{"id":1383348928,"doc_id":[59013,643025423],"data":[1383348928,"Low","Cookie without HttpOnly flag set","Closed",1746021199678,null,1740114000000,1705499804175,null,null,"published"],"affected_assets":{},"assignedTo":null,"client_id":59013,"client_name":"Crimson Nexus Ventures","code_samples":[],"createdAt":1740114000000,"description":"<p>If the HttpOnly attribute is set on a cookie, then the cookie's value cannot be read or set by client-side JavaScript. This measure makes certain client-side attacks, such as cross-site scripting, slightly harder to exploit by preventing them from trivially capturing the cookie's value via an injected script.</p>","doc_type":"flaw","doc_version":"1.60.8","exhibits":[],"flaw_id":1383348928,"last_update":1746021199678,"reopenedAt":null,"report_id":643025423,"report_name":"HQ Internal Penetration Test","sev":3,"severity":"Low","severity_key":3,"source":"PTrac","status":"Closed","title":"Cookie without HttpOnly flag set","visibility":"published","closedAt":1705499804175,"fields":{},"jiraIssue":null,"recommendations":"<p>There is usually no good reason not to set the HttpOnly flag on all cookies. Unless you specifically require legitimate client-side scripts within your application to read or set a cookie's value, you should set the HttpOnly flag by including this attribute within the relevant Set-cookie directive.<br />You should be aware that the restrictions imposed by the HttpOnly flag can potentially be circumvented in some circumstances, and that numerous other serious attacks can be delivered by client-side script injection, aside from simple cookie stealing.</p>","references":"<p>Configuring HttpOnly<br />CWE-16: Configuration</p>","selectedScore":null,"serviceNowTicket":null,"scores":{},"subStatus":"remediated","tags":[],"tenant_id":0,"hackerOneData":null,"snykData":null,"edgescanData":null,"integrationData":null,"calculated_severity":false,"reportedAt":1740114000000,"finding_id":null,"cuid":"cma3zphx600sg0hp787pid6kz"},{"id":1427323196,"doc_id":[59013,643025423],"data":[1427323196,"Low","Client-side XPath injection (DOM-based)","Closed",1746021199678,null,1740114000000,1705499804175,null,null,"published"],"affected_assets":{},"assignedTo":null,"client_id":59013,"client_name":"Crimson Nexus Ventures","code_samples":[],"createdAt":1740114000000,"description":"<p>DOM-based vulnerabilities arise when a client-side script reads data from a controllable part of the DOM (for example, the URL) and processes this data in an unsafe way.<br />DOM-based XPath injection  arises when a script incorporates controllable data into an XPath query. An attacker may be able to use this behavior to construct a URL that, if visited by another application user, will cause an arbitrary XPath query to execute, causing different data to be retrieved and processed by the application. Depending on the purpose for which the query results are used, it may be possible to subvert the application's logic, or cause unintended actions on behalf of the user.<br />Burp Suite automatically identifies this issue using static code analysis, which may lead to false positives that are not actually exploitable. The relevant code and execution paths should be reviewed to determine whether this vulnerability is indeed present, or whether mitigations are in place that would prevent exploitation.</p>","doc_type":"flaw","doc_version":"1.60.8","exhibits":[],"flaw_id":1427323196,"last_update":1746021199678,"reopenedAt":null,"report_id":643025423,"report_name":"HQ Internal Penetration Test","sev":3,"severity":"Low","severity_key":3,"source":"PTrac","status":"Closed","title":"Client-side XPath injection (DOM-based)","visibility":"published","closedAt":1705499804175,"fields":{},"jiraIssue":null,"recommendations":"<p>The most effective way to avoid DOM-based XPath injection vulnerabilities is not to incorporate into an XPath query any data that originated from an untrusted source. If the desired functionality of the application means that this behavior is unavoidable, then defenses must be implemented within the client-side code to prevent malicious data from modifying the XPath query in inappropriate ways. This may involve strict validation of specific items to ensure they do not contain any characters that may interfere with the structure of the query when it is parsed.</p>","references":"<ul><li>CWE-79: Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')(https://cwe.mitre.org/data/definitions/20.html)</li><li>CWE-116: Improper Encoding or Escaping of Output(https://cwe.mitre.org/data/definitions/116.html)</li><li>CWE-159: Failure to Sanitize Special Element(https://cwe.mitre.org/data/definitions/159.html)</li></ul>","selectedScore":null,"serviceNowTicket":null,"scores":{},"subStatus":"remediated","tags":[],"tenant_id":0,"hackerOneData":null,"snykData":null,"edgescanData":null,"integrationData":null,"calculated_severity":false,"reportedAt":1740114000000,"finding_id":null,"cuid":"cma3zphxf00sh0hp766n4hvut"},{"id":1481246826,"doc_id":[59013,643025423],"data":[1481246826,"Low","Source code disclosure","Closed",1746021199678,null,1740114000000,1705499804175,null,null,"published"],"affected_assets":{},"assignedTo":null,"client_id":59013,"client_name":"Crimson Nexus Ventures","code_samples":[],"createdAt":1740114000000,"description":"<p>Source code intended to be kept server-side can sometimes end up being disclosed to users. Such code may contain sensitive information such as database passwords and secret keys, which may help malicious users formulate attacks against the application.</p>","doc_type":"flaw","doc_version":"1.60.8","exhibits":[],"flaw_id":1481246826,"last_update":1746021199678,"reopenedAt":null,"report_id":643025423,"report_name":"HQ Internal Penetration Test","sev":3,"severity":"Low","severity_key":3,"source":"PTrac","status":"Closed","title":"Source code disclosure","visibility":"published","closedAt":1705499804175,"fields":{},"jiraIssue":null,"recommendations":"<p>Server-side source code is normally disclosed to clients as a result of typographical errors in scripts or because of misconfiguration, such as failing to grant executable permissions to a script or directory. Review the cause of the code disclosure and prevent it from happening.</p>","references":"<ul><li>CWE-18: Source Code(https://cwe.mitre.org/data/definitions/18.html)</li><li>CWE-200: Information Exposure(https://cwe.mitre.org/data/definitions/200.html)</li><li>CWE-388: Error Handling(https://cwe.mitre.org/data/definitions/388.html)</li><li>CWE-540: Information Exposure Through Source Code(https://cwe.mitre.org/data/definitions/540.html)</li><li>CWE-541: Information Exposure Through Include Source Code(https://cwe.mitre.org/data/definitions/541.html)</li><li>CWE-615: Information Exposure Through Comments(https://cwe.mitre.org/data/definitions/615.html)</li></ul>","selectedScore":null,"serviceNowTicket":null,"scores":{},"subStatus":"remediated","tags":[],"tenant_id":0,"hackerOneData":null,"snykData":null,"edgescanData":null,"integrationData":null,"calculated_severity":false,"reportedAt":1740114000000,"finding_id":null,"cuid":"cma3zphxr00si0hp771icaet3"},{"id":1535592515,"doc_id":[59013,643025423],"data":[1535592515,"Low","Ajax request header manipulation (reflected DOM-based)","Closed",1746021199678,null,1740114000000,1705499804175,null,null,"published"],"affected_assets":{},"assignedTo":null,"client_id":59013,"client_name":"Crimson Nexus Ventures","code_samples":[],"createdAt":1740114000000,"description":"<p>Reflected DOM-based vulnerabilities arise when data is copied from a request and echoed into the application's immediate response within a part of the DOM that is then processed in an unsafe way by a client-side script. An attacker can leverage the reflection to control a part of the response (for example, a JavaScript string) that can be used to trigger the DOM-based vulnerability.<br />Ajax request header manipulation  arises when a script writes controllable data into a header of an Ajax request that is issued using XmlHttpRequest. An attacker may be able to use the vulnerability to construct a URL that, if visited by another application user, will set an arbitrary header in the subsequent Ajax request.<br />The potential impact of the vulnerability depends on the role of specific HTTP headers in the server-side application's processing of the Ajax request. If the header is used to control the behavior that results from the Ajax request, then the attacker may be able to cause the user to perform unintended actions by manipulating the header.<br />Burp Suite automatically identifies this issue using static code analysis, which may lead to false positives that are not actually exploitable. The relevant code and execution paths should be reviewed to determine whether this vulnerability is indeed present, or whether mitigations are in place that would prevent exploitation.</p>","doc_type":"flaw","doc_version":"1.60.8","exhibits":[],"flaw_id":1535592515,"last_update":1746021199678,"reopenedAt":null,"report_id":643025423,"report_name":"HQ Internal Penetration Test","sev":3,"severity":"Low","severity_key":3,"source":"PTrac","status":"Closed","title":"Ajax request header manipulation (reflected DOM-based)","visibility":"published","closedAt":1705499804175,"fields":{},"jiraIssue":null,"recommendations":"<p>The most effective way to avoid DOM-based Ajax request header manipulation vulnerabilities is not to dynamically set Ajax request headers using data that originated from any untrusted source. This behavior should never be implemented for headers that have any role in controlling the effects of privileged actions within the application.</p>","references":"<p>CWE-116: Improper Encoding or Escaping of Output</p>","selectedScore":null,"serviceNowTicket":null,"scores":{},"subStatus":"remediated","tags":[],"tenant_id":0,"hackerOneData":null,"snykData":null,"edgescanData":null,"integrationData":null,"calculated_severity":false,"reportedAt":1740114000000,"finding_id":null,"cuid":"cma3zphy300sj0hp7f24g3l4z"},{"id":1641708980,"doc_id":[59013,643025423],"data":[1641708980,"Low","Password submitted using GET method","Closed",1746021199678,null,1740114000000,1728914099562,null,null,"published"],"affected_assets":{},"assignedTo":null,"client_id":59013,"client_name":"Crimson Nexus Ventures","code_samples":[],"createdAt":1740114000000,"description":"<p>Some applications use the GET method to submit passwords, which are transmitted within the query string of the requested URL. Sensitive information within URLs may be logged in various locations, including the user's browser, the web server, and any forward or reverse proxy servers between the two endpoints. URLs may also be displayed on-screen, bookmarked or emailed around by users. They may be disclosed to third parties via the Referer header when any off-site links are followed. Placing passwords into the URL increases the risk that they will be captured by an attacker.<br />Vulnerabilities that result in the disclosure of users' passwords can result in compromises that are extremely difficult to investigate due to obscured audit trails. Even if the application itself only handles non-sensitive information, exposing passwords puts users who have re-used their password elsewhere at risk.</p>","doc_type":"flaw","doc_version":"1.60.8","exhibits":[],"flaw_id":1641708980,"last_update":1746021199678,"reopenedAt":null,"report_id":643025423,"report_name":"HQ Internal Penetration Test","sev":3,"severity":"Low","severity_key":3,"source":"PTrac","status":"Closed","title":"Password submitted using GET method","visibility":"published","closedAt":1728914099562,"fields":{},"jiraIssue":null,"recommendations":"<p>All forms submitting passwords should use the POST method. To achieve this, applications should specify the method attribute of the FORM tag as method=\"POST\" . It may also be necessary to modify the corresponding server-side form handler to ensure that submitted passwords are properly retrieved from the message body, rather than the URL. </p>","references":"<p>CWE-598: Information Exposure Through Query Strings in GET Request</p>","selectedScore":null,"serviceNowTicket":null,"scores":{},"subStatus":"remediated","tags":[],"tenant_id":0,"hackerOneData":null,"snykData":null,"edgescanData":null,"integrationData":null,"calculated_severity":false,"reportedAt":1740114000000,"finding_id":null,"cuid":"cma3zphye00sk0hp7c1ph3m9q"},{"id":1656151039,"doc_id":[59013,643025423],"data":[1656151039,"Low","Cookie manipulation (reflected DOM-based)","Closed",1746021199678,null,1740114000000,1728914099562,null,null,"published"],"affected_assets":{},"assignedTo":null,"client_id":59013,"client_name":"Crimson Nexus Ventures","code_samples":[],"createdAt":1740114000000,"description":"<p>Reflected DOM-based vulnerabilities arise when data is copied from a request and echoed into the application's immediate response within a part of the DOM that is then processed in an unsafe way by a client-side script. An attacker can leverage the reflection to control a part of the response (for example, a JavaScript string) that can be used to trigger the DOM-based vulnerability.<br />DOM-based cookie manipulation arises when a  script writes controllable data into the value of a cookie. An attacker may be able to use the vulnerability to construct a URL that, if visited by another application user, will set an arbitrary value in the user's cookie.<br />The potential impact of the vulnerability depends on the role that the cookie plays within the application. If the cookie is used to control the behavior that results from certain user actions (for example, a 'production' versus 'demo' mode setting), then the attacker may be able to cause the user to perform unintended actions by manipulating the cookie's value. If the cookie is used to track the user's session, then the attacker may be able to perform a session fixation attack, in which they set the cookie's value to a valid token that they have obtained from the application, and then hijack the session during the victim user's subsequent interaction with the application.<br />Burp Suite automatically identifies this issue using static code analysis, which may lead to false positives that are not actually exploitable. The relevant code and execution paths should be reviewed to determine whether this vulnerability is indeed present, or whether mitigations are in place that would prevent exploitation.</p>","doc_type":"flaw","doc_version":"1.60.8","exhibits":[],"flaw_id":1656151039,"last_update":1746021199678,"reopenedAt":null,"report_id":643025423,"report_name":"HQ Internal Penetration Test","sev":3,"severity":"Low","severity_key":3,"source":"PTrac","status":"Closed","title":"Cookie manipulation (reflected DOM-based)","visibility":"published","closedAt":1728914099562,"fields":{},"jiraIssue":null,"recommendations":"<p>The most effective way to avoid DOM-based cookie manipulation vulnerabilities is not to dynamically write to cookies using data that originated from any untrusted source. This behavior should never be implemented for cookies that have any role in controlling privileged actions or user sessions within the application.</p>","references":"<ul><li>CWE-565: Reliance on Cookies without Validation and Integrity Checking(https://cwe.mitre.org/data/definitions/565.html)</li><li>CWE-829: Inclusion of Functionality from Untrusted Control Sphere(https://cwe.mitre.org/data/definitions/829.html)</li></ul>","selectedScore":null,"serviceNowTicket":null,"scores":{},"subStatus":"remediated","tags":[],"tenant_id":0,"hackerOneData":null,"snykData":null,"edgescanData":null,"integrationData":null,"calculated_severity":false,"reportedAt":1740114000000,"finding_id":null,"cuid":"cma3zphyp00sl0hp7eyiu92qs"},{"id":1862160288,"doc_id":[59013,643025423],"data":[1862160288,"Low","Denial of service (stored DOM-based)","Closed",1746021199678,null,1740114000000,1705499804175,null,null,"published"],"affected_assets":{},"assignedTo":null,"client_id":59013,"client_name":"Crimson Nexus Ventures","code_samples":[],"createdAt":1740114000000,"description":"<p>Stored DOM-based vulnerabilities arise when user input is stored and later embedded into a response within a part of the DOM that is then processed in an unsafe way by a client-side script. An attacker can leverage the data storage to control a part of the response (for example, a JavaScript string) that can be used to trigger the DOM-based vulnerability.<br />DOM-based denial of service  arises when a script passes controllable data to a problematic platform API in an unsafe way. An attacker may be able to use the vulnerability to construct a URL that, if visited by another application user, will cause a denial of service condition on the user's computer when the relevant API is invoked. Depending on the nature of the API, the invocation may cause the user's computer to consume excessive amounts of CPU or disk space. This may result in side effects if the web browser restricts application functionality; for example, by rejecting attempts to store data in localStorage or killing busy scripts.<br />Burp Suite automatically identifies this issue using static code analysis, which may lead to false positives that are not actually exploitable. The relevant code and execution paths should be reviewed to determine whether this vulnerability is indeed present, or whether mitigations are in place that would prevent exploitation.</p>","doc_type":"flaw","doc_version":"1.60.8","exhibits":[],"flaw_id":1862160288,"last_update":1746021199678,"reopenedAt":null,"report_id":643025423,"report_name":"HQ Internal Penetration Test","sev":3,"severity":"Low","severity_key":3,"source":"PTrac","status":"Closed","title":"Denial of service (stored DOM-based)","visibility":"published","closedAt":1705499804175,"fields":{},"jiraIssue":null,"recommendations":"<p>The most effective way to avoid DOM-based denial of service vulnerabilities is not to dynamically pass data into problematic platform APIs that originated from any untrusted source. If the desired functionality of the application means that this behavior is unavoidable, then defenses must be implemented within the client-side code to prevent malicious data from causing a denial of service condition. In many cases, the relevant data can be validated on a whitelist basis, to allow only content that is known to be safe.</p>","references":"<p>CWE-400: Uncontrolled Resource Consumption ('Resource Exhaustion')</p>","selectedScore":null,"serviceNowTicket":null,"scores":{},"subStatus":"remediated","tags":[],"tenant_id":0,"hackerOneData":null,"snykData":null,"edgescanData":null,"integrationData":null,"calculated_severity":false,"reportedAt":1740114000000,"finding_id":null,"cuid":"cma3zphz100sm0hp71j8ca0p0"},{"id":1987355203,"doc_id":[59013,643025423],"data":[1987355203,"Low","Cookie manipulation (stored DOM-based)","Closed",1746021199678,null,1740114000000,1705499804175,null,null,"published"],"affected_assets":{},"assignedTo":null,"client_id":59013,"client_name":"Crimson Nexus Ventures","code_samples":[],"createdAt":1740114000000,"description":"<p>Stored DOM-based vulnerabilities arise when user input is stored and later embedded into a response within a part of the DOM that is then processed in an unsafe way by a client-side script. An attacker can leverage the data storage to control a part of the response (for example, a JavaScript string) that can be used to trigger the DOM-based vulnerability.<br />DOM-based cookie manipulation arises when a  script writes controllable data into the value of a cookie. An attacker may be able to use the vulnerability to construct a URL that, if visited by another application user, will set an arbitrary value in the user's cookie.<br />The potential impact of the vulnerability depends on the role that the cookie plays within the application. If the cookie is used to control the behavior that results from certain user actions (for example, a 'production' versus 'demo' mode setting), then the attacker may be able to cause the user to perform unintended actions by manipulating the cookie's value. If the cookie is used to track the user's session, then the attacker may be able to perform a session fixation attack, in which they set the cookie's value to a valid token that they have obtained from the application, and then hijack the session during the victim user's subsequent interaction with the application.<br />Burp Suite automatically identifies this issue using static code analysis, which may lead to false positives that are not actually exploitable. The relevant code and execution paths should be reviewed to determine whether this vulnerability is indeed present, or whether mitigations are in place that would prevent exploitation.</p>","doc_type":"flaw","doc_version":"1.60.8","exhibits":[],"flaw_id":1987355203,"last_update":1746021199678,"reopenedAt":null,"report_id":643025423,"report_name":"HQ Internal Penetration Test","sev":3,"severity":"Low","severity_key":3,"source":"PTrac","status":"Closed","title":"Cookie manipulation (stored DOM-based)","visibility":"published","closedAt":1705499804175,"fields":{},"jiraIssue":null,"recommendations":"<p>The most effective way to avoid DOM-based cookie manipulation vulnerabilities is not to dynamically write to cookies using data that originated from any untrusted source. This behavior should never be implemented for cookies that have any role in controlling privileged actions or user sessions within the application.</p>","references":"<ul><li>CWE-565: Reliance on Cookies without Validation and Integrity Checking(https://cwe.mitre.org/data/definitions/565.html)</li><li>CWE-829: Inclusion of Functionality from Untrusted Control Sphere(https://cwe.mitre.org/data/definitions/829.html)</li></ul>","selectedScore":null,"serviceNowTicket":null,"scores":{},"subStatus":"remediated","tags":[],"tenant_id":0,"hackerOneData":null,"snykData":null,"edgescanData":null,"integrationData":null,"calculated_severity":false,"reportedAt":1740114000000,"finding_id":null,"cuid":"cma3zphzg00sn0hp7hm755a0w"},{"id":2047257934,"doc_id":[59013,643025423],"data":[2047257934,"Low","Open redirection (reflected)","Closed",1746021199678,null,1740114000000,1728914099562,null,null,"published"],"affected_assets":{},"assignedTo":null,"client_id":59013,"client_name":"Crimson Nexus Ventures","code_samples":[],"createdAt":1740114000000,"description":"<p>Open redirection vulnerabilities arise when an application incorporates user-controllable data into the target of a redirection in an unsafe way. An attacker can construct a URL within the application that causes a redirection to an arbitrary external domain. This behavior can be leveraged to facilitate phishing attacks against users of the application. The ability to use an authentic application URL, targeting the correct domain and with a valid SSL certificate (if SSL is used), lends credibility to the phishing attack because many users, even if they verify these features, will not notice the subsequent redirection to a different domain.</p>","doc_type":"flaw","doc_version":"1.60.8","exhibits":[],"flaw_id":2047257934,"last_update":1746021199678,"reopenedAt":null,"report_id":643025423,"report_name":"HQ Internal Penetration Test","sev":3,"severity":"Low","severity_key":3,"source":"PTrac","status":"Closed","title":"Open redirection (reflected)","visibility":"published","closedAt":1728914099562,"fields":{},"jiraIssue":null,"recommendations":"<p>If possible, applications should avoid incorporating user-controllable data into redirection targets. In many cases, this behavior can be avoided in two ways:<br />Remove the redirection function from the application, and replace links to it with direct links to the relevant target URLs.<br />Maintain a server-side list of all URLs that are permitted for redirection. Instead of passing the target URL as a parameter to the redirector, pass an index into this list.</p><p>If it is considered unavoidable for the redirection function to receive user-controllable input and incorporate this into the redirection target, one of the following measures should be used to minimize the risk of redirection attacks:<br />The application should use relative URLs in all of its redirects, and the redirection function should strictly validate that the URL received is a relative URL.<br />The application should use URLs relative to the web root for all of its redirects, and the redirection function should validate that the URL received starts with a slash character. It should then prepend http://yourdomainname.com to the URL before issuing the redirect.<br />The application should use absolute URLs for all of its redirects, and the redirection function should verify that the user-supplied URL begins with http://yourdomainname.com/ before issuing the redirect.</p>","references":"<ul><li>Using Burp to Test for Open Redirections(https://support.portswigger.net/customer/portal/articles/1965733-Methodology_Testing%20for%20Open%20Redirections.html)</li><li>Fun With Redirects(https://www.owasp.org/images/b/b9/OWASP_Appsec_Research_2010_Redirects_XSLJ_by_Sirdarckcat_and_Thornmaker.pdf)</li></ul><p>CWE-601: URL Redirection to Untrusted Site ('Open Redirect')</p>","selectedScore":null,"serviceNowTicket":null,"scores":{},"subStatus":"remediated","tags":[],"tenant_id":0,"hackerOneData":null,"snykData":null,"edgescanData":null,"integrationData":null,"calculated_severity":false,"reportedAt":1740114000000,"finding_id":null,"cuid":"cma3zphzu00so0hp72og884a5"},{"id":2339587513,"doc_id":[59013,643025423],"data":[2339587513,"Low","Client-side HTTP parameter pollution (reflected)","Closed",1746021199678,null,1740114000000,1728914099562,null,null,"published"],"affected_assets":{},"assignedTo":null,"client_id":59013,"client_name":"Crimson Nexus Ventures","code_samples":[],"createdAt":1740114000000,"description":"<p>Client-side HTTP parameter pollution (HPP) vulnerabilities arise when an application embeds user input in URLs in an unsafe manner.  An attacker can use this vulnerability to construct a URL that, if visited by another application user, will modify URLs within the response by inserting additional query string parameters and sometimes overriding existing ones. This may result in links and forms having unexpected side effects. For example, it may be possible to modify an invitation form using HPP so that the invitation is delivered to an unexpected recipient.<br />The security impact of this issue depends largely on the nature of the application functionality. Even if it has no direct impact on its own, an attacker may use it in conjunction with other vulnerabilities to escalate their overall severity.</p>","doc_type":"flaw","doc_version":"1.60.8","exhibits":[],"flaw_id":2339587513,"last_update":1746021199678,"reopenedAt":null,"report_id":643025423,"report_name":"HQ Internal Penetration Test","sev":3,"severity":"Low","severity_key":3,"source":"PTrac","status":"Closed","title":"Client-side HTTP parameter pollution (reflected)","visibility":"published","closedAt":1728914099562,"fields":{},"jiraIssue":null,"recommendations":"<p>Ensure that user input is URL-encoded before it is embedded in a URL.</p>","references":"<p>HTTP Parameter Pollution</p><ul><li>CWE-233: Improper Handling of Parameters(https://cwe.mitre.org/data/definitions/233.html)</li><li>CWE-20: Improper Input Validation(https://cwe.mitre.org/data/definitions/20.html)</li></ul>","selectedScore":null,"serviceNowTicket":null,"scores":{},"subStatus":"remediated","tags":[],"tenant_id":0,"hackerOneData":null,"snykData":null,"edgescanData":null,"integrationData":null,"calculated_severity":false,"reportedAt":1740114000000,"finding_id":null,"cuid":"cma3zpi0700sp0hp7cjrd49y7"},{"id":2361060777,"doc_id":[59013,643025423],"data":[2361060777,"Low","Client-side JSON injection (reflected DOM-based)","Closed",1746021199678,null,1740114000000,1705499804175,null,null,"published"],"affected_assets":{},"assignedTo":null,"client_id":59013,"client_name":"Crimson Nexus Ventures","code_samples":[],"createdAt":1740114000000,"description":"<p>Reflected DOM-based vulnerabilities arise when data is copied from a request and echoed into the application's immediate response within a part of the DOM that is then processed in an unsafe way by a client-side script. An attacker can leverage the reflection to control a part of the response (for example, a JavaScript string) that can be used to trigger the DOM-based vulnerability.<br />DOM-based JSON injection  arises when a script  incorporates controllable data into a string that is parsed as a JSON data structure and then processed by the application. An attacker may be able to use this behavior to construct a URL that, if visited by another application user, will cause arbitrary JSON data to be processed. Depending on the purpose for which this data is used, it may be possible to subvert the application's logic, or cause unintended actions on behalf of the user.<br />Burp Suite automatically identifies this issue using static code analysis, which may lead to false positives that are not actually exploitable. The relevant code and execution paths should be reviewed to determine whether this vulnerability is indeed present, or whether mitigations are in place that would prevent exploitation.</p>","doc_type":"flaw","doc_version":"1.60.8","exhibits":[],"flaw_id":2361060777,"last_update":1746021199678,"reopenedAt":null,"report_id":643025423,"report_name":"HQ Internal Penetration Test","sev":3,"severity":"Low","severity_key":3,"source":"PTrac","status":"Closed","title":"Client-side JSON injection (reflected DOM-based)","visibility":"published","closedAt":1705499804175,"fields":{},"jiraIssue":null,"recommendations":"<p>The most effective way to avoid DOM-based JSON injection vulnerabilities is not to parse as JSON any string containing data that originated from an untrusted source. If the desired functionality of the application means that this behavior is unavoidable, then defenses must be implemented within the client-side code to prevent malicious data from modifying the JSON structure in inappropriate ways. This may involve strict validation of specific items to ensure they do not contain any characters that may interfere with the structure of the JSON when it is parsed.</p>","references":"<ul><li>CWE-79: Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')(https://cwe.mitre.org/data/definitions/79.html)</li><li>CWE-116: Improper Encoding or Escaping of Output(https://cwe.mitre.org/data/definitions/116.html)</li><li>CWE-159: Failure to Sanitize Special Element(https://cwe.mitre.org/data/definitions/159.html)</li></ul>","selectedScore":null,"serviceNowTicket":null,"scores":{},"subStatus":"remediated","tags":[],"tenant_id":0,"hackerOneData":null,"snykData":null,"edgescanData":null,"integrationData":null,"calculated_severity":false,"reportedAt":1740114000000,"finding_id":null,"cuid":"cma3zpi0h00sq0hp71tu261eq"},{"id":2441042549,"doc_id":[59013,643025423],"data":[2441042549,"Low","Link manipulation (reflected DOM-based)","Closed",1746021199678,null,1740114000000,1705499804175,null,null,"published"],"affected_assets":{},"assignedTo":null,"client_id":59013,"client_name":"Crimson Nexus Ventures","code_samples":[],"createdAt":1740114000000,"description":"<p>Reflected DOM-based vulnerabilities arise when data is copied from a request and echoed into the application's immediate response within a part of the DOM that is then processed in an unsafe way by a client-side script. An attacker can leverage the reflection to control a part of the response (for example, a JavaScript string) that can be used to trigger the DOM-based vulnerability.<br />DOM-based link manipulation  arises when a script writes controllable data to a navigation target within the current page, such as a clickable link or the submission URL of a form. An attacker may be able to use the vulnerability to construct a URL that, if visited by another application user, will modify the target of links within the response. An attacker may be able to leverage this to perform various attacks, including:<br />Causing the user to redirect to an arbitrary external URL, to facilitate a phishing attack.<br />Causing the user to submit sensitive form data to a server controlled by the attacker.<br />Causing the user to perform an unintended action within the application, by changing the file or query string associated with a link.<br />Bypassing browser anti-XSS defenses by injecting on-site links containing XSS exploits, since browser anti-XSS defenses typically do not operate on on-site links.</p><p>Burp Suite automatically identifies this issue using static code analysis, which may lead to false positives that are not actually exploitable. The relevant code and execution paths should be reviewed to determine whether this vulnerability is indeed present, or whether mitigations are in place that would prevent exploitation.</p>","doc_type":"flaw","doc_version":"1.60.8","exhibits":[],"flaw_id":2441042549,"last_update":1746021199678,"reopenedAt":null,"report_id":643025423,"report_name":"HQ Internal Penetration Test","sev":3,"severity":"Low","severity_key":3,"source":"PTrac","status":"Closed","title":"Link manipulation (reflected DOM-based)","visibility":"published","closedAt":1705499804175,"fields":{},"jiraIssue":null,"recommendations":"<p>The most effective way to avoid DOM-based link manipulation vulnerabilities is not to dynamically set the target URLs of links or forms using data that originated from any untrusted source. If the desired functionality of the application means that this behavior is unavoidable, then defenses must be implemented within the client-side code to prevent malicious data from introducing an arbitrary URL as a link target. In general, this is best achieved by using a whitelist of URLs that are permitted link targets, and strictly validating the target against this list before setting the link target.</p>","references":"<p>CWE-20: Improper Input Validation</p>","selectedScore":null,"serviceNowTicket":null,"scores":{},"subStatus":"remediated","tags":[],"tenant_id":0,"hackerOneData":null,"snykData":null,"edgescanData":null,"integrationData":null,"calculated_severity":false,"reportedAt":1740114000000,"finding_id":null,"cuid":"cma3zpi0w00sr0hp71gbwgade"},{"id":2775455001,"doc_id":[59013,643025423],"data":[2775455001,"Low","Cookie scoped to parent domain","Closed",1746021199678,null,1740114000000,1705499804175,null,null,"published"],"affected_assets":{},"assignedTo":null,"client_id":59013,"client_name":"Crimson Nexus Ventures","code_samples":[],"createdAt":1740114000000,"description":"<p>A cookie's domain attribute determines which domains can access the cookie. Browsers will automatically submit the cookie in requests to in-scope domains, and those domains will also be able to access the cookie via JavaScript. If a cookie is scoped to a parent domain, then that cookie will be accessible by the parent domain and also by any other subdomains of the parent domain. If the cookie contains sensitive data (such as a session token) then this data may be accessible by less trusted or less secure applications residing at those domains, leading to a security compromise.</p>","doc_type":"flaw","doc_version":"1.60.8","exhibits":[],"flaw_id":2775455001,"last_update":1746021199678,"reopenedAt":null,"report_id":643025423,"report_name":"HQ Internal Penetration Test","sev":3,"severity":"Low","severity_key":3,"source":"PTrac","status":"Closed","title":"Cookie scoped to parent domain","visibility":"published","closedAt":1705499804175,"fields":{},"jiraIssue":null,"recommendations":"<p>By default, cookies are scoped to the issuing domain and all subdomains. If you remove the explicit domain attribute from your Set-cookie directive, then the cookie will have this default scope, which is safe and appropriate in most situations. If you particularly need a cookie to be accessible by a parent domain, then you should thoroughly review the security of the applications residing on that domain and its subdomains, and confirm that you are willing to trust the people and systems that support those applications.</p>","references":"<p>CWE-16: Configuration</p>","selectedScore":null,"serviceNowTicket":null,"scores":{},"subStatus":"remediated","tags":[],"tenant_id":0,"hackerOneData":null,"snykData":null,"edgescanData":null,"integrationData":null,"calculated_severity":false,"reportedAt":1740114000000,"finding_id":null,"cuid":"cma3zpi1900ss0hp7dx6u1lve"},{"id":2796753537,"doc_id":[59013,643025423],"data":[2796753537,"Low","Strict transport security not enforced","Closed",1746021199678,null,1740114000000,1728914099562,null,null,"published"],"affected_assets":{},"assignedTo":null,"client_id":59013,"client_name":"Crimson Nexus Ventures","code_samples":[],"createdAt":1740114000000,"description":"<p>The application fails to prevent users from connecting  to it over unencrypted connections.  An attacker able to modify a legitimate user's network traffic could bypass the application's use of SSL/TLS encryption, and use the application as a platform for attacks against its users. This attack is performed by rewriting HTTPS links as HTTP, so that if a targeted user follows a link to the site from an HTTP page, their browser never attempts to use an encrypted connection. The sslstrip tool  automates this process.<br />To exploit this vulnerability, an attacker must be suitably positioned to intercept and modify the victim's network traffic.This scenario typically occurs when a client communicates with the server over an insecure connection such as public Wi-Fi, or a corporate or home network that is shared with a compromised computer. Common defenses such as switched networks are not sufficient to prevent this. An attacker situated in the user's ISP or the application's hosting infrastructure could also perform this attack. Note that an advanced adversary could potentially target any connection made over the Internet's core infrastructure.</p>","doc_type":"flaw","doc_version":"1.60.8","exhibits":[],"flaw_id":2796753537,"last_update":1746021199678,"reopenedAt":null,"report_id":643025423,"report_name":"HQ Internal Penetration Test","sev":3,"severity":"Low","severity_key":3,"source":"PTrac","status":"Closed","title":"Strict transport security not enforced","visibility":"published","closedAt":1728914099562,"fields":{},"jiraIssue":null,"recommendations":"<p>The application should instruct web browsers to only access the application using HTTPS. To do this, enable HTTP Strict Transport Security (HSTS) by adding a response header with the name 'Strict-Transport-Security' and the value 'max-age=expireTime', where expireTime is the time in seconds that browsers should remember that the site should only be accessed using HTTPS. Consider adding the 'includeSubDomains' flag if appropriate.<br />Note that because HSTS is a \"trust on first use\" (TOFU) protocol, a user who has never accessed the application will never have seen the HSTS header, and will therefore still be vulnerable to SSL stripping attacks. To mitigate this risk, you can optionally add the 'preload' flag to the HSTS header, and submit the domain for review by browser vendors.</p>","references":"<ul><li>HTTP Strict Transport Security(https://developer.mozilla.org/en-US/docs/Web/Security/HTTP_strict_transport_security)</li><li>sslstrip(http://www.thoughtcrime.org/software/sslstrip/)</li><li>HSTS Preload Form(https://hstspreload.appspot.com/)</li></ul><p>CWE-523: Unprotected Transport of Credentials</p>","selectedScore":null,"serviceNowTicket":null,"scores":{},"subStatus":"remediated","tags":[],"tenant_id":0,"hackerOneData":null,"snykData":null,"edgescanData":null,"integrationData":null,"calculated_severity":false,"reportedAt":1740114000000,"finding_id":null,"cuid":"cma3zpi1m00st0hp7cf7v1k3x"},{"id":2962703575,"doc_id":[59013,643025423],"data":[2962703575,"Low","Cross-origin resource sharing: all subdomains trusted","Closed",1746021199678,null,1740114000000,1728914099562,null,null,"published"],"affected_assets":{},"assignedTo":null,"client_id":59013,"client_name":"Crimson Nexus Ventures","code_samples":[],"createdAt":1740114000000,"description":"<p>An HTML5 cross-origin resource sharing (CORS) policy controls whether and how content running on other domains can perform two-way interaction with the domain that publishes the policy. The policy is fine-grained and can apply access controls per-request based on the URL and other features of the request.<br />If an application allows interaction from all subdomains, then this significantly increases its attack surface. For example, a cross-site scripting (XSS) vulnerability in any subdomain could potentially compromise the application that publishes the policy. Some consumer ISPs return custom content when requests are made to unregistered subdomains, which can introduce XSS vulnerabilities even if all of an organization's own applications are secure.</p>","doc_type":"flaw","doc_version":"1.60.8","exhibits":[],"flaw_id":2962703575,"last_update":1746021199678,"reopenedAt":null,"report_id":643025423,"report_name":"HQ Internal Penetration Test","sev":3,"severity":"Low","severity_key":3,"source":"PTrac","status":"Closed","title":"Cross-origin resource sharing: all subdomains trusted","visibility":"published","closedAt":1728914099562,"fields":{},"jiraIssue":null,"recommendations":"<p>Rather than trusting all subdomains,  use a whitelisted of trusted subdomains.</p>","references":"<p>Exploiting CORS Misconfigurations<br />CWE-942: Overly Permissive Cross-domain Whitelist</p>","selectedScore":null,"serviceNowTicket":null,"scores":{},"subStatus":"remediated","tags":[],"tenant_id":0,"hackerOneData":null,"snykData":null,"edgescanData":null,"integrationData":null,"calculated_severity":false,"reportedAt":1740114000000,"finding_id":null,"cuid":"cma3zpi1v00su0hp73qfr7uqw"},{"id":3301704039,"doc_id":[59013,643025423],"data":[3301704039,"Low","Cookie manipulation (DOM-based)","Closed",1746021199678,null,1740114000000,1705499804175,null,null,"published"],"affected_assets":{},"assignedTo":null,"client_id":59013,"client_name":"Crimson Nexus Ventures","code_samples":[],"createdAt":1740114000000,"description":"<p>DOM-based vulnerabilities arise when a client-side script reads data from a controllable part of the DOM (for example, the URL) and processes this data in an unsafe way.<br />DOM-based cookie manipulation arises when a  script writes controllable data into the value of a cookie. An attacker may be able to use the vulnerability to construct a URL that, if visited by another application user, will set an arbitrary value in the user's cookie.<br />The potential impact of the vulnerability depends on the role that the cookie plays within the application. If the cookie is used to control the behavior that results from certain user actions (for example, a 'production' versus 'demo' mode setting), then the attacker may be able to cause the user to perform unintended actions by manipulating the cookie's value. If the cookie is used to track the user's session, then the attacker may be able to perform a session fixation attack, in which they set the cookie's value to a valid token that they have obtained from the application, and then hijack the session during the victim user's subsequent interaction with the application.<br />Burp Suite automatically identifies this issue using static code analysis, which may lead to false positives that are not actually exploitable. The relevant code and execution paths should be reviewed to determine whether this vulnerability is indeed present, or whether mitigations are in place that would prevent exploitation.</p>","doc_type":"flaw","doc_version":"1.60.8","exhibits":[],"flaw_id":3301704039,"last_update":1746021199678,"reopenedAt":null,"report_id":643025423,"report_name":"HQ Internal Penetration Test","sev":3,"severity":"Low","severity_key":3,"source":"PTrac","status":"Closed","title":"Cookie manipulation (DOM-based)","visibility":"published","closedAt":1705499804175,"fields":{},"jiraIssue":null,"recommendations":"<p>The most effective way to avoid DOM-based cookie manipulation vulnerabilities is not to dynamically write to cookies using data that originated from any untrusted source. This behavior should never be implemented for cookies that have any role in controlling privileged actions or user sessions within the application.</p>","references":"<ul><li>CWE-565: Reliance on Cookies without Validation and Integrity Checking(https://cwe.mitre.org/data/definitions/565.html)</li><li>CWE-829: Inclusion of Functionality from Untrusted Control Sphere(https://cwe.mitre.org/data/definitions/829.html)</li></ul>","selectedScore":null,"serviceNowTicket":null,"scores":{},"subStatus":"remediated","tags":[],"tenant_id":0,"hackerOneData":null,"snykData":null,"edgescanData":null,"integrationData":null,"calculated_severity":false,"reportedAt":1740114000000,"finding_id":null,"cuid":"cma3zpi2400sv0hp7gz86cyut"},{"id":3354708324,"doc_id":[59013,643025423],"data":[3354708324,"Low","Open redirection (reflected DOM-based)","Closed",1746021199678,null,1740114000000,1705499804175,null,null,"published"],"affected_assets":{},"assignedTo":null,"client_id":59013,"client_name":"Crimson Nexus Ventures","code_samples":[],"createdAt":1740114000000,"description":"<p>Reflected DOM-based vulnerabilities arise when data is copied from a request and echoed into the application's immediate response within a part of the DOM that is then processed in an unsafe way by a client-side script. An attacker can leverage the reflection to control a part of the response (for example, a JavaScript string) that can be used to trigger the DOM-based vulnerability.<br />DOM-based open redirection arises when a script  writes controllable data into the target of a redirection in an unsafe way. An attacker may be able to use the vulnerability to  construct a URL that, if visited by another application user, will cause a redirection to an arbitrary external domain. This behavior can be leveraged to facilitate phishing attacks against users of the application. The ability to use an authentic application URL, targeting the correct domain and with a valid SSL certificate (if SSL is used), lends credibility to the phishing attack because many users, even if they verify these features, will not notice the subsequent redirection to a different domain.<br />Note: If an attacker is able to control the start of the string that is passed to the redirection API, then it may be possible to escalate this vulnerability into a JavaScript injection attack, by using a URL with the javascript: pseudo-protocol to execute arbitrary script code when the URL is processed by the browser. <br />Burp Suite automatically identifies this issue using static code analysis, which may lead to false positives that are not actually exploitable. The relevant code and execution paths should be reviewed to determine whether this vulnerability is indeed present, or whether mitigations are in place that would prevent exploitation.</p>","doc_type":"flaw","doc_version":"1.60.8","exhibits":[],"flaw_id":3354708324,"last_update":1746021199678,"reopenedAt":null,"report_id":643025423,"report_name":"HQ Internal Penetration Test","sev":3,"severity":"Low","severity_key":3,"source":"PTrac","status":"Closed","title":"Open redirection (reflected DOM-based)","visibility":"published","closedAt":1705499804175,"fields":{},"jiraIssue":null,"recommendations":"<p>The most effective way to avoid DOM-based open redirection vulnerabilities is not to dynamically set redirection targets using data that originated from any untrusted source. If the desired functionality of the application means that this behavior is unavoidable, then defenses must be implemented within the client-side code to prevent malicious data from introducing an arbitrary URL as a redirection target. In general, this is best achieved by using a whitelist of URLs that are permitted redirection targets, and strictly validating the target against this list before performing the redirection.</p>","references":"<p>CWE-601: URL Redirection to Untrusted Site ('Open Redirect')</p>","selectedScore":null,"serviceNowTicket":null,"scores":{},"subStatus":"remediated","tags":[],"tenant_id":0,"hackerOneData":null,"snykData":null,"edgescanData":null,"integrationData":null,"calculated_severity":false,"reportedAt":1740114000000,"finding_id":null,"cuid":"cma3zpi2e00sw0hp74gk0fihd"},{"id":3643154951,"doc_id":[59013,643025423],"data":[3643154951,"Low","Content type incorrectly stated","Closed",1746021199678,null,1740114000000,1705499804175,null,null,"published"],"affected_assets":{},"assignedTo":null,"client_id":59013,"client_name":"Crimson Nexus Ventures","code_samples":[],"createdAt":1740114000000,"description":"<p>If a  response specifies an incorrect content type then browsers may process the response in unexpected ways. If the  content type is specified to be a renderable text-based format, then the browser will usually attempt to interpret the response as being in that format, regardless of the actual contents of the response. Additionally, some other specified content types might sometimes be interpreted as HTML due to quirks in particular browsers. This behavior might lead to otherwise \"safe\" content such as images  being rendered as HTML, enabling cross-site scripting attacks in certain conditions.<br />The presence of an incorrect content type statement typically only constitutes a security flaw when the affected resource is dynamically generated, uploaded by a user, or otherwise contains user input. You should review the contents of affected responses, and the context in which they appear, to determine whether any vulnerability exists.</p>","doc_type":"flaw","doc_version":"1.60.8","exhibits":[],"flaw_id":3643154951,"last_update":1746021199678,"reopenedAt":null,"report_id":643025423,"report_name":"HQ Internal Penetration Test","sev":3,"severity":"Low","severity_key":3,"source":"PTrac","status":"Closed","title":"Content type incorrectly stated","visibility":"published","closedAt":1705499804175,"fields":{},"jiraIssue":null,"recommendations":"<p>For every response containing a message body, the application should include a single Content-type header that correctly and unambiguously states the MIME type of the content in the response body.<br />Additionally, the response header \"X-content-type-options: nosniff\" should be returned in all responses to reduce the likelihood that browsers will interpret content in a way that disregards the Content-type header.</p>","references":"<ul><li>CWE-16: Configuration(https://cwe.mitre.org/data/definitions/16.html)</li><li>CWE-436: Interpretation Conflict(https://cwe.mitre.org/data/definitions/436.html)</li></ul>","selectedScore":null,"serviceNowTicket":null,"scores":{},"subStatus":"remediated","tags":[],"tenant_id":0,"hackerOneData":null,"snykData":null,"edgescanData":null,"integrationData":null,"calculated_severity":false,"reportedAt":1740114000000,"finding_id":null,"cuid":"cma3zpi2n00sx0hp75unbdlec"},{"id":3798750755,"doc_id":[59013,643025423],"data":[3798750755,"Low","Password field with autocomplete enabled","Closed",1746021199678,null,1740114000000,1728914099562,null,null,"published"],"affected_assets":{},"assignedTo":null,"client_id":59013,"client_name":"Crimson Nexus Ventures","code_samples":[],"createdAt":1740114000000,"description":"<p>Most browsers have a facility to remember user credentials that are entered into HTML forms. This function can be configured by the user and also by applications that employ user credentials. If the function is enabled, then credentials entered by the user are stored on their local computer and retrieved by the browser on future visits to the same application.<br />The stored credentials can be captured by an attacker who gains control over the user's computer. Further, an attacker who finds a separate application vulnerability such as cross-site scripting may be able to exploit this to retrieve a user's browser-stored credentials.</p>","doc_type":"flaw","doc_version":"1.60.8","exhibits":[],"flaw_id":3798750755,"last_update":1746021199678,"reopenedAt":null,"report_id":643025423,"report_name":"HQ Internal Penetration Test","sev":3,"severity":"Low","severity_key":3,"source":"PTrac","status":"Closed","title":"Password field with autocomplete enabled","visibility":"published","closedAt":1728914099562,"fields":{},"jiraIssue":null,"recommendations":"<p>To prevent browsers from storing credentials entered into HTML forms, include the attribute autocomplete=\"off\" within the FORM tag (to protect all form fields) or within the relevant INPUT tags (to protect specific individual fields). <br />Please note that modern web browsers may ignore this directive. In spite of this there is a chance that not disabling autocomplete may cause problems obtaining PCI compliance.</p>","references":"<p>CWE-200: Information Exposure</p>","selectedScore":null,"serviceNowTicket":null,"scores":{},"subStatus":"remediated","tags":[],"tenant_id":0,"hackerOneData":null,"snykData":null,"edgescanData":null,"integrationData":null,"calculated_severity":false,"reportedAt":1740114000000,"finding_id":null,"cuid":"cma3zpi2y00sy0hp79ftw4cox"},{"id":3959023456,"doc_id":[59013,643025423],"data":[3959023456,"Low","Link manipulation (DOM-based)","Closed",1746021199678,null,1740114000000,1728914099562,null,null,"published"],"affected_assets":{},"assignedTo":null,"client_id":59013,"client_name":"Crimson Nexus Ventures","code_samples":[],"createdAt":1740114000000,"description":"<p>DOM-based vulnerabilities arise when a client-side script reads data from a controllable part of the DOM (for example, the URL) and processes this data in an unsafe way.<br />DOM-based link manipulation  arises when a script writes controllable data to a navigation target within the current page, such as a clickable link or the submission URL of a form. An attacker may be able to use the vulnerability to construct a URL that, if visited by another application user, will modify the target of links within the response. An attacker may be able to leverage this to perform various attacks, including:<br />Causing the user to redirect to an arbitrary external URL, to facilitate a phishing attack.<br />Causing the user to submit sensitive form data to a server controlled by the attacker.<br />Causing the user to perform an unintended action within the application, by changing the file or query string associated with a link.<br />Bypassing browser anti-XSS defenses by injecting on-site links containing XSS exploits, since browser anti-XSS defenses typically do not operate on on-site links.</p><p>Burp Suite automatically identifies this issue using static code analysis, which may lead to false positives that are not actually exploitable. The relevant code and execution paths should be reviewed to determine whether this vulnerability is indeed present, or whether mitigations are in place that would prevent exploitation.</p>","doc_type":"flaw","doc_version":"1.60.8","exhibits":[],"flaw_id":3959023456,"last_update":1746021199678,"reopenedAt":null,"report_id":643025423,"report_name":"HQ Internal Penetration Test","sev":3,"severity":"Low","severity_key":3,"source":"PTrac","status":"Closed","title":"Link manipulation (DOM-based)","visibility":"published","closedAt":1728914099562,"fields":{},"jiraIssue":null,"recommendations":"<p>The most effective way to avoid DOM-based link manipulation vulnerabilities is not to dynamically set the target URLs of links or forms using data that originated from any untrusted source. If the desired functionality of the application means that this behavior is unavoidable, then defenses must be implemented within the client-side code to prevent malicious data from introducing an arbitrary URL as a link target. In general, this is best achieved by using a whitelist of URLs that are permitted link targets, and strictly validating the target against this list before setting the link target.</p>","references":"<p>CWE-20: Improper Input Validation</p>","selectedScore":null,"serviceNowTicket":null,"scores":{},"subStatus":"remediated","tags":[],"tenant_id":0,"hackerOneData":null,"snykData":null,"edgescanData":null,"integrationData":null,"calculated_severity":false,"reportedAt":1740114000000,"finding_id":null,"cuid":"cma3zpi3b00sz0hp7f0j87uwa"},{"id":4012482621,"doc_id":[59013,643025423],"data":[4012482621,"Low","Client-side XPath injection (stored DOM-based)","Closed",1746021199678,null,1740114000000,1728914099562,null,null,"published"],"affected_assets":{},"assignedTo":null,"client_id":59013,"client_name":"Crimson Nexus Ventures","code_samples":[],"createdAt":1740114000000,"description":"<p>Stored DOM-based vulnerabilities arise when user input is stored and later embedded into a response within a part of the DOM that is then processed in an unsafe way by a client-side script. An attacker can leverage the data storage to control a part of the response (for example, a JavaScript string) that can be used to trigger the DOM-based vulnerability.<br />DOM-based XPath injection  arises when a script incorporates controllable data into an XPath query. An attacker may be able to use this behavior to construct a URL that, if visited by another application user, will cause an arbitrary XPath query to execute, causing different data to be retrieved and processed by the application. Depending on the purpose for which the query results are used, it may be possible to subvert the application's logic, or cause unintended actions on behalf of the user.<br />Burp Suite automatically identifies this issue using static code analysis, which may lead to false positives that are not actually exploitable. The relevant code and execution paths should be reviewed to determine whether this vulnerability is indeed present, or whether mitigations are in place that would prevent exploitation.</p>","doc_type":"flaw","doc_version":"1.60.8","exhibits":[],"flaw_id":4012482621,"last_update":1746021199678,"reopenedAt":null,"report_id":643025423,"report_name":"HQ Internal Penetration Test","sev":3,"severity":"Low","severity_key":3,"source":"PTrac","status":"Closed","title":"Client-side XPath injection (stored DOM-based)","visibility":"published","closedAt":1728914099562,"fields":{},"jiraIssue":null,"recommendations":"<p>The most effective way to avoid DOM-based XPath injection vulnerabilities is not to incorporate into an XPath query any data that originated from an untrusted source. If the desired functionality of the application means that this behavior is unavoidable, then defenses must be implemented within the client-side code to prevent malicious data from modifying the XPath query in inappropriate ways. This may involve strict validation of specific items to ensure they do not contain any characters that may interfere with the structure of the query when it is parsed.</p>","references":"<ul><li>CWE-79: Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')(https://cwe.mitre.org/data/definitions/79.html)</li><li>CWE-116: Improper Encoding or Escaping of Output(https://cwe.mitre.org/data/definitions/116.html)</li><li>CWE-159: Failure to Sanitize Special Element(https://cwe.mitre.org/data/definitions/159.html)</li></ul>","selectedScore":null,"serviceNowTicket":null,"scores":{},"subStatus":"remediated","tags":[],"tenant_id":0,"hackerOneData":null,"snykData":null,"edgescanData":null,"integrationData":null,"calculated_severity":false,"reportedAt":1740114000000,"finding_id":null,"cuid":"cma3zpi3l00t00hp7hwai240n"},{"id":4208876216,"doc_id":[59013,643025423],"data":[4208876216,"Low","Link manipulation (stored DOM-based)","Closed",1746021199678,null,1740114000000,1728914099562,null,null,"published"],"affected_assets":{},"assignedTo":null,"client_id":59013,"client_name":"Crimson Nexus Ventures","code_samples":[],"createdAt":1740114000000,"description":"<p>Stored DOM-based vulnerabilities arise when user input is stored and later embedded into a response within a part of the DOM that is then processed in an unsafe way by a client-side script. An attacker can leverage the data storage to control a part of the response (for example, a JavaScript string) that can be used to trigger the DOM-based vulnerability.<br />DOM-based link manipulation  arises when a script writes controllable data to a navigation target within the current page, such as a clickable link or the submission URL of a form. An attacker may be able to use the vulnerability to construct a URL that, if visited by another application user, will modify the target of links within the response. An attacker may be able to leverage this to perform various attacks, including:<br />Causing the user to redirect to an arbitrary external URL, to facilitate a phishing attack.<br />Causing the user to submit sensitive form data to a server controlled by the attacker.<br />Causing the user to perform an unintended action within the application, by changing the file or query string associated with a link.<br />Bypassing browser anti-XSS defenses by injecting on-site links containing XSS exploits, since browser anti-XSS defenses typically do not operate on on-site links.</p><p>Burp Suite automatically identifies this issue using static code analysis, which may lead to false positives that are not actually exploitable. The relevant code and execution paths should be reviewed to determine whether this vulnerability is indeed present, or whether mitigations are in place that would prevent exploitation.</p>","doc_type":"flaw","doc_version":"1.60.8","exhibits":[],"flaw_id":4208876216,"last_update":1746021199678,"reopenedAt":null,"report_id":643025423,"report_name":"HQ Internal Penetration Test","sev":3,"severity":"Low","severity_key":3,"source":"PTrac","status":"Closed","title":"Link manipulation (stored DOM-based)","visibility":"published","closedAt":1728914099562,"fields":{},"jiraIssue":null,"recommendations":"<p>The most effective way to avoid DOM-based link manipulation vulnerabilities is not to dynamically set the target URLs of links or forms using data that originated from any untrusted source. If the desired functionality of the application means that this behavior is unavoidable, then defenses must be implemented within the client-side code to prevent malicious data from introducing an arbitrary URL as a link target. In general, this is best achieved by using a whitelist of URLs that are permitted link targets, and strictly validating the target against this list before setting the link target.</p>","references":"<p>CWE-20: Improper Input Validation</p>","selectedScore":null,"serviceNowTicket":null,"scores":{},"subStatus":"remediated","tags":[],"tenant_id":0,"hackerOneData":null,"snykData":null,"edgescanData":null,"integrationData":null,"calculated_severity":false,"reportedAt":1740114000000,"finding_id":null,"cuid":"cma3zpi3u00t10hp78zj3a3nl"},{"id":45666023,"doc_id":[59013,643025423],"data":[45666023,"Informational","Content type is not specified","Closed",1746021199678,null,1740114000000,1700672311640,null,null,"published"],"affected_assets":{},"assignedTo":null,"client_id":59013,"client_name":"Crimson Nexus Ventures","code_samples":[],"createdAt":1740114000000,"description":"<p>If a  response does not specify a content type, then the browser will usually analyze the response and attempt to determine the MIME type of its content. This can have unexpected results, and if the content contains any user-controllable data may lead to cross-site scripting or other client-side vulnerabilities.<br />In most cases, the absence of a content type statement does not constitute a security flaw, particularly if the response contains static content. You should review the contents of affected responses, and the context in which they appear, to determine whether any vulnerability exists.</p>","doc_type":"flaw","doc_version":"1.60.8","exhibits":[],"flaw_id":45666023,"last_update":1746021199678,"reopenedAt":null,"report_id":643025423,"report_name":"HQ Internal Penetration Test","sev":4,"severity":"Informational","severity_key":4,"source":"PTrac","status":"Closed","title":"Content type is not specified","visibility":"published","closedAt":1700672311640,"fields":{},"jiraIssue":null,"recommendations":"<p>For every response containing a message body, the application should include a single Content-type header that correctly and unambiguously states the MIME type of the content in the response body.</p>","references":"<p>CWE-16: Configuration</p>","selectedScore":null,"serviceNowTicket":null,"scores":{},"subStatus":"informational","tags":[],"tenant_id":0,"hackerOneData":null,"snykData":null,"edgescanData":null,"integrationData":null,"calculated_severity":false,"reportedAt":1740114000000,"finding_id":null,"cuid":"cma3zpi4800t20hp7b75dh5xs"},{"id":107243308,"doc_id":[59013,643025423],"data":[107243308,"Informational","External service interaction (SMTP)","Closed",1746021199678,null,1740114000000,1700672311640,null,null,"published"],"affected_assets":{},"assignedTo":null,"client_id":59013,"client_name":"Crimson Nexus Ventures","code_samples":[],"createdAt":1740114000000,"description":"<p>External service interaction arises when it is possible to induce an application to interact with an arbitrary external service, such as a web or mail server. The ability to trigger arbitrary external service interactions does not constitute a vulnerability in its own right, and in some cases might even be the intended behavior of the application. However, in many cases, it can indicate a vulnerability with serious consequences.<br />The ability to send requests to other systems can allow the vulnerable server to be used as an attack proxy. By submitting suitable payloads, an attacker can cause the application server to attack other systems that it can interact with. This may include public third-party systems, internal systems within the same organization, or services available on the local loopback adapter of the application server itself. Depending on the network architecture, this may expose highly vulnerable internal services that are not otherwise accessible to external attackers.<br />The facility to generate an email to an arbitrary address is often intended application behavior. But this is not necessarily the case, particulary in cases where the destination address is not explicitly entered on-screen by the user.</p>","doc_type":"flaw","doc_version":"1.60.8","exhibits":[],"flaw_id":107243308,"last_update":1746021199678,"reopenedAt":null,"report_id":643025423,"report_name":"HQ Internal Penetration Test","sev":4,"severity":"Informational","severity_key":4,"source":"PTrac","status":"Closed","title":"External service interaction (SMTP)","visibility":"published","closedAt":1700672311640,"fields":{},"jiraIssue":null,"recommendations":"<p>You should review the purpose and intended use of the relevant application functionality, and determine whether the ability to trigger arbitrary external service interactions is intended behavior. If so, you should be aware of the types of attacks that can be performed via this behavior and take appropriate measures. These measures might include blocking network access from the application server to other internal systems, and hardening the application server itself to remove any services available on the local loopback adapter.<br />If the ability to trigger arbitrary external service interactions is not intended behavior, then you should implement a whitelist of permitted services and hosts, and block any interactions that do not appear on this whitelist.</p>","references":"<p>Burp Collaborator</p><ul><li>CWE-16: Configuration(https://cwe.mitre.org/data/definitions/16.html)</li><li>CWE-406: Insufficient Control of Network Message Volume (Network Amplification)(https://cwe.mitre.org/data/definitions/406.html)</li></ul>","selectedScore":null,"serviceNowTicket":null,"scores":{},"subStatus":"informational","tags":[],"tenant_id":0,"hackerOneData":null,"snykData":null,"edgescanData":null,"integrationData":null,"calculated_severity":false,"reportedAt":1740114000000,"finding_id":null,"cuid":"cma3zpi4k00t30hp7ejbobw6g"},{"id":377528802,"doc_id":[59013,643025423],"data":[377528802,"Informational","DOM data manipulation (DOM-based)","Closed",1746021199678,null,1740114000000,1700672311640,null,null,"published"],"affected_assets":{},"assignedTo":null,"client_id":59013,"client_name":"Crimson Nexus Ventures","code_samples":[],"createdAt":1740114000000,"description":"<p>DOM-based vulnerabilities arise when a client-side script reads data from a controllable part of the DOM (for example, the URL) and processes this data in an unsafe way.<br />DOM data manipulation arises when a script writes controllable data to a field within the DOM that is used within the visible UI or client-side application logic. An attacker may be able to use the vulnerability to construct a URL that, if visited by another application user, will modify the appearance or behavior of the client-side UI. An attacker may be able to leverage this to perform virtual defacement of the application, or possibly to induce the user to perform unintended actions.<br />Burp Suite automatically identifies this issue using static code analysis, which may lead to false positives that are not actually exploitable. The relevant code and execution paths should be reviewed to determine whether this vulnerability is indeed present, or whether mitigations are in place that would prevent exploitation.</p>","doc_type":"flaw","doc_version":"1.60.8","exhibits":[],"flaw_id":377528802,"last_update":1746021199678,"reopenedAt":null,"report_id":643025423,"report_name":"HQ Internal Penetration Test","sev":4,"severity":"Informational","severity_key":4,"source":"PTrac","status":"Closed","title":"DOM data manipulation (DOM-based)","visibility":"published","closedAt":1700672311640,"fields":{},"jiraIssue":null,"recommendations":"<p>The most effective way to avoid DOM-based DOM data manipulation vulnerabilities is not to dynamically write to DOM data fields any data that originated from any untrusted source. If the desired functionality of the application means that this behavior is unavoidable, then defenses must be implemented within the client-side code to prevent malicious data from being stored. In general, this is best achieved by using a whitelist of permitted values.</p>","references":"<p>CWE-20: Improper Input Validation</p>","selectedScore":null,"serviceNowTicket":null,"scores":{},"subStatus":"informational","tags":[],"tenant_id":0,"hackerOneData":null,"snykData":null,"edgescanData":null,"integrationData":null,"calculated_severity":false,"reportedAt":1740114000000,"finding_id":null,"cuid":"cma3zpi4t00t40hp787li8qe9"},{"id":451480058,"doc_id":[59013,643025423],"data":[451480058,"Informational","Spoofable client IP address","Closed",1746021199678,null,1740114000000,1700672311640,null,null,"published"],"affected_assets":{},"assignedTo":null,"client_id":59013,"client_name":"Crimson Nexus Ventures","code_samples":[],"createdAt":1740114000000,"description":"<p>If an application trusts an HTTP request header like X-Forwarded-For to accurately specify the remote IP address of the connecting client, then malicious clients can spoof their IP address. This behavior does not necessarily constitute a security vulnerability, however some applications use client IP addresses to enforce access controls and rate limits. For example, an application might expose administrative functionality only to clients connecting from the local IP address of the server, or allow a certain number of failed login attempts from each unique IP address. Consider reviewing relevant functionality to determine whether this might be the case.</p>","doc_type":"flaw","doc_version":"1.60.8","exhibits":[],"flaw_id":451480058,"last_update":1746021199678,"reopenedAt":null,"report_id":643025423,"report_name":"HQ Internal Penetration Test","sev":4,"severity":"Informational","severity_key":4,"source":"PTrac","status":"Closed","title":"Spoofable client IP address","visibility":"published","closedAt":1700672311640,"fields":{},"jiraIssue":null,"recommendations":"<p>HTTP request headers such as X-Forwarded-For, True-Client-IP, and X-Real-IP are not a robust foundation on which to build any security measures, such as access controls. Any such measures should be replaced with more secure alternatives that are not vulnerable to spoofing.<br />If the platform application server returns incorrect information about the client's IP address due to the presence of any particular HTTP request header, then the server may need to be reconfigured, or an alternative method of identifying clients should be used.</p>","references":"<p>CWE-16: Configuration</p>","selectedScore":null,"serviceNowTicket":null,"scores":{},"subStatus":"informational","tags":[],"tenant_id":0,"hackerOneData":null,"snykData":null,"edgescanData":null,"integrationData":null,"calculated_severity":false,"reportedAt":1740114000000,"finding_id":null,"cuid":"cma3zpi5300t50hp7dmf51qup"},{"id":452906569,"doc_id":[59013,643025423],"data":[452906569,"Informational","Browser cross-site scripting filter disabled","Closed",1746021199678,null,1740114000000,1700672311640,null,null,"published"],"affected_assets":{},"assignedTo":null,"client_id":59013,"client_name":"Crimson Nexus Ventures","code_samples":[],"createdAt":1740114000000,"description":"<p>Some browsers, including Internet Explorer, contain built-in filters designed to protect against cross-site scripting (XSS) attacks. Applications can instruct browsers to disable this filter by setting the following response header:<br />X-XSS-Protection: 0<br />This behavior does not in itself constitute a vulnerability; in some cases XSS filters may themselves be leveraged to perform attacks against application users. However, in typical situations XSS filters do provide basic protection for application users against some XSS vulnerabilities in applications. The presence of this header should be reviewed to establish whether it affects the application's security posture.</p>","doc_type":"flaw","doc_version":"1.60.8","exhibits":[],"flaw_id":452906569,"last_update":1746021199678,"reopenedAt":null,"report_id":643025423,"report_name":"HQ Internal Penetration Test","sev":4,"severity":"Informational","severity_key":4,"source":"PTrac","status":"Closed","title":"Browser cross-site scripting filter disabled","visibility":"published","closedAt":1700672311640,"fields":{},"jiraIssue":null,"recommendations":"<p>Review whether the application needs to disable XSS filters. In most cases you can gain the protection provided by XSS filters without the associated risks by using the following response header:<br />X-XSS-Protection: 1; mode=block<br />When this header is set, browsers that detect an XSS attack will simply render a blank page instead of attempting to sanitize the injected script. This behavior is considerably less likely to introduce new security issues.</p>","references":"<p>Controlling the XSS Filter<br />CWE-16: Configuration</p>","selectedScore":null,"serviceNowTicket":null,"scores":{},"subStatus":"informational","tags":[],"tenant_id":0,"hackerOneData":null,"snykData":null,"edgescanData":null,"integrationData":null,"calculated_severity":false,"reportedAt":1740114000000,"finding_id":null,"cuid":"cma3zpi5d00t60hp726v4e0tk"},{"id":558101840,"doc_id":[59013,643025423],"data":[558101840,"Informational","Input returned in response (reflected)","Closed",1746021199678,null,1740114000000,1700672311640,null,null,"published"],"affected_assets":{},"assignedTo":null,"client_id":59013,"client_name":"Crimson Nexus Ventures","code_samples":[],"createdAt":1740114000000,"description":"<p>Reflection of input arises when data is copied from a request and echoed into the application's immediate response.<br />Input being returned in application responses is not a vulnerability in its own right. However, it is a prerequisite for many client-side vulnerabilities, including cross-site scripting, open redirection, content spoofing, and response header injection. Additionally, some server-side vulnerabilities such as SQL injection are often easier to identify and exploit when input is returned in responses. In applications where input retrieval is rare and the environment is resistant to automated testing (for example, due to a web application firewall), it might be worth subjecting instances of it to focused manual testing.</p>","doc_type":"flaw","doc_version":"1.60.8","exhibits":[],"flaw_id":558101840,"last_update":1746021199678,"reopenedAt":null,"report_id":643025423,"report_name":"HQ Internal Penetration Test","sev":4,"severity":"Informational","severity_key":4,"source":"PTrac","status":"Closed","title":"Input returned in response (reflected)","visibility":"published","closedAt":1700672311640,"fields":{},"jiraIssue":null,"recommendations":"","references":"<ul><li>CWE-20: Improper Input Validation(https://cwe.mitre.org/data/definitions/20.html)</li><li>CWE-116: Improper Encoding or Escaping of Output(https://cwe.mitre.org/data/definitions/116.html)</li></ul>","selectedScore":null,"serviceNowTicket":null,"scores":{},"subStatus":"informational","tags":[],"tenant_id":0,"hackerOneData":null,"snykData":null,"edgescanData":null,"integrationData":null,"calculated_severity":false,"reportedAt":1740114000000,"finding_id":null,"cuid":"cma3zpi5p00t70hp7ggvk44ri"},{"id":593441079,"doc_id":[59013,643025423],"data":[593441079,"Informational","User agent-dependent response","Closed",1746021199678,null,1740114000000,1700672311640,null,null,"published"],"affected_assets":{},"assignedTo":null,"client_id":59013,"client_name":"Crimson Nexus Ventures","code_samples":[],"createdAt":1740114000000,"description":"<p>Application responses may depend systematically on the value of the User-Agent header in requests. This behavior does not itself constitute a security vulnerability, but may point towards additional attack surface within the application, which may contain vulnerabilities.<br />This behavior often arises because applications provide different user interfaces for desktop and mobile users. Mobile interfaces have often been less thoroughly tested for vulnerabilities such as cross-site scripting, and often have simpler authentication and session handling mechanisms that may contain problems that are not present in the full interface.<br />To review the interface provided by the alternate User-Agent header, you can configure a match/replace rule in Burp Proxy to modify the User-Agent header in all requests, and then browse the application in the normal way using your normal browser.</p>","doc_type":"flaw","doc_version":"1.60.8","exhibits":[],"flaw_id":593441079,"last_update":1746021199678,"reopenedAt":null,"report_id":643025423,"report_name":"HQ Internal Penetration Test","sev":4,"severity":"Informational","severity_key":4,"source":"PTrac","status":"Closed","title":"User agent-dependent response","visibility":"published","closedAt":1700672311640,"fields":{},"jiraIssue":null,"recommendations":"","references":"<p>CWE-16: Configuration</p>","selectedScore":null,"serviceNowTicket":null,"scores":{},"subStatus":"informational","tags":[],"tenant_id":0,"hackerOneData":null,"snykData":null,"edgescanData":null,"integrationData":null,"calculated_severity":false,"reportedAt":1740114000000,"finding_id":null,"cuid":"cma3zpi6500t80hp7hqmv3al0"},{"id":626272805,"doc_id":[59013,643025423],"data":[626272805,"Informational","Link manipulation (stored)","Closed",1746021199678,null,1740114000000,1700672311640,null,null,"published"],"affected_assets":{},"assignedTo":null,"client_id":59013,"client_name":"Crimson Nexus Ventures","code_samples":[],"createdAt":1740114000000,"description":"<p>Link manipulation occurs when an application embeds user input into the path or domain of URLs that appear within application responses. An attacker can use this vulnerability to construct a link that, if visited by another application user, will modify the target of URLs within the response. It may be possible to leverage this to perform various attacks, such as:<br />Manipulating the path of an on-site link that has sensitive parameters in the URL. If the response from the modified path contains references to off-site resources, then the sensitive data might be leaked to external domains via the Referer header.<br />Manipulating the URL targeted by a form action, making the form submission have unintended side effects.<br />Manipulating the URL used by a CSS import statement to point to an attacker-uploaded file, resulting in CSS injection.<br />Injecting on-site links containing XSS exploits, thereby bypassing browser anti-XSS defenses, since those defenses typically do not operate on on-site links.</p><p>The security impact of this issue depends largely on the nature of the application functionality. Even if it has no direct impact on its own, an attacker may use it in conjunction with other vulnerabilities to escalate their overall severity.<br />Stored link manipulation vulnerabilities arise when the applicable input was submitted in an previous request and stored by the application.</p>","doc_type":"flaw","doc_version":"1.60.8","exhibits":[],"flaw_id":626272805,"last_update":1746021199678,"reopenedAt":null,"report_id":643025423,"report_name":"HQ Internal Penetration Test","sev":4,"severity":"Informational","severity_key":4,"source":"PTrac","status":"Closed","title":"Link manipulation (stored)","visibility":"published","closedAt":1700672311640,"fields":{},"jiraIssue":null,"recommendations":"<p>Consider using a whitelist to restrict user input to safe values. Please note that in some situations this issue will have no security impact, meaning no remediation is necessary.</p>","references":"<p>Using path manipulation to hijack Flickr accounts</p><ul><li>CWE-73: External Control of File Name or Path(https://cwe.mitre.org/data/definitions/73.html)</li><li>CWE-20: Improper Input Validation(https://cwe.mitre.org/data/definitions/20.html)</li></ul>","selectedScore":null,"serviceNowTicket":null,"scores":{},"subStatus":"informational","tags":[],"tenant_id":0,"hackerOneData":null,"snykData":null,"edgescanData":null,"integrationData":null,"calculated_severity":false,"reportedAt":1740114000000,"finding_id":null,"cuid":"cma3zpi6t00t90hp795spgxs1"},{"id":692257986,"doc_id":[59013,643025423],"data":[692257986,"Informational","File upload functionality","Closed",1746021199678,null,1740114000000,1700672311640,null,null,"published"],"affected_assets":{},"assignedTo":null,"client_id":59013,"client_name":"Crimson Nexus Ventures","code_samples":[],"createdAt":1740114000000,"description":"<p>File upload functionality is commonly associated with a number of vulnerabilities, including:<br />File path traversal<br />Persistent cross-site scripting<br />Placing of other client-executable code into the domain<br />Transmission of viruses and other malware<br />Denial of service</p><p>You should review file upload functionality to understand its purpose, and establish whether uploaded content is ever returned to other application users, either through their normal usage of the application or by being fed a specific link by an attacker.<br />Some factors to consider when evaluating the security impact of this functionality include:<br />Whether uploaded content can subsequently be downloaded via a URL within the application.<br />What Content-type and Content-disposition headers the application returns when the file's content is downloaded.<br />Whether it is possible to place executable HTML/JavaScript into the file, which executes when the file's contents are viewed.<br />Whether the application performs any filtering on the file extension or MIME type of the uploaded file.<br />Whether it is possible to construct a hybrid file containing both executable and non-executable content, to bypass any content filters - for example, a file containing both a GIF image and a Java archive (known as a GIFAR file).<br />What location is used to store uploaded content, and whether it is possible to supply a crafted filename to escape from this location.<br />Whether archive formats such as ZIP are unpacked by the application.<br />How the application handles attempts to upload very large files, or decompression bomb files.</p>","doc_type":"flaw","doc_version":"1.60.8","exhibits":[],"flaw_id":692257986,"last_update":1746021199678,"reopenedAt":null,"report_id":643025423,"report_name":"HQ Internal Penetration Test","sev":4,"severity":"Informational","severity_key":4,"source":"PTrac","status":"Closed","title":"File upload functionality","visibility":"published","closedAt":1700672311640,"fields":{},"jiraIssue":null,"recommendations":"<p>File upload functionality is not straightforward to implement securely. Some recommendations to consider in the design of this functionality include:<br />Use a server-generated filename if storing uploaded files on disk.<br />Inspect the content of uploaded files, and enforce a whitelist of accepted, non-executable content types. Additionally, enforce a blacklist of common executable formats, to hinder hybrid file attacks.<br />Enforce a whitelist of accepted, non-executable file extensions.<br />If uploaded files are downloaded by users, supply an accurate non-generic Content-Type header, the X-Content-Type-Options: nosniff header, and also a Content-Disposition header that specifies that browsers should handle the file as an attachment.<br />Enforce a size limit on uploaded files (for defense-in-depth, this can be implemented both within application code and in the web server's configuration).<br />Reject attempts to upload archive formats such as ZIP.</p>","references":"<ul><li>Various proof-of-concept files(https://github.com/cure53/H5SC/tree/master/attachments)</li><li>An XSS polyglot attack(http://labs.detectify.com/post/120088174539/building-an-xss-polyglot-through-swf-and-csp)</li></ul><p>CWE-434: Unrestricted Upload of File with Dangerous Type</p>","selectedScore":null,"serviceNowTicket":null,"scores":{},"subStatus":"informational","tags":[],"tenant_id":0,"hackerOneData":null,"snykData":null,"edgescanData":null,"integrationData":null,"calculated_severity":false,"reportedAt":1740114000000,"finding_id":null,"cuid":"cma3zpi7800ta0hp73sxp5xcs"}],"summary":{"GeneratedOn":"2025-07-02T19:35:05.740Z","GeneratedBy":{"name":"","tenant_id":0},"FlawSummary":{"critical":{"total":0,"open":0,"closed":0,"in_process":0},"high":{"total":46,"open":0,"closed":46,"in_process":0},"medium":{"total":21,"open":0,"closed":21,"in_process":0},"low":{"total":33,"open":0,"closed":33,"in_process":0},"informational":{"total":9,"open":0,"closed":9,"in_process":0},"totals":{"total_reported":109,"open":0,"closed":109,"in_process":0}},"ReportAssets":{},"ReportMedia":{}},"evidence":[],"client_info":{"name":"Crimson Nexus Ventures","description":"Crimson Nexus Ventures (CNV) is a premier knowledge-driven organization founded by a group of Harvard alumni, scholars, and entrepreneurs dedicated to harnessing the power of education, research, and innovation. Headquartered in Cambridge, Massachusetts, CNV is a global think tank, consultancy, and venture firm operating at the intersection of academia, business, and social impact.\n\nCNV provides transformative solutions in education technology, policy consulting, and sustainable development while fostering a culture of continuous learning and intellectual curiosity.","client_id":59013,"doc_type":"client","poc":"Dr. Alexandra Hayes","poc_email":"ahayes@cnv.org","tenant_id":0,"tags":["cnv","education"],"fields":[{"label":"Location","value":"Cambridge, Massachusetts, USA"}]},"procedures":[]}